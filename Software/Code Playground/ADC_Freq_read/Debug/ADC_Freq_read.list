
ADC_Freq_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006838  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08006a00  08006a00  00016a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c54  08006c54  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c5c  08006c5c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005cf8  200001e0  08006e44  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005ed8  08006e44  00025ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da1e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e98  00000000  00000000  0002dc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  0002fac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  00030808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000224b9  00000000  00000000  00031450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a14d  00000000  00000000  00053909  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3e20  00000000  00000000  0005da56  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131876  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f4  00000000  00000000  001318f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e0 	.word	0x200001e0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080069e8 	.word	0x080069e8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e4 	.word	0x200001e4
 8000204:	080069e8 	.word	0x080069e8

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <gen_asin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int asin_lut[4096];
void gen_asin(){
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
    for(int i = 0;i<4096;i++){
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	e031      	b.n	8000eb0 <gen_asin+0x70>
        double phase = asin((i-2048.0)/2048.0);
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f7ff fb35 	bl	80004bc <__aeabi_i2d>
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <gen_asin+0x88>)
 8000e58:	f7ff f9e2 	bl	8000220 <__aeabi_dsub>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	460c      	mov	r4, r1
 8000e60:	4618      	mov	r0, r3
 8000e62:	4621      	mov	r1, r4
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <gen_asin+0x88>)
 8000e6a:	f7ff fcbb 	bl	80007e4 <__aeabi_ddiv>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460c      	mov	r4, r1
 8000e72:	ec44 3b17 	vmov	d7, r3, r4
 8000e76:	eeb0 0a47 	vmov.f32	s0, s14
 8000e7a:	eef0 0a67 	vmov.f32	s1, s15
 8000e7e:	f005 fa85 	bl	800638c <asin>
 8000e82:	ed87 0b00 	vstr	d0, [r7]
        asin_lut[i] = phase*1000000;
 8000e86:	a30e      	add	r3, pc, #56	; (adr r3, 8000ec0 <gen_asin+0x80>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e90:	f7ff fb7e 	bl	8000590 <__aeabi_dmul>
 8000e94:	4603      	mov	r3, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	f7ff fe28 	bl	8000af0 <__aeabi_d2iz>
 8000ea0:	4601      	mov	r1, r0
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <gen_asin+0x8c>)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i<4096;i++){
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3301      	adds	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eb6:	dbc9      	blt.n	8000e4c <gen_asin+0xc>
    }
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	00000000 	.word	0x00000000
 8000ec4:	412e8480 	.word	0x412e8480
 8000ec8:	40a00000 	.word	0x40a00000
 8000ecc:	20001e50 	.word	0x20001e50

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b598      	push	{r3, r4, r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed4:	f000 fd80 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed8:	f000 f82e 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000edc:	f000 f96c 	bl	80011b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ee0:	f000 f896 	bl	8001010 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000ee4:	f000 f93e 	bl	8001164 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ee8:	f000 f8e4 	bl	80010b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000eec:	2104      	movs	r1, #4
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <main+0x58>)
 8000ef0:	f002 fb2e 	bl	8003550 <HAL_TIM_OC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,10);
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <main+0x58>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	220a      	movs	r2, #10
 8000efa:	639a      	str	r2, [r3, #56]	; 0x38
	 sprintf(uartData,"Starting...\n");
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <main+0x5c>)
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <main+0x60>)
 8000f00:	4614      	mov	r4, r2
 8000f02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f04:	6020      	str	r0, [r4, #0]
 8000f06:	6061      	str	r1, [r4, #4]
 8000f08:	60a2      	str	r2, [r4, #8]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	7323      	strb	r3, [r4, #12]
	  HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <main+0x5c>)
 8000f10:	f7ff f97a 	bl	8000208 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	230a      	movs	r3, #10
 8000f1a:	4904      	ldr	r1, [pc, #16]	; (8000f2c <main+0x5c>)
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <main+0x64>)
 8000f1e:	f003 f87e 	bl	800401e <HAL_UART_Transmit>
	  gen_asin();
 8000f22:	f7ff ff8d 	bl	8000e40 <gen_asin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <main+0x56>
 8000f28:	20005e50 	.word	0x20005e50
 8000f2c:	2000021c 	.word	0x2000021c
 8000f30:	08006a00 	.word	0x08006a00
 8000f34:	20005e90 	.word	0x20005e90

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	; 0x50
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	2234      	movs	r2, #52	; 0x34
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fcf2 	bl	8004930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <SystemClock_Config+0xd0>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	4a28      	ldr	r2, [pc, #160]	; (8001008 <SystemClock_Config+0xd0>)
 8000f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <SystemClock_Config+0xd0>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f78:	2300      	movs	r3, #0
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <SystemClock_Config+0xd4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f84:	4a21      	ldr	r2, [pc, #132]	; (800100c <SystemClock_Config+0xd4>)
 8000f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <SystemClock_Config+0xd4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fac:	2308      	movs	r3, #8
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000fb0:	235a      	movs	r3, #90	; 0x5a
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 f83d 	bl	8003044 <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fd0:	f000 fb28 	bl	8001624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fd6d 	bl	8002ad0 <HAL_RCC_ClockConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ffc:	f000 fb12 	bl	8001624 <Error_Handler>
  }
}
 8001000:	bf00      	nop
 8001002:	3750      	adds	r7, #80	; 0x50
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <MX_ADC1_Init+0x9c>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_ADC1_Init+0x98>)
 800102a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800102e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001052:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <MX_ADC1_Init+0xa0>)
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_ADC1_Init+0x98>)
 800105e:	2201      	movs	r2, #1
 8001060:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_ADC1_Init+0x98>)
 800106c:	2201      	movs	r2, #1
 800106e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001072:	f000 fd23 	bl	8001abc <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800107c:	f000 fad2 	bl	8001624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001080:	2300      	movs	r3, #0
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001088:	2302      	movs	r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001092:	f001 f80d 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800109c:	f000 fac2 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000df0 	.word	0x20000df0
 80010ac:	40012000 	.word	0x40012000
 80010b0:	0f000001 	.word	0x0f000001

080010b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]
 80010d2:	615a      	str	r2, [r3, #20]
 80010d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <MX_TIM2_Init+0xac>)
 80010d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <MX_TIM2_Init+0xac>)
 80010e0:	2259      	movs	r2, #89	; 0x59
 80010e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <MX_TIM2_Init+0xac>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_TIM2_Init+0xac>)
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_TIM2_Init+0xac>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_TIM2_Init+0xac>)
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80010fe:	4818      	ldr	r0, [pc, #96]	; (8001160 <MX_TIM2_Init+0xac>)
 8001100:	f002 f9fa 	bl	80034f8 <HAL_TIM_OC_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800110a:	f000 fa8b 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	4619      	mov	r1, r3
 800111c:	4810      	ldr	r0, [pc, #64]	; (8001160 <MX_TIM2_Init+0xac>)
 800111e:	f002 fea1 	bl	8003e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001128:	f000 fa7c 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2204      	movs	r2, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <MX_TIM2_Init+0xac>)
 8001144:	f002 fb90 	bl	8003868 <HAL_TIM_OC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800114e:	f000 fa69 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001152:	4803      	ldr	r0, [pc, #12]	; (8001160 <MX_TIM2_Init+0xac>)
 8001154:	f000 fb08 	bl	8001768 <HAL_TIM_MspPostInit>

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20005e50 	.word	0x20005e50

08001164 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_USART2_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800119c:	f002 fef2 	bl	8003f84 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 fa3d 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20005e90 	.word	0x20005e90
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <MX_GPIO_Init+0x120>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a40      	ldr	r2, [pc, #256]	; (80012d8 <MX_GPIO_Init+0x120>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <MX_GPIO_Init+0x120>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b3a      	ldr	r3, [pc, #232]	; (80012d8 <MX_GPIO_Init+0x120>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a39      	ldr	r2, [pc, #228]	; (80012d8 <MX_GPIO_Init+0x120>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <MX_GPIO_Init+0x120>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <MX_GPIO_Init+0x120>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a32      	ldr	r2, [pc, #200]	; (80012d8 <MX_GPIO_Init+0x120>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <MX_GPIO_Init+0x120>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <MX_GPIO_Init+0x120>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <MX_GPIO_Init+0x120>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <MX_GPIO_Init+0x120>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|Frequency_Status_Pin|Freq_Valid_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8001244:	4825      	ldr	r0, [pc, #148]	; (80012dc <MX_GPIO_Init+0x124>)
 8001246:	f001 fc0f 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Freq_Invalid_GPIO_Port, Freq_Invalid_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	4824      	ldr	r0, [pc, #144]	; (80012e0 <MX_GPIO_Init+0x128>)
 8001250:	f001 fc0a 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Toggle_GPIO_Port, Toggle_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2140      	movs	r1, #64	; 0x40
 8001258:	4822      	ldr	r0, [pc, #136]	; (80012e4 <MX_GPIO_Init+0x12c>)
 800125a:	f001 fc05 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800125e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	481b      	ldr	r0, [pc, #108]	; (80012e0 <MX_GPIO_Init+0x128>)
 8001274:	f001 fa66 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 Frequency_Status_Pin Freq_Valid_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|Frequency_Status_Pin|Freq_Valid_Pin;
 8001278:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4812      	ldr	r0, [pc, #72]	; (80012dc <MX_GPIO_Init+0x124>)
 8001292:	f001 fa57 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : Freq_Invalid_Pin */
  GPIO_InitStruct.Pin = Freq_Invalid_Pin;
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Freq_Invalid_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_GPIO_Init+0x128>)
 80012ae:	f001 fa49 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : Toggle_Pin */
  GPIO_InitStruct.Pin = Toggle_Pin;
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Toggle_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_GPIO_Init+0x12c>)
 80012ca:	f001 fa3b 	bl	8002744 <HAL_GPIO_Init>

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020400 	.word	0x40020400

080012e8 <TIM_OC_Callback>:
int valid_freq_low_count = 0;
int valid_freq_high_count = 0;
int invalid_freq_count = 0;
bool freq_state = false;		//Interpreted freq
bool invalid_freq = false;
void TIM_OC_Callback(){
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

	//Log Values
	prev_time = curr_time;
 80012ee:	4bb0      	ldr	r3, [pc, #704]	; (80015b0 <TIM_OC_Callback+0x2c8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4ab0      	ldr	r2, [pc, #704]	; (80015b4 <TIM_OC_Callback+0x2cc>)
 80012f4:	6013      	str	r3, [r2, #0]
	phase_prev = phase_curr;
 80012f6:	4bb0      	ldr	r3, [pc, #704]	; (80015b8 <TIM_OC_Callback+0x2d0>)
 80012f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012fc:	4aaf      	ldr	r2, [pc, #700]	; (80015bc <TIM_OC_Callback+0x2d4>)
 80012fe:	e9c2 3400 	strd	r3, r4, [r2]

	//Get ADC Val
	HAL_ADC_Start(&hadc1);
 8001302:	48af      	ldr	r0, [pc, #700]	; (80015c0 <TIM_OC_Callback+0x2d8>)
 8001304:	f000 fc1e 	bl	8001b44 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,5);
 8001308:	2105      	movs	r1, #5
 800130a:	48ad      	ldr	r0, [pc, #692]	; (80015c0 <TIM_OC_Callback+0x2d8>)
 800130c:	f000 fce0 	bl	8001cd0 <HAL_ADC_PollForConversion>
	int adcval = HAL_ADC_GetValue(&hadc1);
 8001310:	48ab      	ldr	r0, [pc, #684]	; (80015c0 <TIM_OC_Callback+0x2d8>)
 8001312:	f000 fea2 	bl	800205a <HAL_ADC_GetValue>
 8001316:	4603      	mov	r3, r0
 8001318:	607b      	str	r3, [r7, #4]
	adc_val = adcval;
 800131a:	4aaa      	ldr	r2, [pc, #680]	; (80015c4 <TIM_OC_Callback+0x2dc>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOB,Toggle_Pin);
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	48a9      	ldr	r0, [pc, #676]	; (80015c8 <TIM_OC_Callback+0x2e0>)
 8001324:	f001 fbb9 	bl	8002a9a <HAL_GPIO_TogglePin>
	//Capture time
	curr_time = htim2.Instance->CNT;
 8001328:	4ba8      	ldr	r3, [pc, #672]	; (80015cc <TIM_OC_Callback+0x2e4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	461a      	mov	r2, r3
 8001330:	4b9f      	ldr	r3, [pc, #636]	; (80015b0 <TIM_OC_Callback+0x2c8>)
 8001332:	601a      	str	r2, [r3, #0]

	//Calculate freq
	phase_curr = asin_lut[adcval];
 8001334:	4aa6      	ldr	r2, [pc, #664]	; (80015d0 <TIM_OC_Callback+0x2e8>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8bd 	bl	80004bc <__aeabi_i2d>
 8001342:	4603      	mov	r3, r0
 8001344:	460c      	mov	r4, r1
 8001346:	4a9c      	ldr	r2, [pc, #624]	; (80015b8 <TIM_OC_Callback+0x2d0>)
 8001348:	e9c2 3400 	strd	r3, r4, [r2]
	freq_rad = (phase_curr-phase_prev)/(curr_time-prev_time);
 800134c:	4b9a      	ldr	r3, [pc, #616]	; (80015b8 <TIM_OC_Callback+0x2d0>)
 800134e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001352:	4b9a      	ldr	r3, [pc, #616]	; (80015bc <TIM_OC_Callback+0x2d4>)
 8001354:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001358:	461a      	mov	r2, r3
 800135a:	4623      	mov	r3, r4
 800135c:	f7fe ff60 	bl	8000220 <__aeabi_dsub>
 8001360:	4603      	mov	r3, r0
 8001362:	460c      	mov	r4, r1
 8001364:	4625      	mov	r5, r4
 8001366:	461c      	mov	r4, r3
 8001368:	4b91      	ldr	r3, [pc, #580]	; (80015b0 <TIM_OC_Callback+0x2c8>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b91      	ldr	r3, [pc, #580]	; (80015b4 <TIM_OC_Callback+0x2cc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f8a2 	bl	80004bc <__aeabi_i2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7ff fa30 	bl	80007e4 <__aeabi_ddiv>
 8001384:	4603      	mov	r3, r0
 8001386:	460c      	mov	r4, r1
 8001388:	4618      	mov	r0, r3
 800138a:	4621      	mov	r1, r4
 800138c:	f7ff fbb0 	bl	8000af0 <__aeabi_d2iz>
 8001390:	4602      	mov	r2, r0
 8001392:	4b90      	ldr	r3, [pc, #576]	; (80015d4 <TIM_OC_Callback+0x2ec>)
 8001394:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,Freq_Valid_Pin,0);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139c:	488e      	ldr	r0, [pc, #568]	; (80015d8 <TIM_OC_Callback+0x2f0>)
 800139e:	f001 fb63 	bl	8002a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,Freq_Invalid_Pin,0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	488d      	ldr	r0, [pc, #564]	; (80015dc <TIM_OC_Callback+0x2f4>)
 80013a8:	f001 fb5e 	bl	8002a68 <HAL_GPIO_WritePin>

	//+ Low frequency
	if(7539-freq_deviation <freq_rad && freq_rad < 7539+freq_deviation ){
 80013ac:	f640 134e 	movw	r3, #2382	; 0x94e
 80013b0:	f5c3 53eb 	rsb	r3, r3, #7520	; 0x1d60
 80013b4:	3313      	adds	r3, #19
 80013b6:	4a87      	ldr	r2, [pc, #540]	; (80015d4 <TIM_OC_Callback+0x2ec>)
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	4293      	cmp	r3, r2
 80013bc:	da2b      	bge.n	8001416 <TIM_OC_Callback+0x12e>
 80013be:	f640 134e 	movw	r3, #2382	; 0x94e
 80013c2:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80013c6:	3313      	adds	r3, #19
 80013c8:	4a82      	ldr	r2, [pc, #520]	; (80015d4 <TIM_OC_Callback+0x2ec>)
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	4293      	cmp	r3, r2
 80013ce:	dd22      	ble.n	8001416 <TIM_OC_Callback+0x12e>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2120      	movs	r1, #32
 80013d4:	4880      	ldr	r0, [pc, #512]	; (80015d8 <TIM_OC_Callback+0x2f0>)
 80013d6:	f001 fb47 	bl	8002a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,Freq_Valid_Pin,0);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e0:	487d      	ldr	r0, [pc, #500]	; (80015d8 <TIM_OC_Callback+0x2f0>)
 80013e2:	f001 fb41 	bl	8002a68 <HAL_GPIO_WritePin>

		//Reset invalid
		invalid_freq_count = 0;
 80013e6:	4b7e      	ldr	r3, [pc, #504]	; (80015e0 <TIM_OC_Callback+0x2f8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

		//Inc number of low frequencies
		valid_freq_low_count++;
 80013ec:	4b7d      	ldr	r3, [pc, #500]	; (80015e4 <TIM_OC_Callback+0x2fc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a7c      	ldr	r2, [pc, #496]	; (80015e4 <TIM_OC_Callback+0x2fc>)
 80013f4:	6013      	str	r3, [r2, #0]
		//Got enough valid frequencies to probably call this a low
		if(valid_freq_low_count>=min_valid){
 80013f6:	4b7b      	ldr	r3, [pc, #492]	; (80015e4 <TIM_OC_Callback+0x2fc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2202      	movs	r2, #2
 80013fc:	4293      	cmp	r3, r2
 80013fe:	f2c0 80c2 	blt.w	8001586 <TIM_OC_Callback+0x29e>
			//Reset high count
			valid_freq_high_count = 0;
 8001402:	4b79      	ldr	r3, [pc, #484]	; (80015e8 <TIM_OC_Callback+0x300>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

			//Set frequency status
			freq_state = false;
 8001408:	4b78      	ldr	r3, [pc, #480]	; (80015ec <TIM_OC_Callback+0x304>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
			invalid_freq = false;
 800140e:	4b78      	ldr	r3, [pc, #480]	; (80015f0 <TIM_OC_Callback+0x308>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
		if(valid_freq_low_count>=min_valid){
 8001414:	e0b7      	b.n	8001586 <TIM_OC_Callback+0x29e>
		}
	}
	//- Low frequency
	else if(-7539-freq_deviation <freq_rad && freq_rad < -7539+freq_deviation ){
 8001416:	f640 124e 	movw	r2, #2382	; 0x94e
 800141a:	4b76      	ldr	r3, [pc, #472]	; (80015f4 <TIM_OC_Callback+0x30c>)
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	4a6d      	ldr	r2, [pc, #436]	; (80015d4 <TIM_OC_Callback+0x2ec>)
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	4293      	cmp	r3, r2
 8001424:	da2b      	bge.n	800147e <TIM_OC_Callback+0x196>
 8001426:	f640 134e 	movw	r3, #2382	; 0x94e
 800142a:	f5a3 53eb 	sub.w	r3, r3, #7520	; 0x1d60
 800142e:	3b13      	subs	r3, #19
 8001430:	4a68      	ldr	r2, [pc, #416]	; (80015d4 <TIM_OC_Callback+0x2ec>)
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	4293      	cmp	r3, r2
 8001436:	dd22      	ble.n	800147e <TIM_OC_Callback+0x196>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8001438:	2201      	movs	r2, #1
 800143a:	2120      	movs	r1, #32
 800143c:	4866      	ldr	r0, [pc, #408]	; (80015d8 <TIM_OC_Callback+0x2f0>)
 800143e:	f001 fb13 	bl	8002a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,Freq_Valid_Pin,0);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001448:	4863      	ldr	r0, [pc, #396]	; (80015d8 <TIM_OC_Callback+0x2f0>)
 800144a:	f001 fb0d 	bl	8002a68 <HAL_GPIO_WritePin>

		//Reset invalid
		invalid_freq_count = 0;
 800144e:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <TIM_OC_Callback+0x2f8>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

		//Inc number of low frequencies
		valid_freq_low_count++;
 8001454:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <TIM_OC_Callback+0x2fc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a62      	ldr	r2, [pc, #392]	; (80015e4 <TIM_OC_Callback+0x2fc>)
 800145c:	6013      	str	r3, [r2, #0]
		//Got enough valid frequencies to probably call this a low
		if(valid_freq_low_count>=min_valid){
 800145e:	4b61      	ldr	r3, [pc, #388]	; (80015e4 <TIM_OC_Callback+0x2fc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2202      	movs	r2, #2
 8001464:	4293      	cmp	r3, r2
 8001466:	f2c0 808e 	blt.w	8001586 <TIM_OC_Callback+0x29e>
			//Reset high count
			valid_freq_high_count = 0;
 800146a:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <TIM_OC_Callback+0x300>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

			//Set frequency status
			freq_state = false;
 8001470:	4b5e      	ldr	r3, [pc, #376]	; (80015ec <TIM_OC_Callback+0x304>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
			invalid_freq = false;
 8001476:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <TIM_OC_Callback+0x308>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
		if(valid_freq_low_count>=min_valid){
 800147c:	e083      	b.n	8001586 <TIM_OC_Callback+0x29e>
		}
	}
	//+ High frequency
	else if(13823-freq_deviation <freq_rad && freq_rad < 13823+freq_deviation ){
 800147e:	f640 134e 	movw	r3, #2382	; 0x94e
 8001482:	f5c3 5357 	rsb	r3, r3, #13760	; 0x35c0
 8001486:	333f      	adds	r3, #63	; 0x3f
 8001488:	4a52      	ldr	r2, [pc, #328]	; (80015d4 <TIM_OC_Callback+0x2ec>)
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	4293      	cmp	r3, r2
 800148e:	da2a      	bge.n	80014e6 <TIM_OC_Callback+0x1fe>
 8001490:	f640 134e 	movw	r3, #2382	; 0x94e
 8001494:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001498:	333f      	adds	r3, #63	; 0x3f
 800149a:	4a4e      	ldr	r2, [pc, #312]	; (80015d4 <TIM_OC_Callback+0x2ec>)
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	4293      	cmp	r3, r2
 80014a0:	dd21      	ble.n	80014e6 <TIM_OC_Callback+0x1fe>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2120      	movs	r1, #32
 80014a6:	484c      	ldr	r0, [pc, #304]	; (80015d8 <TIM_OC_Callback+0x2f0>)
 80014a8:	f001 fade 	bl	8002a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,Freq_Valid_Pin,1);
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b2:	4849      	ldr	r0, [pc, #292]	; (80015d8 <TIM_OC_Callback+0x2f0>)
 80014b4:	f001 fad8 	bl	8002a68 <HAL_GPIO_WritePin>

		//Reset invalid
		invalid_freq_count = 0;
 80014b8:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <TIM_OC_Callback+0x2f8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

		//Inc number of low frequencies
		valid_freq_high_count++;
 80014be:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <TIM_OC_Callback+0x300>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	4a48      	ldr	r2, [pc, #288]	; (80015e8 <TIM_OC_Callback+0x300>)
 80014c6:	6013      	str	r3, [r2, #0]
		//Got enough valid frequencies to probably call this a low
		if(valid_freq_high_count>=min_valid){
 80014c8:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <TIM_OC_Callback+0x300>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2202      	movs	r2, #2
 80014ce:	4293      	cmp	r3, r2
 80014d0:	db59      	blt.n	8001586 <TIM_OC_Callback+0x29e>
			//Reset low count
			valid_freq_low_count = 0;
 80014d2:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <TIM_OC_Callback+0x2fc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

			//Set frequency status
			freq_state = true;
 80014d8:	4b44      	ldr	r3, [pc, #272]	; (80015ec <TIM_OC_Callback+0x304>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
			invalid_freq = false;
 80014de:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <TIM_OC_Callback+0x308>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
		if(valid_freq_high_count>=min_valid){
 80014e4:	e04f      	b.n	8001586 <TIM_OC_Callback+0x29e>
		}
	}
	//- High frequency
	else if(-13823-freq_deviation <freq_rad && freq_rad < -13823+freq_deviation ){
 80014e6:	f640 124e 	movw	r2, #2382	; 0x94e
 80014ea:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <TIM_OC_Callback+0x310>)
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	4a39      	ldr	r2, [pc, #228]	; (80015d4 <TIM_OC_Callback+0x2ec>)
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	4293      	cmp	r3, r2
 80014f4:	da2a      	bge.n	800154c <TIM_OC_Callback+0x264>
 80014f6:	f640 134e 	movw	r3, #2382	; 0x94e
 80014fa:	f5a3 5357 	sub.w	r3, r3, #13760	; 0x35c0
 80014fe:	3b3f      	subs	r3, #63	; 0x3f
 8001500:	4a34      	ldr	r2, [pc, #208]	; (80015d4 <TIM_OC_Callback+0x2ec>)
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	4293      	cmp	r3, r2
 8001506:	dd21      	ble.n	800154c <TIM_OC_Callback+0x264>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8001508:	2201      	movs	r2, #1
 800150a:	2120      	movs	r1, #32
 800150c:	4832      	ldr	r0, [pc, #200]	; (80015d8 <TIM_OC_Callback+0x2f0>)
 800150e:	f001 faab 	bl	8002a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,Freq_Valid_Pin,1);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001518:	482f      	ldr	r0, [pc, #188]	; (80015d8 <TIM_OC_Callback+0x2f0>)
 800151a:	f001 faa5 	bl	8002a68 <HAL_GPIO_WritePin>

		//Reset invalid
		invalid_freq_count = 0;
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <TIM_OC_Callback+0x2f8>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

		//Inc number of low frequencies
		valid_freq_high_count++;
 8001524:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <TIM_OC_Callback+0x300>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	4a2f      	ldr	r2, [pc, #188]	; (80015e8 <TIM_OC_Callback+0x300>)
 800152c:	6013      	str	r3, [r2, #0]
		//Got enough valid frequencies to probably call this a low
		if(valid_freq_high_count>=min_valid){
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <TIM_OC_Callback+0x300>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2202      	movs	r2, #2
 8001534:	4293      	cmp	r3, r2
 8001536:	db26      	blt.n	8001586 <TIM_OC_Callback+0x29e>
			//Reset low count
			valid_freq_low_count = 0;
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <TIM_OC_Callback+0x2fc>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

			//Set frequency status
			freq_state = true;
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <TIM_OC_Callback+0x304>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
			invalid_freq = false;
 8001544:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <TIM_OC_Callback+0x308>)
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
		if(valid_freq_high_count>=min_valid){
 800154a:	e01c      	b.n	8001586 <TIM_OC_Callback+0x29e>
		}
	}
	//Invalid frequencies
	else {
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 800154c:	2200      	movs	r2, #0
 800154e:	2120      	movs	r1, #32
 8001550:	4821      	ldr	r0, [pc, #132]	; (80015d8 <TIM_OC_Callback+0x2f0>)
 8001552:	f001 fa89 	bl	8002a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,Freq_Invalid_Pin,1);
 8001556:	2201      	movs	r2, #1
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	4820      	ldr	r0, [pc, #128]	; (80015dc <TIM_OC_Callback+0x2f4>)
 800155c:	f001 fa84 	bl	8002a68 <HAL_GPIO_WritePin>

		invalid_freq_count++;
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <TIM_OC_Callback+0x2f8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <TIM_OC_Callback+0x2f8>)
 8001568:	6013      	str	r3, [r2, #0]
		if(invalid_freq_count>=max_invalid){
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <TIM_OC_Callback+0x2f8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2203      	movs	r2, #3
 8001570:	4293      	cmp	r3, r2
 8001572:	db08      	blt.n	8001586 <TIM_OC_Callback+0x29e>
			invalid_freq = true;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <TIM_OC_Callback+0x308>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
			valid_freq_high_count = 0;
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <TIM_OC_Callback+0x300>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
			valid_freq_low_count = 0;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <TIM_OC_Callback+0x2fc>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
		}
	}

	//Should look like binary
	HAL_GPIO_WritePin(GPIOA,Frequency_Status_Pin,freq_state);
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <TIM_OC_Callback+0x304>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	4812      	ldr	r0, [pc, #72]	; (80015d8 <TIM_OC_Callback+0x2f0>)
 8001590:	f001 fa6a 	bl	8002a68 <HAL_GPIO_WritePin>

	uint32_t next_sampl = curr_time + SAMP_COUNT;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <TIM_OC_Callback+0x2c8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	220f      	movs	r2, #15
 800159a:	4413      	add	r3, r2
 800159c:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,next_sampl);
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <TIM_OC_Callback+0x2e4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bdb0      	pop	{r4, r5, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000e38 	.word	0x20000e38
 80015b4:	20001e40 	.word	0x20001e40
 80015b8:	20000de0 	.word	0x20000de0
 80015bc:	20000dd8 	.word	0x20000dd8
 80015c0:	20000df0 	.word	0x20000df0
 80015c4:	20000218 	.word	0x20000218
 80015c8:	40020400 	.word	0x40020400
 80015cc:	20005e50 	.word	0x20005e50
 80015d0:	20001e50 	.word	0x20001e50
 80015d4:	20001e44 	.word	0x20001e44
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020800 	.word	0x40020800
 80015e0:	20000204 	.word	0x20000204
 80015e4:	200001fc 	.word	0x200001fc
 80015e8:	20000200 	.word	0x20000200
 80015ec:	20000208 	.word	0x20000208
 80015f0:	20000209 	.word	0x20000209
 80015f4:	ffffe28d 	.word	0xffffe28d
 80015f8:	ffffca01 	.word	0xffffca01

080015fc <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160c:	d106      	bne.n	800161c <HAL_TIM_OC_DelayElapsedCallback+0x20>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7f1b      	ldrb	r3, [r3, #28]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d102      	bne.n	800161c <HAL_TIM_OC_DelayElapsedCallback+0x20>
	{
		TIM_OC_Callback();
 8001616:	f7ff fe67 	bl	80012e8 <TIM_OC_Callback>
	}
	return;
 800161a:	bf00      	nop
 800161c:	bf00      	nop
}
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <HAL_MspInit+0x4c>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_MspInit+0x4c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_MspInit+0x4c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_MspInit+0x4c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001672:	2007      	movs	r0, #7
 8001674:	f001 f824 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <HAL_ADC_MspInit+0x8c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12f      	bne.n	8001706 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <HAL_ADC_MspInit+0x90>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a19      	ldr	r2, [pc, #100]	; (8001714 <HAL_ADC_MspInit+0x90>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_ADC_MspInit+0x90>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <HAL_ADC_MspInit+0x90>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <HAL_ADC_MspInit+0x90>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_ADC_MspInit+0x90>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016de:	2301      	movs	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e2:	2303      	movs	r3, #3
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <HAL_ADC_MspInit+0x94>)
 80016f2:	f001 f827 	bl	8002744 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2012      	movs	r0, #18
 80016fc:	f000 ffeb 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001700:	2012      	movs	r0, #18
 8001702:	f001 f804 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40012000 	.word	0x40012000
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000

0800171c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800172c:	d115      	bne.n	800175a <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_TIM_OC_MspInit+0x48>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <HAL_TIM_OC_MspInit+0x48>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_TIM_OC_MspInit+0x48>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	201c      	movs	r0, #28
 8001750:	f000 ffc1 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001754:	201c      	movs	r0, #28
 8001756:	f000 ffda 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001788:	d11d      	bne.n	80017c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_TIM_MspPostInit+0x68>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_TIM_MspPostInit+0x68>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_TIM_MspPostInit+0x68>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017a6:	2302      	movs	r3, #2
 80017a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	4619      	mov	r1, r3
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <HAL_TIM_MspPostInit+0x6c>)
 80017c2:	f000 ffbf 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <HAL_UART_MspInit+0x84>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12b      	bne.n	8001852 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_UART_MspInit+0x88>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_UART_MspInit+0x88>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_UART_MspInit+0x88>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_UART_MspInit+0x88>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_UART_MspInit+0x88>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_UART_MspInit+0x88>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001832:	230c      	movs	r3, #12
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001842:	2307      	movs	r3, #7
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_UART_MspInit+0x8c>)
 800184e:	f000 ff79 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	; 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40004400 	.word	0x40004400
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 f8de 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <ADC_IRQHandler+0x10>)
 80018ca:	f000 fa85 	bl	8001dd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000df0 	.word	0x20000df0

080018d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <TIM2_IRQHandler+0x10>)
 80018de:	f001 febb 	bl	8003658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20005e50 	.word	0x20005e50

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f002 ffde 	bl	80048dc <__errno>
 8001920:	4602      	mov	r2, r0
 8001922:	230c      	movs	r3, #12
 8001924:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20020000 	.word	0x20020000
 800194c:	00000400 	.word	0x00000400
 8001950:	2000020c 	.word	0x2000020c
 8001954:	20005ed8 	.word	0x20005ed8

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <SystemInit+0x28>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a07      	ldr	r2, [pc, #28]	; (8001980 <SystemInit+0x28>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SystemInit+0x28>)
 800196e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001972:	609a      	str	r2, [r3, #8]
#endif
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001988:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800198a:	e003      	b.n	8001994 <LoopCopyDataInit>

0800198c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800198e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001990:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001992:	3104      	adds	r1, #4

08001994 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001998:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800199a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800199c:	d3f6      	bcc.n	800198c <CopyDataInit>
  ldr  r2, =_sbss
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019a0:	e002      	b.n	80019a8 <LoopFillZerobss>

080019a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019a4:	f842 3b04 	str.w	r3, [r2], #4

080019a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019ac:	d3f9      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ae:	f7ff ffd3 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b2:	f002 ff99 	bl	80048e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b6:	f7ff fa8b 	bl	8000ed0 <main>
  bx  lr    
 80019ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019c0:	08006c64 	.word	0x08006c64
  ldr  r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019c8:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80019cc:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80019d0:	20005ed8 	.word	0x20005ed8

080019d4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <CAN1_RX0_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <HAL_Init+0x40>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_Init+0x40>)
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_Init+0x40>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 fe5d 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f808 	bl	8001a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fe12 	bl	8001634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fe75 	bl	800272a <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 fe3d 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20005ed0 	.word	0x20005ed0

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20005ed0 	.word	0x20005ed0

08001abc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e033      	b.n	8001b3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fdd2 	bl	8001684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b02:	f023 0302 	bic.w	r3, r3, #2
 8001b06:	f043 0202 	orr.w	r2, r3, #2
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fc00 	bl	8002314 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2a:	e001      	b.n	8001b30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Start+0x1a>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e0a5      	b.n	8001caa <HAL_ADC_Start+0x166>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d018      	beq.n	8001ba6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b84:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <HAL_ADC_Start+0x174>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a4c      	ldr	r2, [pc, #304]	; (8001cbc <HAL_ADC_Start+0x178>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9a      	lsrs	r2, r3, #18
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b98:	e002      	b.n	8001ba0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f9      	bne.n	8001b9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d179      	bne.n	8001ca8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf2:	d106      	bne.n	8001c02 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	f023 0206 	bic.w	r2, r3, #6
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
 8001c00:	e002      	b.n	8001c08 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <HAL_ADC_Start+0x17c>)
 8001c12:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c1c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d12a      	bne.n	8001c80 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <HAL_ADC_Start+0x180>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d015      	beq.n	8001c60 <HAL_ADC_Start+0x11c>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_ADC_Start+0x184>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d105      	bne.n	8001c4a <HAL_ADC_Start+0x106>
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_ADC_Start+0x17c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_ADC_Start+0x188>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d129      	bne.n	8001ca8 <HAL_ADC_Start+0x164>
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_ADC_Start+0x17c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d823      	bhi.n	8001ca8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d11c      	bne.n	8001ca8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	e013      	b.n	8001ca8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_ADC_Start+0x180>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10e      	bne.n	8001ca8 <HAL_ADC_Start+0x164>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d107      	bne.n	8001ca8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ca6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	431bde83 	.word	0x431bde83
 8001cc0:	40012300 	.word	0x40012300
 8001cc4:	40012000 	.word	0x40012000
 8001cc8:	40012100 	.word	0x40012100
 8001ccc:	40012200 	.word	0x40012200

08001cd0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cec:	d113      	bne.n	8001d16 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfc:	d10b      	bne.n	8001d16 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f043 0220 	orr.w	r2, r3, #32
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e05c      	b.n	8001dd0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d16:	f7ff fec5 	bl	8001aa4 <HAL_GetTick>
 8001d1a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d1c:	e01a      	b.n	8001d54 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d016      	beq.n	8001d54 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <HAL_ADC_PollForConversion+0x6c>
 8001d2c:	f7ff feba 	bl	8001aa4 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d20b      	bcs.n	8001d54 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f043 0204 	orr.w	r2, r3, #4
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e03d      	b.n	8001dd0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d1dd      	bne.n	8001d1e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f06f 0212 	mvn.w	r2, #18
 8001d6a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d123      	bne.n	8001dce <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d11f      	bne.n	8001dce <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d111      	bne.n	8001dce <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d105      	bne.n	8001dce <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d049      	beq.n	8001eae <HAL_ADC_IRQHandler+0xd6>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d046      	beq.n	8001eae <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d12b      	bne.n	8001e9e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d127      	bne.n	8001e9e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d119      	bne.n	8001e9e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0220 	bic.w	r2, r2, #32
 8001e78:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d105      	bne.n	8001e9e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8e8 	bl	8002074 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0212 	mvn.w	r2, #18
 8001eac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ece:	2b80      	cmp	r3, #128	; 0x80
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d057      	beq.n	8001f90 <HAL_ADC_IRQHandler+0x1b8>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d054      	beq.n	8001f90 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d105      	bne.n	8001efe <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d139      	bne.n	8001f80 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d12b      	bne.n	8001f80 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d124      	bne.n	8001f80 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d11d      	bne.n	8001f80 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d119      	bne.n	8001f80 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fac3 	bl	800250c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 020c 	mvn.w	r2, #12
 8001f8e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d017      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x21a>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d014      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f850 	bl	8002088 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0201 	mvn.w	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002012:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_ADC_IRQHandler+0x27a>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	f043 0202 	orr.w	r2, r3, #2
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0220 	mvn.w	r2, #32
 8002040:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f82a 	bl	800209c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0220 	mvn.w	r2, #32
 8002050:	601a      	str	r2, [r3, #0]
  }
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1c>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e113      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x244>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b09      	cmp	r3, #9
 80020da:	d925      	bls.n	8002128 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68d9      	ldr	r1, [r3, #12]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	3b1e      	subs	r3, #30
 80020f2:	2207      	movs	r2, #7
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43da      	mvns	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	400a      	ands	r2, r1
 8002100:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68d9      	ldr	r1, [r3, #12]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	4603      	mov	r3, r0
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4403      	add	r3, r0
 800211a:	3b1e      	subs	r3, #30
 800211c:	409a      	lsls	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	e022      	b.n	800216e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6919      	ldr	r1, [r3, #16]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	2207      	movs	r2, #7
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	400a      	ands	r2, r1
 800214a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6919      	ldr	r1, [r3, #16]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	4603      	mov	r3, r0
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4403      	add	r3, r0
 8002164:	409a      	lsls	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b06      	cmp	r3, #6
 8002174:	d824      	bhi.n	80021c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	3b05      	subs	r3, #5
 8002188:	221f      	movs	r2, #31
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	400a      	ands	r2, r1
 8002196:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4618      	mov	r0, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3b05      	subs	r3, #5
 80021b2:	fa00 f203 	lsl.w	r2, r0, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
 80021be:	e04c      	b.n	800225a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	d824      	bhi.n	8002212 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3b23      	subs	r3, #35	; 0x23
 80021da:	221f      	movs	r2, #31
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43da      	mvns	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	400a      	ands	r2, r1
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3b23      	subs	r3, #35	; 0x23
 8002204:	fa00 f203 	lsl.w	r2, r0, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
 8002210:	e023      	b.n	800225a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	3b41      	subs	r3, #65	; 0x41
 8002224:	221f      	movs	r2, #31
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	400a      	ands	r2, r1
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b41      	subs	r3, #65	; 0x41
 800224e:	fa00 f203 	lsl.w	r2, r0, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <HAL_ADC_ConfigChannel+0x250>)
 800225c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a28      	ldr	r2, [pc, #160]	; (8002304 <HAL_ADC_ConfigChannel+0x254>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d10f      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1d8>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b12      	cmp	r3, #18
 800226e:	d10b      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_ADC_ConfigChannel+0x254>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d12b      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x23a>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_ADC_ConfigChannel+0x258>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x1f4>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b11      	cmp	r3, #17
 80022a2:	d122      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a11      	ldr	r2, [pc, #68]	; (8002308 <HAL_ADC_ConfigChannel+0x258>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d111      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_ADC_ConfigChannel+0x25c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a11      	ldr	r2, [pc, #68]	; (8002310 <HAL_ADC_ConfigChannel+0x260>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	0c9a      	lsrs	r2, r3, #18
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022dc:	e002      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f9      	bne.n	80022de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40012300 	.word	0x40012300
 8002304:	40012000 	.word	0x40012000
 8002308:	10000012 	.word	0x10000012
 800230c:	20000000 	.word	0x20000000
 8002310:	431bde83 	.word	0x431bde83

08002314 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231c:	4b79      	ldr	r3, [pc, #484]	; (8002504 <ADC_Init+0x1f0>)
 800231e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	431a      	orrs	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	021a      	lsls	r2, r3, #8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800236c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800238e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	4a58      	ldr	r2, [pc, #352]	; (8002508 <ADC_Init+0x1f4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d022      	beq.n	80023f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e00f      	b.n	8002412 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002410:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0202 	bic.w	r2, r2, #2
 8002420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7e1b      	ldrb	r3, [r3, #24]
 800242c:	005a      	lsls	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01b      	beq.n	8002478 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800245e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	3b01      	subs	r3, #1
 800246c:	035a      	lsls	r2, r3, #13
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	e007      	b.n	8002488 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002486:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	051a      	lsls	r2, r3, #20
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ca:	025a      	lsls	r2, r3, #9
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	029a      	lsls	r2, r3, #10
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40012300 	.word	0x40012300
 8002508:	0f000001 	.word	0x0f000001

0800250c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff29 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff3e 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff8e 	bl	8002614 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5d 	bl	80025c0 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff31 	bl	8002584 <__NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffa2 	bl	800267c <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	e165      	b.n	8002a2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002760:	2201      	movs	r2, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 8154 	bne.w	8002a26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d00b      	beq.n	800279e <HAL_GPIO_Init+0x5a>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d007      	beq.n	800279e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002792:	2b11      	cmp	r3, #17
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b12      	cmp	r3, #18
 800279c:	d130      	bne.n	8002800 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 0201 	and.w	r2, r3, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0xfc>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b12      	cmp	r3, #18
 800283e:	d123      	bne.n	8002888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3208      	adds	r2, #8
 8002848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0203 	and.w	r2, r3, #3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80ae 	beq.w	8002a26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <HAL_GPIO_Init+0x2fc>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4a5b      	ldr	r2, [pc, #364]	; (8002a40 <HAL_GPIO_Init+0x2fc>)
 80028d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
 80028da:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <HAL_GPIO_Init+0x2fc>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e6:	4a57      	ldr	r2, [pc, #348]	; (8002a44 <HAL_GPIO_Init+0x300>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4e      	ldr	r2, [pc, #312]	; (8002a48 <HAL_GPIO_Init+0x304>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d025      	beq.n	800295e <HAL_GPIO_Init+0x21a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4d      	ldr	r2, [pc, #308]	; (8002a4c <HAL_GPIO_Init+0x308>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01f      	beq.n	800295a <HAL_GPIO_Init+0x216>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4c      	ldr	r2, [pc, #304]	; (8002a50 <HAL_GPIO_Init+0x30c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d019      	beq.n	8002956 <HAL_GPIO_Init+0x212>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4b      	ldr	r2, [pc, #300]	; (8002a54 <HAL_GPIO_Init+0x310>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_GPIO_Init+0x20e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4a      	ldr	r2, [pc, #296]	; (8002a58 <HAL_GPIO_Init+0x314>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00d      	beq.n	800294e <HAL_GPIO_Init+0x20a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a49      	ldr	r2, [pc, #292]	; (8002a5c <HAL_GPIO_Init+0x318>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <HAL_GPIO_Init+0x206>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a48      	ldr	r2, [pc, #288]	; (8002a60 <HAL_GPIO_Init+0x31c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d101      	bne.n	8002946 <HAL_GPIO_Init+0x202>
 8002942:	2306      	movs	r3, #6
 8002944:	e00c      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 8002946:	2307      	movs	r3, #7
 8002948:	e00a      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800294a:	2305      	movs	r3, #5
 800294c:	e008      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800294e:	2304      	movs	r3, #4
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 8002952:	2303      	movs	r3, #3
 8002954:	e004      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800295e:	2300      	movs	r3, #0
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f002 0203 	and.w	r2, r2, #3
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	4093      	lsls	r3, r2
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002970:	4934      	ldr	r1, [pc, #208]	; (8002a44 <HAL_GPIO_Init+0x300>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297e:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <HAL_GPIO_Init+0x320>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a2:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <HAL_GPIO_Init+0x320>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029a8:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_GPIO_Init+0x320>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029cc:	4a25      	ldr	r2, [pc, #148]	; (8002a64 <HAL_GPIO_Init+0x320>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_GPIO_Init+0x320>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029f6:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_GPIO_Init+0x320>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_GPIO_Init+0x320>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a20:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <HAL_GPIO_Init+0x320>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	f67f ae96 	bls.w	8002760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	3724      	adds	r7, #36	; 0x24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40013800 	.word	0x40013800
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	40020800 	.word	0x40020800
 8002a54:	40020c00 	.word	0x40020c00
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40021400 	.word	0x40021400
 8002a60:	40021800 	.word	0x40021800
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a84:	e003      	b.n	8002a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	401a      	ands	r2, r3
 8002aae:	887b      	ldrh	r3, [r7, #2]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d104      	bne.n	8002abe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	041a      	lsls	r2, r3, #16
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002abc:	e002      	b.n	8002ac4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	619a      	str	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0cc      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b68      	ldr	r3, [pc, #416]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d90c      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b65      	ldr	r3, [pc, #404]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0b8      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	494d      	ldr	r1, [pc, #308]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d044      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d119      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e06f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e067      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4934      	ldr	r1, [pc, #208]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe ff70 	bl	8001aa4 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7fe ff6c 	bl	8001aa4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e04f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 020c 	and.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1eb      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d20c      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e032      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4916      	ldr	r1, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	490e      	ldr	r1, [pc, #56]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c56:	f000 f855 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002c5a:	4601      	mov	r1, r0
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	5cd3      	ldrb	r3, [r2, r3]
 8002c6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe fed0 	bl	8001a1c <HAL_InitTick>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023c00 	.word	0x40023c00
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	08006a10 	.word	0x08006a10
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb8:	f7ff fff0 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cbc:	4601      	mov	r1, r0
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0a9b      	lsrs	r3, r3, #10
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4a03      	ldr	r2, [pc, #12]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	08006a20 	.word	0x08006a20

08002cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ce0:	f7ff ffdc 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce4:	4601      	mov	r1, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0b5b      	lsrs	r3, r3, #13
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08006a20 	.word	0x08006a20

08002d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1e:	4bc6      	ldr	r3, [pc, #792]	; (8003038 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b0c      	cmp	r3, #12
 8002d28:	f200 817e 	bhi.w	8003028 <HAL_RCC_GetSysClockFreq+0x324>
 8002d2c:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <HAL_RCC_GetSysClockFreq+0x30>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002d69 	.word	0x08002d69
 8002d38:	08003029 	.word	0x08003029
 8002d3c:	08003029 	.word	0x08003029
 8002d40:	08003029 	.word	0x08003029
 8002d44:	08002d6f 	.word	0x08002d6f
 8002d48:	08003029 	.word	0x08003029
 8002d4c:	08003029 	.word	0x08003029
 8002d50:	08003029 	.word	0x08003029
 8002d54:	08002d75 	.word	0x08002d75
 8002d58:	08003029 	.word	0x08003029
 8002d5c:	08003029 	.word	0x08003029
 8002d60:	08003029 	.word	0x08003029
 8002d64:	08002ed1 	.word	0x08002ed1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4bb4      	ldr	r3, [pc, #720]	; (800303c <HAL_RCC_GetSysClockFreq+0x338>)
 8002d6a:	613b      	str	r3, [r7, #16]
       break;
 8002d6c:	e15f      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d6e:	4bb4      	ldr	r3, [pc, #720]	; (8003040 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002d70:	613b      	str	r3, [r7, #16]
      break;
 8002d72:	e15c      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d74:	4bb0      	ldr	r3, [pc, #704]	; (8003038 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d7c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7e:	4bae      	ldr	r3, [pc, #696]	; (8003038 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d04a      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8a:	4bab      	ldr	r3, [pc, #684]	; (8003038 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	f04f 0400 	mov.w	r4, #0
 8002d94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	ea03 0501 	and.w	r5, r3, r1
 8002da0:	ea04 0602 	and.w	r6, r4, r2
 8002da4:	4629      	mov	r1, r5
 8002da6:	4632      	mov	r2, r6
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	f04f 0400 	mov.w	r4, #0
 8002db0:	0154      	lsls	r4, r2, #5
 8002db2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002db6:	014b      	lsls	r3, r1, #5
 8002db8:	4619      	mov	r1, r3
 8002dba:	4622      	mov	r2, r4
 8002dbc:	1b49      	subs	r1, r1, r5
 8002dbe:	eb62 0206 	sbc.w	r2, r2, r6
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	f04f 0400 	mov.w	r4, #0
 8002dca:	0194      	lsls	r4, r2, #6
 8002dcc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dd0:	018b      	lsls	r3, r1, #6
 8002dd2:	1a5b      	subs	r3, r3, r1
 8002dd4:	eb64 0402 	sbc.w	r4, r4, r2
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	00e2      	lsls	r2, r4, #3
 8002de2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002de6:	00d9      	lsls	r1, r3, #3
 8002de8:	460b      	mov	r3, r1
 8002dea:	4614      	mov	r4, r2
 8002dec:	195b      	adds	r3, r3, r5
 8002dee:	eb44 0406 	adc.w	r4, r4, r6
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	0262      	lsls	r2, r4, #9
 8002dfc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e00:	0259      	lsls	r1, r3, #9
 8002e02:	460b      	mov	r3, r1
 8002e04:	4614      	mov	r4, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	4621      	mov	r1, r4
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f04f 0400 	mov.w	r4, #0
 8002e10:	461a      	mov	r2, r3
 8002e12:	4623      	mov	r3, r4
 8002e14:	f7fd fe94 	bl	8000b40 <__aeabi_uldivmod>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e049      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e20:	4b85      	ldr	r3, [pc, #532]	; (8003038 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	f04f 0400 	mov.w	r4, #0
 8002e2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	ea03 0501 	and.w	r5, r3, r1
 8002e36:	ea04 0602 	and.w	r6, r4, r2
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	4632      	mov	r2, r6
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	f04f 0400 	mov.w	r4, #0
 8002e46:	0154      	lsls	r4, r2, #5
 8002e48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e4c:	014b      	lsls	r3, r1, #5
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4622      	mov	r2, r4
 8002e52:	1b49      	subs	r1, r1, r5
 8002e54:	eb62 0206 	sbc.w	r2, r2, r6
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	f04f 0400 	mov.w	r4, #0
 8002e60:	0194      	lsls	r4, r2, #6
 8002e62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e66:	018b      	lsls	r3, r1, #6
 8002e68:	1a5b      	subs	r3, r3, r1
 8002e6a:	eb64 0402 	sbc.w	r4, r4, r2
 8002e6e:	f04f 0100 	mov.w	r1, #0
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	00e2      	lsls	r2, r4, #3
 8002e78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e7c:	00d9      	lsls	r1, r3, #3
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4614      	mov	r4, r2
 8002e82:	195b      	adds	r3, r3, r5
 8002e84:	eb44 0406 	adc.w	r4, r4, r6
 8002e88:	f04f 0100 	mov.w	r1, #0
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	02a2      	lsls	r2, r4, #10
 8002e92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e96:	0299      	lsls	r1, r3, #10
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4614      	mov	r4, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f04f 0400 	mov.w	r4, #0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4623      	mov	r3, r4
 8002eaa:	f7fd fe49 	bl	8000b40 <__aeabi_uldivmod>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	460c      	mov	r4, r1
 8002eb2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eb4:	4b60      	ldr	r3, [pc, #384]	; (8003038 <HAL_RCC_GetSysClockFreq+0x334>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	613b      	str	r3, [r7, #16]
      break;
 8002ece:	e0ae      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed0:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eda:	4b57      	ldr	r3, [pc, #348]	; (8003038 <HAL_RCC_GetSysClockFreq+0x334>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d04a      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	4b54      	ldr	r3, [pc, #336]	; (8003038 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	f04f 0400 	mov.w	r4, #0
 8002ef0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	ea03 0501 	and.w	r5, r3, r1
 8002efc:	ea04 0602 	and.w	r6, r4, r2
 8002f00:	4629      	mov	r1, r5
 8002f02:	4632      	mov	r2, r6
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	0154      	lsls	r4, r2, #5
 8002f0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f12:	014b      	lsls	r3, r1, #5
 8002f14:	4619      	mov	r1, r3
 8002f16:	4622      	mov	r2, r4
 8002f18:	1b49      	subs	r1, r1, r5
 8002f1a:	eb62 0206 	sbc.w	r2, r2, r6
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	f04f 0400 	mov.w	r4, #0
 8002f26:	0194      	lsls	r4, r2, #6
 8002f28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f2c:	018b      	lsls	r3, r1, #6
 8002f2e:	1a5b      	subs	r3, r3, r1
 8002f30:	eb64 0402 	sbc.w	r4, r4, r2
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	00e2      	lsls	r2, r4, #3
 8002f3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f42:	00d9      	lsls	r1, r3, #3
 8002f44:	460b      	mov	r3, r1
 8002f46:	4614      	mov	r4, r2
 8002f48:	195b      	adds	r3, r3, r5
 8002f4a:	eb44 0406 	adc.w	r4, r4, r6
 8002f4e:	f04f 0100 	mov.w	r1, #0
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	0262      	lsls	r2, r4, #9
 8002f58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f5c:	0259      	lsls	r1, r3, #9
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4614      	mov	r4, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	4621      	mov	r1, r4
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f04f 0400 	mov.w	r4, #0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4623      	mov	r3, r4
 8002f70:	f7fd fde6 	bl	8000b40 <__aeabi_uldivmod>
 8002f74:	4603      	mov	r3, r0
 8002f76:	460c      	mov	r4, r1
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e049      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7c:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	ea03 0501 	and.w	r5, r3, r1
 8002f92:	ea04 0602 	and.w	r6, r4, r2
 8002f96:	4629      	mov	r1, r5
 8002f98:	4632      	mov	r2, r6
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	f04f 0400 	mov.w	r4, #0
 8002fa2:	0154      	lsls	r4, r2, #5
 8002fa4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fa8:	014b      	lsls	r3, r1, #5
 8002faa:	4619      	mov	r1, r3
 8002fac:	4622      	mov	r2, r4
 8002fae:	1b49      	subs	r1, r1, r5
 8002fb0:	eb62 0206 	sbc.w	r2, r2, r6
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	f04f 0400 	mov.w	r4, #0
 8002fbc:	0194      	lsls	r4, r2, #6
 8002fbe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fc2:	018b      	lsls	r3, r1, #6
 8002fc4:	1a5b      	subs	r3, r3, r1
 8002fc6:	eb64 0402 	sbc.w	r4, r4, r2
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	00e2      	lsls	r2, r4, #3
 8002fd4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fd8:	00d9      	lsls	r1, r3, #3
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4614      	mov	r4, r2
 8002fde:	195b      	adds	r3, r3, r5
 8002fe0:	eb44 0406 	adc.w	r4, r4, r6
 8002fe4:	f04f 0100 	mov.w	r1, #0
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	02a2      	lsls	r2, r4, #10
 8002fee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ff2:	0299      	lsls	r1, r3, #10
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4614      	mov	r4, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f04f 0400 	mov.w	r4, #0
 8003002:	461a      	mov	r2, r3
 8003004:	4623      	mov	r3, r4
 8003006:	f7fd fd9b 	bl	8000b40 <__aeabi_uldivmod>
 800300a:	4603      	mov	r3, r0
 800300c:	460c      	mov	r4, r1
 800300e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCC_GetSysClockFreq+0x334>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	0f1b      	lsrs	r3, r3, #28
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	613b      	str	r3, [r7, #16]
      break;
 8003026:	e002      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <HAL_RCC_GetSysClockFreq+0x338>)
 800302a:	613b      	str	r3, [r7, #16]
      break;
 800302c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800302e:	693b      	ldr	r3, [r7, #16]
}
 8003030:	4618      	mov	r0, r3
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	00f42400 	.word	0x00f42400
 8003040:	007a1200 	.word	0x007a1200

08003044 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8083 	beq.w	8003164 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800305e:	4b95      	ldr	r3, [pc, #596]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b04      	cmp	r3, #4
 8003068:	d019      	beq.n	800309e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800306a:	4b92      	ldr	r3, [pc, #584]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003072:	2b08      	cmp	r3, #8
 8003074:	d106      	bne.n	8003084 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003076:	4b8f      	ldr	r3, [pc, #572]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003082:	d00c      	beq.n	800309e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003084:	4b8b      	ldr	r3, [pc, #556]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800308c:	2b0c      	cmp	r3, #12
 800308e:	d112      	bne.n	80030b6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003090:	4b88      	ldr	r3, [pc, #544]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309c:	d10b      	bne.n	80030b6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309e:	4b85      	ldr	r3, [pc, #532]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d05b      	beq.n	8003162 <HAL_RCC_OscConfig+0x11e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d157      	bne.n	8003162 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e216      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x8a>
 80030c0:	4b7c      	ldr	r3, [pc, #496]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a7b      	ldr	r2, [pc, #492]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80030c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	e01d      	b.n	800310a <HAL_RCC_OscConfig+0xc6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d6:	d10c      	bne.n	80030f2 <HAL_RCC_OscConfig+0xae>
 80030d8:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a75      	ldr	r2, [pc, #468]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80030de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b73      	ldr	r3, [pc, #460]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a72      	ldr	r2, [pc, #456]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e00b      	b.n	800310a <HAL_RCC_OscConfig+0xc6>
 80030f2:	4b70      	ldr	r3, [pc, #448]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6f      	ldr	r2, [pc, #444]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80030f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b6d      	ldr	r3, [pc, #436]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6c      	ldr	r2, [pc, #432]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d013      	beq.n	800313a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7fe fcc7 	bl	8001aa4 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800311a:	f7fe fcc3 	bl	8001aa4 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b64      	cmp	r3, #100	; 0x64
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e1db      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312c:	4b61      	ldr	r3, [pc, #388]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0xd6>
 8003138:	e014      	b.n	8003164 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe fcb3 	bl	8001aa4 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003142:	f7fe fcaf 	bl	8001aa4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b64      	cmp	r3, #100	; 0x64
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e1c7      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003154:	4b57      	ldr	r3, [pc, #348]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0xfe>
 8003160:	e000      	b.n	8003164 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003162:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d06f      	beq.n	8003250 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003170:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b00      	cmp	r3, #0
 800317a:	d017      	beq.n	80031ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800317c:	4b4d      	ldr	r3, [pc, #308]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003184:	2b08      	cmp	r3, #8
 8003186:	d105      	bne.n	8003194 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003188:	4b4a      	ldr	r3, [pc, #296]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00b      	beq.n	80031ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003194:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d11c      	bne.n	80031da <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a0:	4b44      	ldr	r3, [pc, #272]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d116      	bne.n	80031da <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ac:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_OscConfig+0x180>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e18f      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4938      	ldr	r1, [pc, #224]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d8:	e03a      	b.n	8003250 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d020      	beq.n	8003224 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e2:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <HAL_RCC_OscConfig+0x274>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe fc5c 	bl	8001aa4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f0:	f7fe fc58 	bl	8001aa4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e170      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4925      	ldr	r1, [pc, #148]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
 8003222:	e015      	b.n	8003250 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003224:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_RCC_OscConfig+0x274>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe fc3b 	bl	8001aa4 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003232:	f7fe fc37 	bl	8001aa4 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e14f      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d037      	beq.n	80032cc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d016      	beq.n	8003292 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003264:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_RCC_OscConfig+0x278>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fe fc1b 	bl	8001aa4 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003272:	f7fe fc17 	bl	8001aa4 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e12f      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 8003286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x22e>
 8003290:	e01c      	b.n	80032cc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_RCC_OscConfig+0x278>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7fe fc04 	bl	8001aa4 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329e:	e00f      	b.n	80032c0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a0:	f7fe fc00 	bl	8001aa4 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d908      	bls.n	80032c0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e118      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	42470000 	.word	0x42470000
 80032bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c0:	4b8a      	ldr	r3, [pc, #552]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 80032c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e9      	bne.n	80032a0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8097 	beq.w	8003408 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032de:	4b83      	ldr	r3, [pc, #524]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10f      	bne.n	800330a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	4b7f      	ldr	r3, [pc, #508]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	4a7e      	ldr	r2, [pc, #504]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 80032f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f8:	6413      	str	r3, [r2, #64]	; 0x40
 80032fa:	4b7c      	ldr	r3, [pc, #496]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003306:	2301      	movs	r3, #1
 8003308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	4b79      	ldr	r3, [pc, #484]	; (80034f0 <HAL_RCC_OscConfig+0x4ac>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d118      	bne.n	8003348 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003316:	4b76      	ldr	r3, [pc, #472]	; (80034f0 <HAL_RCC_OscConfig+0x4ac>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a75      	ldr	r2, [pc, #468]	; (80034f0 <HAL_RCC_OscConfig+0x4ac>)
 800331c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003322:	f7fe fbbf 	bl	8001aa4 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332a:	f7fe fbbb 	bl	8001aa4 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e0d3      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	4b6c      	ldr	r3, [pc, #432]	; (80034f0 <HAL_RCC_OscConfig+0x4ac>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d106      	bne.n	800335e <HAL_RCC_OscConfig+0x31a>
 8003350:	4b66      	ldr	r3, [pc, #408]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a65      	ldr	r2, [pc, #404]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
 800335c:	e01c      	b.n	8003398 <HAL_RCC_OscConfig+0x354>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b05      	cmp	r3, #5
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0x33c>
 8003366:	4b61      	ldr	r3, [pc, #388]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a60      	ldr	r2, [pc, #384]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 800336c:	f043 0304 	orr.w	r3, r3, #4
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
 8003372:	4b5e      	ldr	r3, [pc, #376]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a5d      	ldr	r2, [pc, #372]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
 800337e:	e00b      	b.n	8003398 <HAL_RCC_OscConfig+0x354>
 8003380:	4b5a      	ldr	r3, [pc, #360]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a59      	ldr	r2, [pc, #356]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 8003386:	f023 0301 	bic.w	r3, r3, #1
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	4b57      	ldr	r3, [pc, #348]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a56      	ldr	r2, [pc, #344]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 8003392:	f023 0304 	bic.w	r3, r3, #4
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d015      	beq.n	80033cc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fe fb80 	bl	8001aa4 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a6:	e00a      	b.n	80033be <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a8:	f7fe fb7c 	bl	8001aa4 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e092      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033be:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0ee      	beq.n	80033a8 <HAL_RCC_OscConfig+0x364>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fe fb6a 	bl	8001aa4 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fe fb66 	bl	8001aa4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e07c      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ea:	4b40      	ldr	r3, [pc, #256]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1ee      	bne.n	80033d4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d105      	bne.n	8003408 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fc:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	4a3a      	ldr	r2, [pc, #232]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 8003402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003406:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d068      	beq.n	80034e2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003410:	4b36      	ldr	r3, [pc, #216]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b08      	cmp	r3, #8
 800341a:	d060      	beq.n	80034de <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d145      	bne.n	80034b0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003424:	4b33      	ldr	r3, [pc, #204]	; (80034f4 <HAL_RCC_OscConfig+0x4b0>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe fb3b 	bl	8001aa4 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003432:	f7fe fb37 	bl	8001aa4 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e04f      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003444:	4b29      	ldr	r3, [pc, #164]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	019b      	lsls	r3, r3, #6
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	3b01      	subs	r3, #1
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	061b      	lsls	r3, r3, #24
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	071b      	lsls	r3, r3, #28
 800347c:	491b      	ldr	r1, [pc, #108]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003482:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <HAL_RCC_OscConfig+0x4b0>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fb0c 	bl	8001aa4 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe fb08 	bl	8001aa4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e020      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x44c>
 80034ae:	e018      	b.n	80034e2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b0:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <HAL_RCC_OscConfig+0x4b0>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b6:	f7fe faf5 	bl	8001aa4 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034be:	f7fe faf1 	bl	8001aa4 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e009      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_RCC_OscConfig+0x4a8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f0      	bne.n	80034be <HAL_RCC_OscConfig+0x47a>
 80034dc:	e001      	b.n	80034e2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40007000 	.word	0x40007000
 80034f4:	42470060 	.word	0x42470060

080034f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e01d      	b.n	8003546 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe f8fc 	bl	800171c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 fa1e 	bl	8003978 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d841      	bhi.n	80035e4 <HAL_TIM_OC_Start_IT+0x94>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <HAL_TIM_OC_Start_IT+0x18>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	0800359d 	.word	0x0800359d
 800356c:	080035e5 	.word	0x080035e5
 8003570:	080035e5 	.word	0x080035e5
 8003574:	080035e5 	.word	0x080035e5
 8003578:	080035af 	.word	0x080035af
 800357c:	080035e5 	.word	0x080035e5
 8003580:	080035e5 	.word	0x080035e5
 8003584:	080035e5 	.word	0x080035e5
 8003588:	080035c1 	.word	0x080035c1
 800358c:	080035e5 	.word	0x080035e5
 8003590:	080035e5 	.word	0x080035e5
 8003594:	080035e5 	.word	0x080035e5
 8003598:	080035d3 	.word	0x080035d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0202 	orr.w	r2, r2, #2
 80035aa:	60da      	str	r2, [r3, #12]
      break;
 80035ac:	e01b      	b.n	80035e6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0204 	orr.w	r2, r2, #4
 80035bc:	60da      	str	r2, [r3, #12]
      break;
 80035be:	e012      	b.n	80035e6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0208 	orr.w	r2, r2, #8
 80035ce:	60da      	str	r2, [r3, #12]
      break;
 80035d0:	e009      	b.n	80035e6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0210 	orr.w	r2, r2, #16
 80035e0:	60da      	str	r2, [r3, #12]
      break;
 80035e2:	e000      	b.n	80035e6 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80035e4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2201      	movs	r2, #1
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fc12 	bl	8003e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a15      	ldr	r2, [pc, #84]	; (8003650 <HAL_TIM_OC_Start_IT+0x100>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_TIM_OC_Start_IT+0xb8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a14      	ldr	r2, [pc, #80]	; (8003654 <HAL_TIM_OC_Start_IT+0x104>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <HAL_TIM_OC_Start_IT+0xbc>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_TIM_OC_Start_IT+0xbe>
 800360c:	2300      	movs	r3, #0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b06      	cmp	r3, #6
 8003632:	d007      	beq.n	8003644 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40010000 	.word	0x40010000
 8003654:	40010400 	.word	0x40010400

08003658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d122      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0202 	mvn.w	r2, #2
 8003684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f94e 	bl	800393c <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd ffaa 	bl	80015fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f951 	bl	8003950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d122      	bne.n	8003708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0204 	mvn.w	r2, #4
 80036d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f924 	bl	800393c <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd ff80 	bl	80015fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f927 	bl	8003950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b08      	cmp	r3, #8
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b08      	cmp	r3, #8
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0208 	mvn.w	r2, #8
 800372c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2204      	movs	r2, #4
 8003732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f8fa 	bl	800393c <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd ff56 	bl	80015fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8fd 	bl	8003950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b10      	cmp	r3, #16
 8003768:	d122      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b10      	cmp	r3, #16
 8003776:	d11b      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0210 	mvn.w	r2, #16
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2208      	movs	r2, #8
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f8d0 	bl	800393c <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd ff2c 	bl	80015fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8d3 	bl	8003950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d10e      	bne.n	80037dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d107      	bne.n	80037dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0201 	mvn.w	r2, #1
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f8a6 	bl	8003928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b80      	cmp	r3, #128	; 0x80
 80037e8:	d10e      	bne.n	8003808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	d107      	bne.n	8003808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fbb4 	bl	8003f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b40      	cmp	r3, #64	; 0x40
 8003814:	d10e      	bne.n	8003834 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d107      	bne.n	8003834 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f898 	bl	8003964 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b20      	cmp	r3, #32
 8003840:	d10e      	bne.n	8003860 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b20      	cmp	r3, #32
 800384e:	d107      	bne.n	8003860 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0220 	mvn.w	r2, #32
 8003858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fb7e 	bl	8003f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_TIM_OC_ConfigChannel+0x1a>
 800387e:	2302      	movs	r3, #2
 8003880:	e04e      	b.n	8003920 <HAL_TIM_OC_ConfigChannel+0xb8>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d839      	bhi.n	800390c <HAL_TIM_OC_ConfigChannel+0xa4>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <HAL_TIM_OC_ConfigChannel+0x38>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038d5 	.word	0x080038d5
 80038a4:	0800390d 	.word	0x0800390d
 80038a8:	0800390d 	.word	0x0800390d
 80038ac:	0800390d 	.word	0x0800390d
 80038b0:	080038e3 	.word	0x080038e3
 80038b4:	0800390d 	.word	0x0800390d
 80038b8:	0800390d 	.word	0x0800390d
 80038bc:	0800390d 	.word	0x0800390d
 80038c0:	080038f1 	.word	0x080038f1
 80038c4:	0800390d 	.word	0x0800390d
 80038c8:	0800390d 	.word	0x0800390d
 80038cc:	0800390d 	.word	0x0800390d
 80038d0:	080038ff 	.word	0x080038ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f8ec 	bl	8003ab8 <TIM_OC1_SetConfig>
      break;
 80038e0:	e015      	b.n	800390e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f955 	bl	8003b98 <TIM_OC2_SetConfig>
      break;
 80038ee:	e00e      	b.n	800390e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f9c4 	bl	8003c84 <TIM_OC3_SetConfig>
      break;
 80038fc:	e007      	b.n	800390e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fa31 	bl	8003d6c <TIM_OC4_SetConfig>
      break;
 800390a:	e000      	b.n	800390e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800390c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <TIM_Base_SetConfig+0x114>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003996:	d00f      	beq.n	80039b8 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3d      	ldr	r2, [pc, #244]	; (8003a90 <TIM_Base_SetConfig+0x118>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00b      	beq.n	80039b8 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3c      	ldr	r2, [pc, #240]	; (8003a94 <TIM_Base_SetConfig+0x11c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d007      	beq.n	80039b8 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a3b      	ldr	r2, [pc, #236]	; (8003a98 <TIM_Base_SetConfig+0x120>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a3a      	ldr	r2, [pc, #232]	; (8003a9c <TIM_Base_SetConfig+0x124>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d108      	bne.n	80039ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <TIM_Base_SetConfig+0x114>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d02b      	beq.n	8003a2a <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d8:	d027      	beq.n	8003a2a <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2c      	ldr	r2, [pc, #176]	; (8003a90 <TIM_Base_SetConfig+0x118>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d023      	beq.n	8003a2a <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2b      	ldr	r2, [pc, #172]	; (8003a94 <TIM_Base_SetConfig+0x11c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01f      	beq.n	8003a2a <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <TIM_Base_SetConfig+0x120>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01b      	beq.n	8003a2a <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a29      	ldr	r2, [pc, #164]	; (8003a9c <TIM_Base_SetConfig+0x124>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d017      	beq.n	8003a2a <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a28      	ldr	r2, [pc, #160]	; (8003aa0 <TIM_Base_SetConfig+0x128>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <TIM_Base_SetConfig+0x12c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00f      	beq.n	8003a2a <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a26      	ldr	r2, [pc, #152]	; (8003aa8 <TIM_Base_SetConfig+0x130>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00b      	beq.n	8003a2a <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a25      	ldr	r2, [pc, #148]	; (8003aac <TIM_Base_SetConfig+0x134>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a24      	ldr	r2, [pc, #144]	; (8003ab0 <TIM_Base_SetConfig+0x138>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d003      	beq.n	8003a2a <TIM_Base_SetConfig+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <TIM_Base_SetConfig+0x13c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d108      	bne.n	8003a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <TIM_Base_SetConfig+0x114>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d003      	beq.n	8003a70 <TIM_Base_SetConfig+0xf8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a0c      	ldr	r2, [pc, #48]	; (8003a9c <TIM_Base_SetConfig+0x124>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d103      	bne.n	8003a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	615a      	str	r2, [r3, #20]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40010400 	.word	0x40010400
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40014400 	.word	0x40014400
 8003aa8:	40014800 	.word	0x40014800
 8003aac:	40001800 	.word	0x40001800
 8003ab0:	40001c00 	.word	0x40001c00
 8003ab4:	40002000 	.word	0x40002000

08003ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f023 0201 	bic.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0303 	bic.w	r3, r3, #3
 8003aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 0302 	bic.w	r3, r3, #2
 8003b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <TIM_OC1_SetConfig+0xd8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_OC1_SetConfig+0x64>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <TIM_OC1_SetConfig+0xdc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d10c      	bne.n	8003b36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 0308 	bic.w	r3, r3, #8
 8003b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f023 0304 	bic.w	r3, r3, #4
 8003b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <TIM_OC1_SetConfig+0xd8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <TIM_OC1_SetConfig+0x8e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <TIM_OC1_SetConfig+0xdc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d111      	bne.n	8003b6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40010400 	.word	0x40010400

08003b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f023 0210 	bic.w	r2, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0320 	bic.w	r3, r3, #32
 8003be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <TIM_OC2_SetConfig+0xe4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_OC2_SetConfig+0x68>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <TIM_OC2_SetConfig+0xe8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10d      	bne.n	8003c1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <TIM_OC2_SetConfig+0xe4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_OC2_SetConfig+0x94>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <TIM_OC2_SetConfig+0xe8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d113      	bne.n	8003c54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40010400 	.word	0x40010400

08003c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a21      	ldr	r2, [pc, #132]	; (8003d64 <TIM_OC3_SetConfig+0xe0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d003      	beq.n	8003cea <TIM_OC3_SetConfig+0x66>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a20      	ldr	r2, [pc, #128]	; (8003d68 <TIM_OC3_SetConfig+0xe4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d10d      	bne.n	8003d06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a16      	ldr	r2, [pc, #88]	; (8003d64 <TIM_OC3_SetConfig+0xe0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_OC3_SetConfig+0x92>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a15      	ldr	r2, [pc, #84]	; (8003d68 <TIM_OC3_SetConfig+0xe4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d113      	bne.n	8003d3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40010400 	.word	0x40010400

08003d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	031b      	lsls	r3, r3, #12
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a12      	ldr	r2, [pc, #72]	; (8003e10 <TIM_OC4_SetConfig+0xa4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_OC4_SetConfig+0x68>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a11      	ldr	r2, [pc, #68]	; (8003e14 <TIM_OC4_SetConfig+0xa8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d109      	bne.n	8003de8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	019b      	lsls	r3, r3, #6
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40010400 	.word	0x40010400

08003e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	431a      	orrs	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	621a      	str	r2, [r3, #32]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e05a      	b.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a21      	ldr	r2, [pc, #132]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d022      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d01d      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d018      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00e      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10c      	bne.n	8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40001800 	.word	0x40001800

08003f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e03f      	b.n	8004016 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fc14 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	; 0x24
 8003fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f90b 	bl	80041e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b088      	sub	sp, #32
 8004022:	af02      	add	r7, sp, #8
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	f040 8083 	bne.w	8004146 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_UART_Transmit+0x2e>
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e07b      	b.n	8004148 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_UART_Transmit+0x40>
 800405a:	2302      	movs	r3, #2
 800405c:	e074      	b.n	8004148 <HAL_UART_Transmit+0x12a>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2221      	movs	r2, #33	; 0x21
 8004070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004074:	f7fd fd16 	bl	8001aa4 <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800408e:	e042      	b.n	8004116 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	d122      	bne.n	80040ee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2200      	movs	r2, #0
 80040b0:	2180      	movs	r1, #128	; 0x80
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f84c 	bl	8004150 <UART_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e042      	b.n	8004148 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3302      	adds	r3, #2
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	e017      	b.n	8004116 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	3301      	adds	r3, #1
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	e013      	b.n	8004116 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2180      	movs	r1, #128	; 0x80
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f829 	bl	8004150 <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e01f      	b.n	8004148 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	60ba      	str	r2, [r7, #8]
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1b7      	bne.n	8004090 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2200      	movs	r2, #0
 8004128:	2140      	movs	r1, #64	; 0x40
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f810 	bl	8004150 <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e006      	b.n	8004148 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004160:	e02c      	b.n	80041bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d028      	beq.n	80041bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <UART_WaitOnFlagUntilTimeout+0x30>
 8004170:	f7fd fc98 	bl	8001aa4 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	429a      	cmp	r2, r3
 800417e:	d21d      	bcs.n	80041bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800418e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0201 	bic.w	r2, r2, #1
 800419e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e00f      	b.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d0c3      	beq.n	8004162 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004226:	f023 030c 	bic.w	r3, r3, #12
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	68f9      	ldr	r1, [r7, #12]
 8004230:	430b      	orrs	r3, r1
 8004232:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004252:	f040 818b 	bne.w	800456c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4ac1      	ldr	r2, [pc, #772]	; (8004560 <UART_SetConfig+0x37c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d005      	beq.n	800426c <UART_SetConfig+0x88>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4abf      	ldr	r2, [pc, #764]	; (8004564 <UART_SetConfig+0x380>)
 8004266:	4293      	cmp	r3, r2
 8004268:	f040 80bd 	bne.w	80043e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800426c:	f7fe fd36 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8004270:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	461d      	mov	r5, r3
 8004276:	f04f 0600 	mov.w	r6, #0
 800427a:	46a8      	mov	r8, r5
 800427c:	46b1      	mov	r9, r6
 800427e:	eb18 0308 	adds.w	r3, r8, r8
 8004282:	eb49 0409 	adc.w	r4, r9, r9
 8004286:	4698      	mov	r8, r3
 8004288:	46a1      	mov	r9, r4
 800428a:	eb18 0805 	adds.w	r8, r8, r5
 800428e:	eb49 0906 	adc.w	r9, r9, r6
 8004292:	f04f 0100 	mov.w	r1, #0
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800429e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042a6:	4688      	mov	r8, r1
 80042a8:	4691      	mov	r9, r2
 80042aa:	eb18 0005 	adds.w	r0, r8, r5
 80042ae:	eb49 0106 	adc.w	r1, r9, r6
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	461d      	mov	r5, r3
 80042b8:	f04f 0600 	mov.w	r6, #0
 80042bc:	196b      	adds	r3, r5, r5
 80042be:	eb46 0406 	adc.w	r4, r6, r6
 80042c2:	461a      	mov	r2, r3
 80042c4:	4623      	mov	r3, r4
 80042c6:	f7fc fc3b 	bl	8000b40 <__aeabi_uldivmod>
 80042ca:	4603      	mov	r3, r0
 80042cc:	460c      	mov	r4, r1
 80042ce:	461a      	mov	r2, r3
 80042d0:	4ba5      	ldr	r3, [pc, #660]	; (8004568 <UART_SetConfig+0x384>)
 80042d2:	fba3 2302 	umull	r2, r3, r3, r2
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	461d      	mov	r5, r3
 80042e0:	f04f 0600 	mov.w	r6, #0
 80042e4:	46a9      	mov	r9, r5
 80042e6:	46b2      	mov	sl, r6
 80042e8:	eb19 0309 	adds.w	r3, r9, r9
 80042ec:	eb4a 040a 	adc.w	r4, sl, sl
 80042f0:	4699      	mov	r9, r3
 80042f2:	46a2      	mov	sl, r4
 80042f4:	eb19 0905 	adds.w	r9, r9, r5
 80042f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80042fc:	f04f 0100 	mov.w	r1, #0
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004308:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800430c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004310:	4689      	mov	r9, r1
 8004312:	4692      	mov	sl, r2
 8004314:	eb19 0005 	adds.w	r0, r9, r5
 8004318:	eb4a 0106 	adc.w	r1, sl, r6
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	461d      	mov	r5, r3
 8004322:	f04f 0600 	mov.w	r6, #0
 8004326:	196b      	adds	r3, r5, r5
 8004328:	eb46 0406 	adc.w	r4, r6, r6
 800432c:	461a      	mov	r2, r3
 800432e:	4623      	mov	r3, r4
 8004330:	f7fc fc06 	bl	8000b40 <__aeabi_uldivmod>
 8004334:	4603      	mov	r3, r0
 8004336:	460c      	mov	r4, r1
 8004338:	461a      	mov	r2, r3
 800433a:	4b8b      	ldr	r3, [pc, #556]	; (8004568 <UART_SetConfig+0x384>)
 800433c:	fba3 1302 	umull	r1, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2164      	movs	r1, #100	; 0x64
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	3332      	adds	r3, #50	; 0x32
 800434e:	4a86      	ldr	r2, [pc, #536]	; (8004568 <UART_SetConfig+0x384>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800435c:	4498      	add	r8, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	461d      	mov	r5, r3
 8004362:	f04f 0600 	mov.w	r6, #0
 8004366:	46a9      	mov	r9, r5
 8004368:	46b2      	mov	sl, r6
 800436a:	eb19 0309 	adds.w	r3, r9, r9
 800436e:	eb4a 040a 	adc.w	r4, sl, sl
 8004372:	4699      	mov	r9, r3
 8004374:	46a2      	mov	sl, r4
 8004376:	eb19 0905 	adds.w	r9, r9, r5
 800437a:	eb4a 0a06 	adc.w	sl, sl, r6
 800437e:	f04f 0100 	mov.w	r1, #0
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800438a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800438e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004392:	4689      	mov	r9, r1
 8004394:	4692      	mov	sl, r2
 8004396:	eb19 0005 	adds.w	r0, r9, r5
 800439a:	eb4a 0106 	adc.w	r1, sl, r6
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	461d      	mov	r5, r3
 80043a4:	f04f 0600 	mov.w	r6, #0
 80043a8:	196b      	adds	r3, r5, r5
 80043aa:	eb46 0406 	adc.w	r4, r6, r6
 80043ae:	461a      	mov	r2, r3
 80043b0:	4623      	mov	r3, r4
 80043b2:	f7fc fbc5 	bl	8000b40 <__aeabi_uldivmod>
 80043b6:	4603      	mov	r3, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	461a      	mov	r2, r3
 80043bc:	4b6a      	ldr	r3, [pc, #424]	; (8004568 <UART_SetConfig+0x384>)
 80043be:	fba3 1302 	umull	r1, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2164      	movs	r1, #100	; 0x64
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a65      	ldr	r2, [pc, #404]	; (8004568 <UART_SetConfig+0x384>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 0207 	and.w	r2, r3, #7
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4442      	add	r2, r8
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	e26f      	b.n	80048c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043e6:	f7fe fc65 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 80043ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	461d      	mov	r5, r3
 80043f0:	f04f 0600 	mov.w	r6, #0
 80043f4:	46a8      	mov	r8, r5
 80043f6:	46b1      	mov	r9, r6
 80043f8:	eb18 0308 	adds.w	r3, r8, r8
 80043fc:	eb49 0409 	adc.w	r4, r9, r9
 8004400:	4698      	mov	r8, r3
 8004402:	46a1      	mov	r9, r4
 8004404:	eb18 0805 	adds.w	r8, r8, r5
 8004408:	eb49 0906 	adc.w	r9, r9, r6
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004418:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800441c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004420:	4688      	mov	r8, r1
 8004422:	4691      	mov	r9, r2
 8004424:	eb18 0005 	adds.w	r0, r8, r5
 8004428:	eb49 0106 	adc.w	r1, r9, r6
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	461d      	mov	r5, r3
 8004432:	f04f 0600 	mov.w	r6, #0
 8004436:	196b      	adds	r3, r5, r5
 8004438:	eb46 0406 	adc.w	r4, r6, r6
 800443c:	461a      	mov	r2, r3
 800443e:	4623      	mov	r3, r4
 8004440:	f7fc fb7e 	bl	8000b40 <__aeabi_uldivmod>
 8004444:	4603      	mov	r3, r0
 8004446:	460c      	mov	r4, r1
 8004448:	461a      	mov	r2, r3
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <UART_SetConfig+0x384>)
 800444c:	fba3 2302 	umull	r2, r3, r3, r2
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	461d      	mov	r5, r3
 800445a:	f04f 0600 	mov.w	r6, #0
 800445e:	46a9      	mov	r9, r5
 8004460:	46b2      	mov	sl, r6
 8004462:	eb19 0309 	adds.w	r3, r9, r9
 8004466:	eb4a 040a 	adc.w	r4, sl, sl
 800446a:	4699      	mov	r9, r3
 800446c:	46a2      	mov	sl, r4
 800446e:	eb19 0905 	adds.w	r9, r9, r5
 8004472:	eb4a 0a06 	adc.w	sl, sl, r6
 8004476:	f04f 0100 	mov.w	r1, #0
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004482:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004486:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800448a:	4689      	mov	r9, r1
 800448c:	4692      	mov	sl, r2
 800448e:	eb19 0005 	adds.w	r0, r9, r5
 8004492:	eb4a 0106 	adc.w	r1, sl, r6
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	461d      	mov	r5, r3
 800449c:	f04f 0600 	mov.w	r6, #0
 80044a0:	196b      	adds	r3, r5, r5
 80044a2:	eb46 0406 	adc.w	r4, r6, r6
 80044a6:	461a      	mov	r2, r3
 80044a8:	4623      	mov	r3, r4
 80044aa:	f7fc fb49 	bl	8000b40 <__aeabi_uldivmod>
 80044ae:	4603      	mov	r3, r0
 80044b0:	460c      	mov	r4, r1
 80044b2:	461a      	mov	r2, r3
 80044b4:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <UART_SetConfig+0x384>)
 80044b6:	fba3 1302 	umull	r1, r3, r3, r2
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	2164      	movs	r1, #100	; 0x64
 80044be:	fb01 f303 	mul.w	r3, r1, r3
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	3332      	adds	r3, #50	; 0x32
 80044c8:	4a27      	ldr	r2, [pc, #156]	; (8004568 <UART_SetConfig+0x384>)
 80044ca:	fba2 2303 	umull	r2, r3, r2, r3
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044d6:	4498      	add	r8, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	461d      	mov	r5, r3
 80044dc:	f04f 0600 	mov.w	r6, #0
 80044e0:	46a9      	mov	r9, r5
 80044e2:	46b2      	mov	sl, r6
 80044e4:	eb19 0309 	adds.w	r3, r9, r9
 80044e8:	eb4a 040a 	adc.w	r4, sl, sl
 80044ec:	4699      	mov	r9, r3
 80044ee:	46a2      	mov	sl, r4
 80044f0:	eb19 0905 	adds.w	r9, r9, r5
 80044f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80044f8:	f04f 0100 	mov.w	r1, #0
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004504:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004508:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800450c:	4689      	mov	r9, r1
 800450e:	4692      	mov	sl, r2
 8004510:	eb19 0005 	adds.w	r0, r9, r5
 8004514:	eb4a 0106 	adc.w	r1, sl, r6
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	461d      	mov	r5, r3
 800451e:	f04f 0600 	mov.w	r6, #0
 8004522:	196b      	adds	r3, r5, r5
 8004524:	eb46 0406 	adc.w	r4, r6, r6
 8004528:	461a      	mov	r2, r3
 800452a:	4623      	mov	r3, r4
 800452c:	f7fc fb08 	bl	8000b40 <__aeabi_uldivmod>
 8004530:	4603      	mov	r3, r0
 8004532:	460c      	mov	r4, r1
 8004534:	461a      	mov	r2, r3
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <UART_SetConfig+0x384>)
 8004538:	fba3 1302 	umull	r1, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	2164      	movs	r1, #100	; 0x64
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	3332      	adds	r3, #50	; 0x32
 800454a:	4a07      	ldr	r2, [pc, #28]	; (8004568 <UART_SetConfig+0x384>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	f003 0207 	and.w	r2, r3, #7
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4442      	add	r2, r8
 800455c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800455e:	e1b2      	b.n	80048c6 <UART_SetConfig+0x6e2>
 8004560:	40011000 	.word	0x40011000
 8004564:	40011400 	.word	0x40011400
 8004568:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4ad7      	ldr	r2, [pc, #860]	; (80048d0 <UART_SetConfig+0x6ec>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d005      	beq.n	8004582 <UART_SetConfig+0x39e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4ad6      	ldr	r2, [pc, #856]	; (80048d4 <UART_SetConfig+0x6f0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	f040 80d1 	bne.w	8004724 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004582:	f7fe fbab 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8004586:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	469a      	mov	sl, r3
 800458c:	f04f 0b00 	mov.w	fp, #0
 8004590:	46d0      	mov	r8, sl
 8004592:	46d9      	mov	r9, fp
 8004594:	eb18 0308 	adds.w	r3, r8, r8
 8004598:	eb49 0409 	adc.w	r4, r9, r9
 800459c:	4698      	mov	r8, r3
 800459e:	46a1      	mov	r9, r4
 80045a0:	eb18 080a 	adds.w	r8, r8, sl
 80045a4:	eb49 090b 	adc.w	r9, r9, fp
 80045a8:	f04f 0100 	mov.w	r1, #0
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045bc:	4688      	mov	r8, r1
 80045be:	4691      	mov	r9, r2
 80045c0:	eb1a 0508 	adds.w	r5, sl, r8
 80045c4:	eb4b 0609 	adc.w	r6, fp, r9
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4619      	mov	r1, r3
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	f04f 0400 	mov.w	r4, #0
 80045da:	0094      	lsls	r4, r2, #2
 80045dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045e0:	008b      	lsls	r3, r1, #2
 80045e2:	461a      	mov	r2, r3
 80045e4:	4623      	mov	r3, r4
 80045e6:	4628      	mov	r0, r5
 80045e8:	4631      	mov	r1, r6
 80045ea:	f7fc faa9 	bl	8000b40 <__aeabi_uldivmod>
 80045ee:	4603      	mov	r3, r0
 80045f0:	460c      	mov	r4, r1
 80045f2:	461a      	mov	r2, r3
 80045f4:	4bb8      	ldr	r3, [pc, #736]	; (80048d8 <UART_SetConfig+0x6f4>)
 80045f6:	fba3 2302 	umull	r2, r3, r3, r2
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	469b      	mov	fp, r3
 8004604:	f04f 0c00 	mov.w	ip, #0
 8004608:	46d9      	mov	r9, fp
 800460a:	46e2      	mov	sl, ip
 800460c:	eb19 0309 	adds.w	r3, r9, r9
 8004610:	eb4a 040a 	adc.w	r4, sl, sl
 8004614:	4699      	mov	r9, r3
 8004616:	46a2      	mov	sl, r4
 8004618:	eb19 090b 	adds.w	r9, r9, fp
 800461c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004620:	f04f 0100 	mov.w	r1, #0
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800462c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004630:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004634:	4689      	mov	r9, r1
 8004636:	4692      	mov	sl, r2
 8004638:	eb1b 0509 	adds.w	r5, fp, r9
 800463c:	eb4c 060a 	adc.w	r6, ip, sl
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4619      	mov	r1, r3
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	f04f 0400 	mov.w	r4, #0
 8004652:	0094      	lsls	r4, r2, #2
 8004654:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004658:	008b      	lsls	r3, r1, #2
 800465a:	461a      	mov	r2, r3
 800465c:	4623      	mov	r3, r4
 800465e:	4628      	mov	r0, r5
 8004660:	4631      	mov	r1, r6
 8004662:	f7fc fa6d 	bl	8000b40 <__aeabi_uldivmod>
 8004666:	4603      	mov	r3, r0
 8004668:	460c      	mov	r4, r1
 800466a:	461a      	mov	r2, r3
 800466c:	4b9a      	ldr	r3, [pc, #616]	; (80048d8 <UART_SetConfig+0x6f4>)
 800466e:	fba3 1302 	umull	r1, r3, r3, r2
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	2164      	movs	r1, #100	; 0x64
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	3332      	adds	r3, #50	; 0x32
 8004680:	4a95      	ldr	r2, [pc, #596]	; (80048d8 <UART_SetConfig+0x6f4>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468c:	4498      	add	r8, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	469b      	mov	fp, r3
 8004692:	f04f 0c00 	mov.w	ip, #0
 8004696:	46d9      	mov	r9, fp
 8004698:	46e2      	mov	sl, ip
 800469a:	eb19 0309 	adds.w	r3, r9, r9
 800469e:	eb4a 040a 	adc.w	r4, sl, sl
 80046a2:	4699      	mov	r9, r3
 80046a4:	46a2      	mov	sl, r4
 80046a6:	eb19 090b 	adds.w	r9, r9, fp
 80046aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046ae:	f04f 0100 	mov.w	r1, #0
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046c2:	4689      	mov	r9, r1
 80046c4:	4692      	mov	sl, r2
 80046c6:	eb1b 0509 	adds.w	r5, fp, r9
 80046ca:	eb4c 060a 	adc.w	r6, ip, sl
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4619      	mov	r1, r3
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	f04f 0400 	mov.w	r4, #0
 80046e0:	0094      	lsls	r4, r2, #2
 80046e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046e6:	008b      	lsls	r3, r1, #2
 80046e8:	461a      	mov	r2, r3
 80046ea:	4623      	mov	r3, r4
 80046ec:	4628      	mov	r0, r5
 80046ee:	4631      	mov	r1, r6
 80046f0:	f7fc fa26 	bl	8000b40 <__aeabi_uldivmod>
 80046f4:	4603      	mov	r3, r0
 80046f6:	460c      	mov	r4, r1
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b77      	ldr	r3, [pc, #476]	; (80048d8 <UART_SetConfig+0x6f4>)
 80046fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	2164      	movs	r1, #100	; 0x64
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	3332      	adds	r3, #50	; 0x32
 800470e:	4a72      	ldr	r2, [pc, #456]	; (80048d8 <UART_SetConfig+0x6f4>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	f003 020f 	and.w	r2, r3, #15
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4442      	add	r2, r8
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	e0d0      	b.n	80048c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004724:	f7fe fac6 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004728:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	469a      	mov	sl, r3
 800472e:	f04f 0b00 	mov.w	fp, #0
 8004732:	46d0      	mov	r8, sl
 8004734:	46d9      	mov	r9, fp
 8004736:	eb18 0308 	adds.w	r3, r8, r8
 800473a:	eb49 0409 	adc.w	r4, r9, r9
 800473e:	4698      	mov	r8, r3
 8004740:	46a1      	mov	r9, r4
 8004742:	eb18 080a 	adds.w	r8, r8, sl
 8004746:	eb49 090b 	adc.w	r9, r9, fp
 800474a:	f04f 0100 	mov.w	r1, #0
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004756:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800475a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800475e:	4688      	mov	r8, r1
 8004760:	4691      	mov	r9, r2
 8004762:	eb1a 0508 	adds.w	r5, sl, r8
 8004766:	eb4b 0609 	adc.w	r6, fp, r9
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	4619      	mov	r1, r3
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	f04f 0400 	mov.w	r4, #0
 800477c:	0094      	lsls	r4, r2, #2
 800477e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004782:	008b      	lsls	r3, r1, #2
 8004784:	461a      	mov	r2, r3
 8004786:	4623      	mov	r3, r4
 8004788:	4628      	mov	r0, r5
 800478a:	4631      	mov	r1, r6
 800478c:	f7fc f9d8 	bl	8000b40 <__aeabi_uldivmod>
 8004790:	4603      	mov	r3, r0
 8004792:	460c      	mov	r4, r1
 8004794:	461a      	mov	r2, r3
 8004796:	4b50      	ldr	r3, [pc, #320]	; (80048d8 <UART_SetConfig+0x6f4>)
 8004798:	fba3 2302 	umull	r2, r3, r3, r2
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	469b      	mov	fp, r3
 80047a6:	f04f 0c00 	mov.w	ip, #0
 80047aa:	46d9      	mov	r9, fp
 80047ac:	46e2      	mov	sl, ip
 80047ae:	eb19 0309 	adds.w	r3, r9, r9
 80047b2:	eb4a 040a 	adc.w	r4, sl, sl
 80047b6:	4699      	mov	r9, r3
 80047b8:	46a2      	mov	sl, r4
 80047ba:	eb19 090b 	adds.w	r9, r9, fp
 80047be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047d6:	4689      	mov	r9, r1
 80047d8:	4692      	mov	sl, r2
 80047da:	eb1b 0509 	adds.w	r5, fp, r9
 80047de:	eb4c 060a 	adc.w	r6, ip, sl
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4619      	mov	r1, r3
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	f04f 0400 	mov.w	r4, #0
 80047f4:	0094      	lsls	r4, r2, #2
 80047f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047fa:	008b      	lsls	r3, r1, #2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4623      	mov	r3, r4
 8004800:	4628      	mov	r0, r5
 8004802:	4631      	mov	r1, r6
 8004804:	f7fc f99c 	bl	8000b40 <__aeabi_uldivmod>
 8004808:	4603      	mov	r3, r0
 800480a:	460c      	mov	r4, r1
 800480c:	461a      	mov	r2, r3
 800480e:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <UART_SetConfig+0x6f4>)
 8004810:	fba3 1302 	umull	r1, r3, r3, r2
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	2164      	movs	r1, #100	; 0x64
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	3332      	adds	r3, #50	; 0x32
 8004822:	4a2d      	ldr	r2, [pc, #180]	; (80048d8 <UART_SetConfig+0x6f4>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800482e:	4498      	add	r8, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	469b      	mov	fp, r3
 8004834:	f04f 0c00 	mov.w	ip, #0
 8004838:	46d9      	mov	r9, fp
 800483a:	46e2      	mov	sl, ip
 800483c:	eb19 0309 	adds.w	r3, r9, r9
 8004840:	eb4a 040a 	adc.w	r4, sl, sl
 8004844:	4699      	mov	r9, r3
 8004846:	46a2      	mov	sl, r4
 8004848:	eb19 090b 	adds.w	r9, r9, fp
 800484c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004850:	f04f 0100 	mov.w	r1, #0
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800485c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004860:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004864:	4689      	mov	r9, r1
 8004866:	4692      	mov	sl, r2
 8004868:	eb1b 0509 	adds.w	r5, fp, r9
 800486c:	eb4c 060a 	adc.w	r6, ip, sl
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4619      	mov	r1, r3
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	f04f 0400 	mov.w	r4, #0
 8004882:	0094      	lsls	r4, r2, #2
 8004884:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004888:	008b      	lsls	r3, r1, #2
 800488a:	461a      	mov	r2, r3
 800488c:	4623      	mov	r3, r4
 800488e:	4628      	mov	r0, r5
 8004890:	4631      	mov	r1, r6
 8004892:	f7fc f955 	bl	8000b40 <__aeabi_uldivmod>
 8004896:	4603      	mov	r3, r0
 8004898:	460c      	mov	r4, r1
 800489a:	461a      	mov	r2, r3
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <UART_SetConfig+0x6f4>)
 800489e:	fba3 1302 	umull	r1, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	2164      	movs	r1, #100	; 0x64
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	3332      	adds	r3, #50	; 0x32
 80048b0:	4a09      	ldr	r2, [pc, #36]	; (80048d8 <UART_SetConfig+0x6f4>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	f003 020f 	and.w	r2, r3, #15
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4442      	add	r2, r8
 80048c2:	609a      	str	r2, [r3, #8]
}
 80048c4:	e7ff      	b.n	80048c6 <UART_SetConfig+0x6e2>
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d0:	40011000 	.word	0x40011000
 80048d4:	40011400 	.word	0x40011400
 80048d8:	51eb851f 	.word	0x51eb851f

080048dc <__errno>:
 80048dc:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <__errno+0x8>)
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	2000000c 	.word	0x2000000c

080048e8 <__libc_init_array>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	4e0d      	ldr	r6, [pc, #52]	; (8004920 <__libc_init_array+0x38>)
 80048ec:	4c0d      	ldr	r4, [pc, #52]	; (8004924 <__libc_init_array+0x3c>)
 80048ee:	1ba4      	subs	r4, r4, r6
 80048f0:	10a4      	asrs	r4, r4, #2
 80048f2:	2500      	movs	r5, #0
 80048f4:	42a5      	cmp	r5, r4
 80048f6:	d109      	bne.n	800490c <__libc_init_array+0x24>
 80048f8:	4e0b      	ldr	r6, [pc, #44]	; (8004928 <__libc_init_array+0x40>)
 80048fa:	4c0c      	ldr	r4, [pc, #48]	; (800492c <__libc_init_array+0x44>)
 80048fc:	f002 f874 	bl	80069e8 <_init>
 8004900:	1ba4      	subs	r4, r4, r6
 8004902:	10a4      	asrs	r4, r4, #2
 8004904:	2500      	movs	r5, #0
 8004906:	42a5      	cmp	r5, r4
 8004908:	d105      	bne.n	8004916 <__libc_init_array+0x2e>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004910:	4798      	blx	r3
 8004912:	3501      	adds	r5, #1
 8004914:	e7ee      	b.n	80048f4 <__libc_init_array+0xc>
 8004916:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800491a:	4798      	blx	r3
 800491c:	3501      	adds	r5, #1
 800491e:	e7f2      	b.n	8004906 <__libc_init_array+0x1e>
 8004920:	08006c5c 	.word	0x08006c5c
 8004924:	08006c5c 	.word	0x08006c5c
 8004928:	08006c5c 	.word	0x08006c5c
 800492c:	08006c60 	.word	0x08006c60

08004930 <memset>:
 8004930:	4402      	add	r2, r0
 8004932:	4603      	mov	r3, r0
 8004934:	4293      	cmp	r3, r2
 8004936:	d100      	bne.n	800493a <memset+0xa>
 8004938:	4770      	bx	lr
 800493a:	f803 1b01 	strb.w	r1, [r3], #1
 800493e:	e7f9      	b.n	8004934 <memset+0x4>

08004940 <__cvt>:
 8004940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004944:	ec55 4b10 	vmov	r4, r5, d0
 8004948:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800494a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800494e:	2d00      	cmp	r5, #0
 8004950:	460e      	mov	r6, r1
 8004952:	4691      	mov	r9, r2
 8004954:	4619      	mov	r1, r3
 8004956:	bfb8      	it	lt
 8004958:	4622      	movlt	r2, r4
 800495a:	462b      	mov	r3, r5
 800495c:	f027 0720 	bic.w	r7, r7, #32
 8004960:	bfbb      	ittet	lt
 8004962:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004966:	461d      	movlt	r5, r3
 8004968:	2300      	movge	r3, #0
 800496a:	232d      	movlt	r3, #45	; 0x2d
 800496c:	bfb8      	it	lt
 800496e:	4614      	movlt	r4, r2
 8004970:	2f46      	cmp	r7, #70	; 0x46
 8004972:	700b      	strb	r3, [r1, #0]
 8004974:	d004      	beq.n	8004980 <__cvt+0x40>
 8004976:	2f45      	cmp	r7, #69	; 0x45
 8004978:	d100      	bne.n	800497c <__cvt+0x3c>
 800497a:	3601      	adds	r6, #1
 800497c:	2102      	movs	r1, #2
 800497e:	e000      	b.n	8004982 <__cvt+0x42>
 8004980:	2103      	movs	r1, #3
 8004982:	ab03      	add	r3, sp, #12
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	ab02      	add	r3, sp, #8
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	4632      	mov	r2, r6
 800498c:	4653      	mov	r3, sl
 800498e:	ec45 4b10 	vmov	d0, r4, r5
 8004992:	f000 fbad 	bl	80050f0 <_dtoa_r>
 8004996:	2f47      	cmp	r7, #71	; 0x47
 8004998:	4680      	mov	r8, r0
 800499a:	d102      	bne.n	80049a2 <__cvt+0x62>
 800499c:	f019 0f01 	tst.w	r9, #1
 80049a0:	d026      	beq.n	80049f0 <__cvt+0xb0>
 80049a2:	2f46      	cmp	r7, #70	; 0x46
 80049a4:	eb08 0906 	add.w	r9, r8, r6
 80049a8:	d111      	bne.n	80049ce <__cvt+0x8e>
 80049aa:	f898 3000 	ldrb.w	r3, [r8]
 80049ae:	2b30      	cmp	r3, #48	; 0x30
 80049b0:	d10a      	bne.n	80049c8 <__cvt+0x88>
 80049b2:	2200      	movs	r2, #0
 80049b4:	2300      	movs	r3, #0
 80049b6:	4620      	mov	r0, r4
 80049b8:	4629      	mov	r1, r5
 80049ba:	f7fc f851 	bl	8000a60 <__aeabi_dcmpeq>
 80049be:	b918      	cbnz	r0, 80049c8 <__cvt+0x88>
 80049c0:	f1c6 0601 	rsb	r6, r6, #1
 80049c4:	f8ca 6000 	str.w	r6, [sl]
 80049c8:	f8da 3000 	ldr.w	r3, [sl]
 80049cc:	4499      	add	r9, r3
 80049ce:	2200      	movs	r2, #0
 80049d0:	2300      	movs	r3, #0
 80049d2:	4620      	mov	r0, r4
 80049d4:	4629      	mov	r1, r5
 80049d6:	f7fc f843 	bl	8000a60 <__aeabi_dcmpeq>
 80049da:	b938      	cbnz	r0, 80049ec <__cvt+0xac>
 80049dc:	2230      	movs	r2, #48	; 0x30
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	454b      	cmp	r3, r9
 80049e2:	d205      	bcs.n	80049f0 <__cvt+0xb0>
 80049e4:	1c59      	adds	r1, r3, #1
 80049e6:	9103      	str	r1, [sp, #12]
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e7f8      	b.n	80049de <__cvt+0x9e>
 80049ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80049f0:	9b03      	ldr	r3, [sp, #12]
 80049f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049f4:	eba3 0308 	sub.w	r3, r3, r8
 80049f8:	4640      	mov	r0, r8
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	b004      	add	sp, #16
 80049fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a02 <__exponent>:
 8004a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a04:	2900      	cmp	r1, #0
 8004a06:	4604      	mov	r4, r0
 8004a08:	bfba      	itte	lt
 8004a0a:	4249      	neglt	r1, r1
 8004a0c:	232d      	movlt	r3, #45	; 0x2d
 8004a0e:	232b      	movge	r3, #43	; 0x2b
 8004a10:	2909      	cmp	r1, #9
 8004a12:	f804 2b02 	strb.w	r2, [r4], #2
 8004a16:	7043      	strb	r3, [r0, #1]
 8004a18:	dd20      	ble.n	8004a5c <__exponent+0x5a>
 8004a1a:	f10d 0307 	add.w	r3, sp, #7
 8004a1e:	461f      	mov	r7, r3
 8004a20:	260a      	movs	r6, #10
 8004a22:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a26:	fb06 1115 	mls	r1, r6, r5, r1
 8004a2a:	3130      	adds	r1, #48	; 0x30
 8004a2c:	2d09      	cmp	r5, #9
 8004a2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a32:	f103 32ff 	add.w	r2, r3, #4294967295
 8004a36:	4629      	mov	r1, r5
 8004a38:	dc09      	bgt.n	8004a4e <__exponent+0x4c>
 8004a3a:	3130      	adds	r1, #48	; 0x30
 8004a3c:	3b02      	subs	r3, #2
 8004a3e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a42:	42bb      	cmp	r3, r7
 8004a44:	4622      	mov	r2, r4
 8004a46:	d304      	bcc.n	8004a52 <__exponent+0x50>
 8004a48:	1a10      	subs	r0, r2, r0
 8004a4a:	b003      	add	sp, #12
 8004a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a4e:	4613      	mov	r3, r2
 8004a50:	e7e7      	b.n	8004a22 <__exponent+0x20>
 8004a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a56:	f804 2b01 	strb.w	r2, [r4], #1
 8004a5a:	e7f2      	b.n	8004a42 <__exponent+0x40>
 8004a5c:	2330      	movs	r3, #48	; 0x30
 8004a5e:	4419      	add	r1, r3
 8004a60:	7083      	strb	r3, [r0, #2]
 8004a62:	1d02      	adds	r2, r0, #4
 8004a64:	70c1      	strb	r1, [r0, #3]
 8004a66:	e7ef      	b.n	8004a48 <__exponent+0x46>

08004a68 <_printf_float>:
 8004a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	b08d      	sub	sp, #52	; 0x34
 8004a6e:	460c      	mov	r4, r1
 8004a70:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004a74:	4616      	mov	r6, r2
 8004a76:	461f      	mov	r7, r3
 8004a78:	4605      	mov	r5, r0
 8004a7a:	f001 f8f1 	bl	8005c60 <_localeconv_r>
 8004a7e:	6803      	ldr	r3, [r0, #0]
 8004a80:	9304      	str	r3, [sp, #16]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fb fbc0 	bl	8000208 <strlen>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a90:	9005      	str	r0, [sp, #20]
 8004a92:	3307      	adds	r3, #7
 8004a94:	f023 0307 	bic.w	r3, r3, #7
 8004a98:	f103 0208 	add.w	r2, r3, #8
 8004a9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004aa0:	f8d4 b000 	ldr.w	fp, [r4]
 8004aa4:	f8c8 2000 	str.w	r2, [r8]
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ab0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004ab4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ab8:	9307      	str	r3, [sp, #28]
 8004aba:	f8cd 8018 	str.w	r8, [sp, #24]
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	4ba7      	ldr	r3, [pc, #668]	; (8004d60 <_printf_float+0x2f8>)
 8004ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ac8:	f7fb fffc 	bl	8000ac4 <__aeabi_dcmpun>
 8004acc:	bb70      	cbnz	r0, 8004b2c <_printf_float+0xc4>
 8004ace:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad2:	4ba3      	ldr	r3, [pc, #652]	; (8004d60 <_printf_float+0x2f8>)
 8004ad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ad8:	f7fb ffd6 	bl	8000a88 <__aeabi_dcmple>
 8004adc:	bb30      	cbnz	r0, 8004b2c <_printf_float+0xc4>
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	f7fb ffc5 	bl	8000a74 <__aeabi_dcmplt>
 8004aea:	b110      	cbz	r0, 8004af2 <_printf_float+0x8a>
 8004aec:	232d      	movs	r3, #45	; 0x2d
 8004aee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004af2:	4a9c      	ldr	r2, [pc, #624]	; (8004d64 <_printf_float+0x2fc>)
 8004af4:	4b9c      	ldr	r3, [pc, #624]	; (8004d68 <_printf_float+0x300>)
 8004af6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004afa:	bf8c      	ite	hi
 8004afc:	4690      	movhi	r8, r2
 8004afe:	4698      	movls	r8, r3
 8004b00:	2303      	movs	r3, #3
 8004b02:	f02b 0204 	bic.w	r2, fp, #4
 8004b06:	6123      	str	r3, [r4, #16]
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	f04f 0900 	mov.w	r9, #0
 8004b0e:	9700      	str	r7, [sp, #0]
 8004b10:	4633      	mov	r3, r6
 8004b12:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b14:	4621      	mov	r1, r4
 8004b16:	4628      	mov	r0, r5
 8004b18:	f000 f9e6 	bl	8004ee8 <_printf_common>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	f040 808d 	bne.w	8004c3c <_printf_float+0x1d4>
 8004b22:	f04f 30ff 	mov.w	r0, #4294967295
 8004b26:	b00d      	add	sp, #52	; 0x34
 8004b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	4640      	mov	r0, r8
 8004b32:	4649      	mov	r1, r9
 8004b34:	f7fb ffc6 	bl	8000ac4 <__aeabi_dcmpun>
 8004b38:	b110      	cbz	r0, 8004b40 <_printf_float+0xd8>
 8004b3a:	4a8c      	ldr	r2, [pc, #560]	; (8004d6c <_printf_float+0x304>)
 8004b3c:	4b8c      	ldr	r3, [pc, #560]	; (8004d70 <_printf_float+0x308>)
 8004b3e:	e7da      	b.n	8004af6 <_printf_float+0x8e>
 8004b40:	6861      	ldr	r1, [r4, #4]
 8004b42:	1c4b      	adds	r3, r1, #1
 8004b44:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004b48:	a80a      	add	r0, sp, #40	; 0x28
 8004b4a:	d13e      	bne.n	8004bca <_printf_float+0x162>
 8004b4c:	2306      	movs	r3, #6
 8004b4e:	6063      	str	r3, [r4, #4]
 8004b50:	2300      	movs	r3, #0
 8004b52:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004b56:	ab09      	add	r3, sp, #36	; 0x24
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	ec49 8b10 	vmov	d0, r8, r9
 8004b5e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b62:	6022      	str	r2, [r4, #0]
 8004b64:	f8cd a004 	str.w	sl, [sp, #4]
 8004b68:	6861      	ldr	r1, [r4, #4]
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f7ff fee8 	bl	8004940 <__cvt>
 8004b70:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004b74:	2b47      	cmp	r3, #71	; 0x47
 8004b76:	4680      	mov	r8, r0
 8004b78:	d109      	bne.n	8004b8e <_printf_float+0x126>
 8004b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7c:	1cd8      	adds	r0, r3, #3
 8004b7e:	db02      	blt.n	8004b86 <_printf_float+0x11e>
 8004b80:	6862      	ldr	r2, [r4, #4]
 8004b82:	4293      	cmp	r3, r2
 8004b84:	dd47      	ble.n	8004c16 <_printf_float+0x1ae>
 8004b86:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b8a:	fa5f fa8a 	uxtb.w	sl, sl
 8004b8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004b92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b94:	d824      	bhi.n	8004be0 <_printf_float+0x178>
 8004b96:	3901      	subs	r1, #1
 8004b98:	4652      	mov	r2, sl
 8004b9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b9e:	9109      	str	r1, [sp, #36]	; 0x24
 8004ba0:	f7ff ff2f 	bl	8004a02 <__exponent>
 8004ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ba6:	1813      	adds	r3, r2, r0
 8004ba8:	2a01      	cmp	r2, #1
 8004baa:	4681      	mov	r9, r0
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	dc02      	bgt.n	8004bb6 <_printf_float+0x14e>
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	07d1      	lsls	r1, r2, #31
 8004bb4:	d501      	bpl.n	8004bba <_printf_float+0x152>
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0a5      	beq.n	8004b0e <_printf_float+0xa6>
 8004bc2:	232d      	movs	r3, #45	; 0x2d
 8004bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc8:	e7a1      	b.n	8004b0e <_printf_float+0xa6>
 8004bca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004bce:	f000 8177 	beq.w	8004ec0 <_printf_float+0x458>
 8004bd2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004bd6:	d1bb      	bne.n	8004b50 <_printf_float+0xe8>
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	d1b9      	bne.n	8004b50 <_printf_float+0xe8>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e7b6      	b.n	8004b4e <_printf_float+0xe6>
 8004be0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004be4:	d119      	bne.n	8004c1a <_printf_float+0x1b2>
 8004be6:	2900      	cmp	r1, #0
 8004be8:	6863      	ldr	r3, [r4, #4]
 8004bea:	dd0c      	ble.n	8004c06 <_printf_float+0x19e>
 8004bec:	6121      	str	r1, [r4, #16]
 8004bee:	b913      	cbnz	r3, 8004bf6 <_printf_float+0x18e>
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	07d2      	lsls	r2, r2, #31
 8004bf4:	d502      	bpl.n	8004bfc <_printf_float+0x194>
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	440b      	add	r3, r1
 8004bfa:	6123      	str	r3, [r4, #16]
 8004bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bfe:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c00:	f04f 0900 	mov.w	r9, #0
 8004c04:	e7d9      	b.n	8004bba <_printf_float+0x152>
 8004c06:	b913      	cbnz	r3, 8004c0e <_printf_float+0x1a6>
 8004c08:	6822      	ldr	r2, [r4, #0]
 8004c0a:	07d0      	lsls	r0, r2, #31
 8004c0c:	d501      	bpl.n	8004c12 <_printf_float+0x1aa>
 8004c0e:	3302      	adds	r3, #2
 8004c10:	e7f3      	b.n	8004bfa <_printf_float+0x192>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e7f1      	b.n	8004bfa <_printf_float+0x192>
 8004c16:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004c1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	db05      	blt.n	8004c2e <_printf_float+0x1c6>
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	6123      	str	r3, [r4, #16]
 8004c26:	07d1      	lsls	r1, r2, #31
 8004c28:	d5e8      	bpl.n	8004bfc <_printf_float+0x194>
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	e7e5      	b.n	8004bfa <_printf_float+0x192>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bfd4      	ite	le
 8004c32:	f1c3 0302 	rsble	r3, r3, #2
 8004c36:	2301      	movgt	r3, #1
 8004c38:	4413      	add	r3, r2
 8004c3a:	e7de      	b.n	8004bfa <_printf_float+0x192>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	055a      	lsls	r2, r3, #21
 8004c40:	d407      	bmi.n	8004c52 <_printf_float+0x1ea>
 8004c42:	6923      	ldr	r3, [r4, #16]
 8004c44:	4642      	mov	r2, r8
 8004c46:	4631      	mov	r1, r6
 8004c48:	4628      	mov	r0, r5
 8004c4a:	47b8      	blx	r7
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d12b      	bne.n	8004ca8 <_printf_float+0x240>
 8004c50:	e767      	b.n	8004b22 <_printf_float+0xba>
 8004c52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004c56:	f240 80dc 	bls.w	8004e12 <_printf_float+0x3aa>
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c62:	f7fb fefd 	bl	8000a60 <__aeabi_dcmpeq>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d033      	beq.n	8004cd2 <_printf_float+0x26a>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4a41      	ldr	r2, [pc, #260]	; (8004d74 <_printf_float+0x30c>)
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	f43f af54 	beq.w	8004b22 <_printf_float+0xba>
 8004c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	db02      	blt.n	8004c88 <_printf_float+0x220>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	07d8      	lsls	r0, r3, #31
 8004c86:	d50f      	bpl.n	8004ca8 <_printf_float+0x240>
 8004c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b8      	blx	r7
 8004c92:	3001      	adds	r0, #1
 8004c94:	f43f af45 	beq.w	8004b22 <_printf_float+0xba>
 8004c98:	f04f 0800 	mov.w	r8, #0
 8004c9c:	f104 091a 	add.w	r9, r4, #26
 8004ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	4543      	cmp	r3, r8
 8004ca6:	dc09      	bgt.n	8004cbc <_printf_float+0x254>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	079b      	lsls	r3, r3, #30
 8004cac:	f100 8103 	bmi.w	8004eb6 <_printf_float+0x44e>
 8004cb0:	68e0      	ldr	r0, [r4, #12]
 8004cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cb4:	4298      	cmp	r0, r3
 8004cb6:	bfb8      	it	lt
 8004cb8:	4618      	movlt	r0, r3
 8004cba:	e734      	b.n	8004b26 <_printf_float+0xbe>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	464a      	mov	r2, r9
 8004cc0:	4631      	mov	r1, r6
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	47b8      	blx	r7
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	f43f af2b 	beq.w	8004b22 <_printf_float+0xba>
 8004ccc:	f108 0801 	add.w	r8, r8, #1
 8004cd0:	e7e6      	b.n	8004ca0 <_printf_float+0x238>
 8004cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	dc2b      	bgt.n	8004d30 <_printf_float+0x2c8>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4a26      	ldr	r2, [pc, #152]	; (8004d74 <_printf_float+0x30c>)
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f43f af1d 	beq.w	8004b22 <_printf_float+0xba>
 8004ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cea:	b923      	cbnz	r3, 8004cf6 <_printf_float+0x28e>
 8004cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cee:	b913      	cbnz	r3, 8004cf6 <_printf_float+0x28e>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	07d9      	lsls	r1, r3, #31
 8004cf4:	d5d8      	bpl.n	8004ca8 <_printf_float+0x240>
 8004cf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b8      	blx	r7
 8004d00:	3001      	adds	r0, #1
 8004d02:	f43f af0e 	beq.w	8004b22 <_printf_float+0xba>
 8004d06:	f04f 0900 	mov.w	r9, #0
 8004d0a:	f104 0a1a 	add.w	sl, r4, #26
 8004d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d10:	425b      	negs	r3, r3
 8004d12:	454b      	cmp	r3, r9
 8004d14:	dc01      	bgt.n	8004d1a <_printf_float+0x2b2>
 8004d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d18:	e794      	b.n	8004c44 <_printf_float+0x1dc>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4652      	mov	r2, sl
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	f43f aefc 	beq.w	8004b22 <_printf_float+0xba>
 8004d2a:	f109 0901 	add.w	r9, r9, #1
 8004d2e:	e7ee      	b.n	8004d0e <_printf_float+0x2a6>
 8004d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d34:	429a      	cmp	r2, r3
 8004d36:	bfa8      	it	ge
 8004d38:	461a      	movge	r2, r3
 8004d3a:	2a00      	cmp	r2, #0
 8004d3c:	4691      	mov	r9, r2
 8004d3e:	dd07      	ble.n	8004d50 <_printf_float+0x2e8>
 8004d40:	4613      	mov	r3, r2
 8004d42:	4631      	mov	r1, r6
 8004d44:	4642      	mov	r2, r8
 8004d46:	4628      	mov	r0, r5
 8004d48:	47b8      	blx	r7
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	f43f aee9 	beq.w	8004b22 <_printf_float+0xba>
 8004d50:	f104 031a 	add.w	r3, r4, #26
 8004d54:	f04f 0b00 	mov.w	fp, #0
 8004d58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d5c:	9306      	str	r3, [sp, #24]
 8004d5e:	e015      	b.n	8004d8c <_printf_float+0x324>
 8004d60:	7fefffff 	.word	0x7fefffff
 8004d64:	08006a2c 	.word	0x08006a2c
 8004d68:	08006a28 	.word	0x08006a28
 8004d6c:	08006a34 	.word	0x08006a34
 8004d70:	08006a30 	.word	0x08006a30
 8004d74:	08006a38 	.word	0x08006a38
 8004d78:	2301      	movs	r3, #1
 8004d7a:	9a06      	ldr	r2, [sp, #24]
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4628      	mov	r0, r5
 8004d80:	47b8      	blx	r7
 8004d82:	3001      	adds	r0, #1
 8004d84:	f43f aecd 	beq.w	8004b22 <_printf_float+0xba>
 8004d88:	f10b 0b01 	add.w	fp, fp, #1
 8004d8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d90:	ebaa 0309 	sub.w	r3, sl, r9
 8004d94:	455b      	cmp	r3, fp
 8004d96:	dcef      	bgt.n	8004d78 <_printf_float+0x310>
 8004d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	44d0      	add	r8, sl
 8004da0:	db15      	blt.n	8004dce <_printf_float+0x366>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	07da      	lsls	r2, r3, #31
 8004da6:	d412      	bmi.n	8004dce <_printf_float+0x366>
 8004da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004daa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dac:	eba3 020a 	sub.w	r2, r3, sl
 8004db0:	eba3 0a01 	sub.w	sl, r3, r1
 8004db4:	4592      	cmp	sl, r2
 8004db6:	bfa8      	it	ge
 8004db8:	4692      	movge	sl, r2
 8004dba:	f1ba 0f00 	cmp.w	sl, #0
 8004dbe:	dc0e      	bgt.n	8004dde <_printf_float+0x376>
 8004dc0:	f04f 0800 	mov.w	r8, #0
 8004dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004dc8:	f104 091a 	add.w	r9, r4, #26
 8004dcc:	e019      	b.n	8004e02 <_printf_float+0x39a>
 8004dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d1e5      	bne.n	8004da8 <_printf_float+0x340>
 8004ddc:	e6a1      	b.n	8004b22 <_printf_float+0xba>
 8004dde:	4653      	mov	r3, sl
 8004de0:	4642      	mov	r2, r8
 8004de2:	4631      	mov	r1, r6
 8004de4:	4628      	mov	r0, r5
 8004de6:	47b8      	blx	r7
 8004de8:	3001      	adds	r0, #1
 8004dea:	d1e9      	bne.n	8004dc0 <_printf_float+0x358>
 8004dec:	e699      	b.n	8004b22 <_printf_float+0xba>
 8004dee:	2301      	movs	r3, #1
 8004df0:	464a      	mov	r2, r9
 8004df2:	4631      	mov	r1, r6
 8004df4:	4628      	mov	r0, r5
 8004df6:	47b8      	blx	r7
 8004df8:	3001      	adds	r0, #1
 8004dfa:	f43f ae92 	beq.w	8004b22 <_printf_float+0xba>
 8004dfe:	f108 0801 	add.w	r8, r8, #1
 8004e02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	eba3 030a 	sub.w	r3, r3, sl
 8004e0c:	4543      	cmp	r3, r8
 8004e0e:	dcee      	bgt.n	8004dee <_printf_float+0x386>
 8004e10:	e74a      	b.n	8004ca8 <_printf_float+0x240>
 8004e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e14:	2a01      	cmp	r2, #1
 8004e16:	dc01      	bgt.n	8004e1c <_printf_float+0x3b4>
 8004e18:	07db      	lsls	r3, r3, #31
 8004e1a:	d53a      	bpl.n	8004e92 <_printf_float+0x42a>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	4642      	mov	r2, r8
 8004e20:	4631      	mov	r1, r6
 8004e22:	4628      	mov	r0, r5
 8004e24:	47b8      	blx	r7
 8004e26:	3001      	adds	r0, #1
 8004e28:	f43f ae7b 	beq.w	8004b22 <_printf_float+0xba>
 8004e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e30:	4631      	mov	r1, r6
 8004e32:	4628      	mov	r0, r5
 8004e34:	47b8      	blx	r7
 8004e36:	3001      	adds	r0, #1
 8004e38:	f108 0801 	add.w	r8, r8, #1
 8004e3c:	f43f ae71 	beq.w	8004b22 <_printf_float+0xba>
 8004e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e42:	2200      	movs	r2, #0
 8004e44:	f103 3aff 	add.w	sl, r3, #4294967295
 8004e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f7fb fe07 	bl	8000a60 <__aeabi_dcmpeq>
 8004e52:	b9c8      	cbnz	r0, 8004e88 <_printf_float+0x420>
 8004e54:	4653      	mov	r3, sl
 8004e56:	4642      	mov	r2, r8
 8004e58:	4631      	mov	r1, r6
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	47b8      	blx	r7
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d10e      	bne.n	8004e80 <_printf_float+0x418>
 8004e62:	e65e      	b.n	8004b22 <_printf_float+0xba>
 8004e64:	2301      	movs	r3, #1
 8004e66:	4652      	mov	r2, sl
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	47b8      	blx	r7
 8004e6e:	3001      	adds	r0, #1
 8004e70:	f43f ae57 	beq.w	8004b22 <_printf_float+0xba>
 8004e74:	f108 0801 	add.w	r8, r8, #1
 8004e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	4543      	cmp	r3, r8
 8004e7e:	dcf1      	bgt.n	8004e64 <_printf_float+0x3fc>
 8004e80:	464b      	mov	r3, r9
 8004e82:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e86:	e6de      	b.n	8004c46 <_printf_float+0x1de>
 8004e88:	f04f 0800 	mov.w	r8, #0
 8004e8c:	f104 0a1a 	add.w	sl, r4, #26
 8004e90:	e7f2      	b.n	8004e78 <_printf_float+0x410>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e7df      	b.n	8004e56 <_printf_float+0x3ee>
 8004e96:	2301      	movs	r3, #1
 8004e98:	464a      	mov	r2, r9
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	47b8      	blx	r7
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	f43f ae3e 	beq.w	8004b22 <_printf_float+0xba>
 8004ea6:	f108 0801 	add.w	r8, r8, #1
 8004eaa:	68e3      	ldr	r3, [r4, #12]
 8004eac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	4543      	cmp	r3, r8
 8004eb2:	dcf0      	bgt.n	8004e96 <_printf_float+0x42e>
 8004eb4:	e6fc      	b.n	8004cb0 <_printf_float+0x248>
 8004eb6:	f04f 0800 	mov.w	r8, #0
 8004eba:	f104 0919 	add.w	r9, r4, #25
 8004ebe:	e7f4      	b.n	8004eaa <_printf_float+0x442>
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	f43f ae8b 	beq.w	8004bdc <_printf_float+0x174>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004ecc:	ab09      	add	r3, sp, #36	; 0x24
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	ec49 8b10 	vmov	d0, r8, r9
 8004ed4:	6022      	str	r2, [r4, #0]
 8004ed6:	f8cd a004 	str.w	sl, [sp, #4]
 8004eda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f7ff fd2e 	bl	8004940 <__cvt>
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	e648      	b.n	8004b7a <_printf_float+0x112>

08004ee8 <_printf_common>:
 8004ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eec:	4691      	mov	r9, r2
 8004eee:	461f      	mov	r7, r3
 8004ef0:	688a      	ldr	r2, [r1, #8]
 8004ef2:	690b      	ldr	r3, [r1, #16]
 8004ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	bfb8      	it	lt
 8004efc:	4613      	movlt	r3, r2
 8004efe:	f8c9 3000 	str.w	r3, [r9]
 8004f02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f06:	4606      	mov	r6, r0
 8004f08:	460c      	mov	r4, r1
 8004f0a:	b112      	cbz	r2, 8004f12 <_printf_common+0x2a>
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f8c9 3000 	str.w	r3, [r9]
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	0699      	lsls	r1, r3, #26
 8004f16:	bf42      	ittt	mi
 8004f18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f1c:	3302      	addmi	r3, #2
 8004f1e:	f8c9 3000 	strmi.w	r3, [r9]
 8004f22:	6825      	ldr	r5, [r4, #0]
 8004f24:	f015 0506 	ands.w	r5, r5, #6
 8004f28:	d107      	bne.n	8004f3a <_printf_common+0x52>
 8004f2a:	f104 0a19 	add.w	sl, r4, #25
 8004f2e:	68e3      	ldr	r3, [r4, #12]
 8004f30:	f8d9 2000 	ldr.w	r2, [r9]
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	42ab      	cmp	r3, r5
 8004f38:	dc28      	bgt.n	8004f8c <_printf_common+0xa4>
 8004f3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	3300      	adds	r3, #0
 8004f42:	bf18      	it	ne
 8004f44:	2301      	movne	r3, #1
 8004f46:	0692      	lsls	r2, r2, #26
 8004f48:	d42d      	bmi.n	8004fa6 <_printf_common+0xbe>
 8004f4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f4e:	4639      	mov	r1, r7
 8004f50:	4630      	mov	r0, r6
 8004f52:	47c0      	blx	r8
 8004f54:	3001      	adds	r0, #1
 8004f56:	d020      	beq.n	8004f9a <_printf_common+0xb2>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	68e5      	ldr	r5, [r4, #12]
 8004f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004f60:	f003 0306 	and.w	r3, r3, #6
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	bf08      	it	eq
 8004f68:	1aad      	subeq	r5, r5, r2
 8004f6a:	68a3      	ldr	r3, [r4, #8]
 8004f6c:	6922      	ldr	r2, [r4, #16]
 8004f6e:	bf0c      	ite	eq
 8004f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f74:	2500      	movne	r5, #0
 8004f76:	4293      	cmp	r3, r2
 8004f78:	bfc4      	itt	gt
 8004f7a:	1a9b      	subgt	r3, r3, r2
 8004f7c:	18ed      	addgt	r5, r5, r3
 8004f7e:	f04f 0900 	mov.w	r9, #0
 8004f82:	341a      	adds	r4, #26
 8004f84:	454d      	cmp	r5, r9
 8004f86:	d11a      	bne.n	8004fbe <_printf_common+0xd6>
 8004f88:	2000      	movs	r0, #0
 8004f8a:	e008      	b.n	8004f9e <_printf_common+0xb6>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	4652      	mov	r2, sl
 8004f90:	4639      	mov	r1, r7
 8004f92:	4630      	mov	r0, r6
 8004f94:	47c0      	blx	r8
 8004f96:	3001      	adds	r0, #1
 8004f98:	d103      	bne.n	8004fa2 <_printf_common+0xba>
 8004f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa2:	3501      	adds	r5, #1
 8004fa4:	e7c3      	b.n	8004f2e <_printf_common+0x46>
 8004fa6:	18e1      	adds	r1, r4, r3
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	2030      	movs	r0, #48	; 0x30
 8004fac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fb0:	4422      	add	r2, r4
 8004fb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fba:	3302      	adds	r3, #2
 8004fbc:	e7c5      	b.n	8004f4a <_printf_common+0x62>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4622      	mov	r2, r4
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	47c0      	blx	r8
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d0e6      	beq.n	8004f9a <_printf_common+0xb2>
 8004fcc:	f109 0901 	add.w	r9, r9, #1
 8004fd0:	e7d8      	b.n	8004f84 <_printf_common+0x9c>

08004fd2 <quorem>:
 8004fd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd6:	6903      	ldr	r3, [r0, #16]
 8004fd8:	690c      	ldr	r4, [r1, #16]
 8004fda:	42a3      	cmp	r3, r4
 8004fdc:	4680      	mov	r8, r0
 8004fde:	f2c0 8082 	blt.w	80050e6 <quorem+0x114>
 8004fe2:	3c01      	subs	r4, #1
 8004fe4:	f101 0714 	add.w	r7, r1, #20
 8004fe8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004fec:	f100 0614 	add.w	r6, r0, #20
 8004ff0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004ff4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004ff8:	eb06 030c 	add.w	r3, r6, ip
 8004ffc:	3501      	adds	r5, #1
 8004ffe:	eb07 090c 	add.w	r9, r7, ip
 8005002:	9301      	str	r3, [sp, #4]
 8005004:	fbb0 f5f5 	udiv	r5, r0, r5
 8005008:	b395      	cbz	r5, 8005070 <quorem+0x9e>
 800500a:	f04f 0a00 	mov.w	sl, #0
 800500e:	4638      	mov	r0, r7
 8005010:	46b6      	mov	lr, r6
 8005012:	46d3      	mov	fp, sl
 8005014:	f850 2b04 	ldr.w	r2, [r0], #4
 8005018:	b293      	uxth	r3, r2
 800501a:	fb05 a303 	mla	r3, r5, r3, sl
 800501e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005022:	b29b      	uxth	r3, r3
 8005024:	ebab 0303 	sub.w	r3, fp, r3
 8005028:	0c12      	lsrs	r2, r2, #16
 800502a:	f8de b000 	ldr.w	fp, [lr]
 800502e:	fb05 a202 	mla	r2, r5, r2, sl
 8005032:	fa13 f38b 	uxtah	r3, r3, fp
 8005036:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800503a:	fa1f fb82 	uxth.w	fp, r2
 800503e:	f8de 2000 	ldr.w	r2, [lr]
 8005042:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800504a:	b29b      	uxth	r3, r3
 800504c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005050:	4581      	cmp	r9, r0
 8005052:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005056:	f84e 3b04 	str.w	r3, [lr], #4
 800505a:	d2db      	bcs.n	8005014 <quorem+0x42>
 800505c:	f856 300c 	ldr.w	r3, [r6, ip]
 8005060:	b933      	cbnz	r3, 8005070 <quorem+0x9e>
 8005062:	9b01      	ldr	r3, [sp, #4]
 8005064:	3b04      	subs	r3, #4
 8005066:	429e      	cmp	r6, r3
 8005068:	461a      	mov	r2, r3
 800506a:	d330      	bcc.n	80050ce <quorem+0xfc>
 800506c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005070:	4640      	mov	r0, r8
 8005072:	f001 f82b 	bl	80060cc <__mcmp>
 8005076:	2800      	cmp	r0, #0
 8005078:	db25      	blt.n	80050c6 <quorem+0xf4>
 800507a:	3501      	adds	r5, #1
 800507c:	4630      	mov	r0, r6
 800507e:	f04f 0c00 	mov.w	ip, #0
 8005082:	f857 2b04 	ldr.w	r2, [r7], #4
 8005086:	f8d0 e000 	ldr.w	lr, [r0]
 800508a:	b293      	uxth	r3, r2
 800508c:	ebac 0303 	sub.w	r3, ip, r3
 8005090:	0c12      	lsrs	r2, r2, #16
 8005092:	fa13 f38e 	uxtah	r3, r3, lr
 8005096:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800509a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800509e:	b29b      	uxth	r3, r3
 80050a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050a4:	45b9      	cmp	r9, r7
 80050a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80050aa:	f840 3b04 	str.w	r3, [r0], #4
 80050ae:	d2e8      	bcs.n	8005082 <quorem+0xb0>
 80050b0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80050b4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80050b8:	b92a      	cbnz	r2, 80050c6 <quorem+0xf4>
 80050ba:	3b04      	subs	r3, #4
 80050bc:	429e      	cmp	r6, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	d30b      	bcc.n	80050da <quorem+0x108>
 80050c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80050c6:	4628      	mov	r0, r5
 80050c8:	b003      	add	sp, #12
 80050ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	3b04      	subs	r3, #4
 80050d2:	2a00      	cmp	r2, #0
 80050d4:	d1ca      	bne.n	800506c <quorem+0x9a>
 80050d6:	3c01      	subs	r4, #1
 80050d8:	e7c5      	b.n	8005066 <quorem+0x94>
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	3b04      	subs	r3, #4
 80050de:	2a00      	cmp	r2, #0
 80050e0:	d1ef      	bne.n	80050c2 <quorem+0xf0>
 80050e2:	3c01      	subs	r4, #1
 80050e4:	e7ea      	b.n	80050bc <quorem+0xea>
 80050e6:	2000      	movs	r0, #0
 80050e8:	e7ee      	b.n	80050c8 <quorem+0xf6>
 80050ea:	0000      	movs	r0, r0
 80050ec:	0000      	movs	r0, r0
	...

080050f0 <_dtoa_r>:
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	ec57 6b10 	vmov	r6, r7, d0
 80050f8:	b097      	sub	sp, #92	; 0x5c
 80050fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050fc:	9106      	str	r1, [sp, #24]
 80050fe:	4604      	mov	r4, r0
 8005100:	920b      	str	r2, [sp, #44]	; 0x2c
 8005102:	9312      	str	r3, [sp, #72]	; 0x48
 8005104:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005108:	e9cd 6700 	strd	r6, r7, [sp]
 800510c:	b93d      	cbnz	r5, 800511e <_dtoa_r+0x2e>
 800510e:	2010      	movs	r0, #16
 8005110:	f000 fdb4 	bl	8005c7c <malloc>
 8005114:	6260      	str	r0, [r4, #36]	; 0x24
 8005116:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800511a:	6005      	str	r5, [r0, #0]
 800511c:	60c5      	str	r5, [r0, #12]
 800511e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005120:	6819      	ldr	r1, [r3, #0]
 8005122:	b151      	cbz	r1, 800513a <_dtoa_r+0x4a>
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	604a      	str	r2, [r1, #4]
 8005128:	2301      	movs	r3, #1
 800512a:	4093      	lsls	r3, r2
 800512c:	608b      	str	r3, [r1, #8]
 800512e:	4620      	mov	r0, r4
 8005130:	f000 fdeb 	bl	8005d0a <_Bfree>
 8005134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	1e3b      	subs	r3, r7, #0
 800513c:	bfbb      	ittet	lt
 800513e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005142:	9301      	strlt	r3, [sp, #4]
 8005144:	2300      	movge	r3, #0
 8005146:	2201      	movlt	r2, #1
 8005148:	bfac      	ite	ge
 800514a:	f8c8 3000 	strge.w	r3, [r8]
 800514e:	f8c8 2000 	strlt.w	r2, [r8]
 8005152:	4baf      	ldr	r3, [pc, #700]	; (8005410 <_dtoa_r+0x320>)
 8005154:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005158:	ea33 0308 	bics.w	r3, r3, r8
 800515c:	d114      	bne.n	8005188 <_dtoa_r+0x98>
 800515e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005160:	f242 730f 	movw	r3, #9999	; 0x270f
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	9b00      	ldr	r3, [sp, #0]
 8005168:	b923      	cbnz	r3, 8005174 <_dtoa_r+0x84>
 800516a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800516e:	2800      	cmp	r0, #0
 8005170:	f000 8542 	beq.w	8005bf8 <_dtoa_r+0xb08>
 8005174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005176:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005424 <_dtoa_r+0x334>
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8544 	beq.w	8005c08 <_dtoa_r+0xb18>
 8005180:	f10b 0303 	add.w	r3, fp, #3
 8005184:	f000 bd3e 	b.w	8005c04 <_dtoa_r+0xb14>
 8005188:	e9dd 6700 	ldrd	r6, r7, [sp]
 800518c:	2200      	movs	r2, #0
 800518e:	2300      	movs	r3, #0
 8005190:	4630      	mov	r0, r6
 8005192:	4639      	mov	r1, r7
 8005194:	f7fb fc64 	bl	8000a60 <__aeabi_dcmpeq>
 8005198:	4681      	mov	r9, r0
 800519a:	b168      	cbz	r0, 80051b8 <_dtoa_r+0xc8>
 800519c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800519e:	2301      	movs	r3, #1
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8524 	beq.w	8005bf2 <_dtoa_r+0xb02>
 80051aa:	4b9a      	ldr	r3, [pc, #616]	; (8005414 <_dtoa_r+0x324>)
 80051ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	f000 bd28 	b.w	8005c08 <_dtoa_r+0xb18>
 80051b8:	aa14      	add	r2, sp, #80	; 0x50
 80051ba:	a915      	add	r1, sp, #84	; 0x54
 80051bc:	ec47 6b10 	vmov	d0, r6, r7
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 fffa 	bl	80061ba <__d2b>
 80051c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80051ca:	9004      	str	r0, [sp, #16]
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	d07c      	beq.n	80052ca <_dtoa_r+0x1da>
 80051d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80051d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80051d8:	46b2      	mov	sl, r6
 80051da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80051de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80051e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80051e6:	2200      	movs	r2, #0
 80051e8:	4b8b      	ldr	r3, [pc, #556]	; (8005418 <_dtoa_r+0x328>)
 80051ea:	4650      	mov	r0, sl
 80051ec:	4659      	mov	r1, fp
 80051ee:	f7fb f817 	bl	8000220 <__aeabi_dsub>
 80051f2:	a381      	add	r3, pc, #516	; (adr r3, 80053f8 <_dtoa_r+0x308>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fb f9ca 	bl	8000590 <__aeabi_dmul>
 80051fc:	a380      	add	r3, pc, #512	; (adr r3, 8005400 <_dtoa_r+0x310>)
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	f7fb f80f 	bl	8000224 <__adddf3>
 8005206:	4606      	mov	r6, r0
 8005208:	4628      	mov	r0, r5
 800520a:	460f      	mov	r7, r1
 800520c:	f7fb f956 	bl	80004bc <__aeabi_i2d>
 8005210:	a37d      	add	r3, pc, #500	; (adr r3, 8005408 <_dtoa_r+0x318>)
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	f7fb f9bb 	bl	8000590 <__aeabi_dmul>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4630      	mov	r0, r6
 8005220:	4639      	mov	r1, r7
 8005222:	f7fa ffff 	bl	8000224 <__adddf3>
 8005226:	4606      	mov	r6, r0
 8005228:	460f      	mov	r7, r1
 800522a:	f7fb fc61 	bl	8000af0 <__aeabi_d2iz>
 800522e:	2200      	movs	r2, #0
 8005230:	4682      	mov	sl, r0
 8005232:	2300      	movs	r3, #0
 8005234:	4630      	mov	r0, r6
 8005236:	4639      	mov	r1, r7
 8005238:	f7fb fc1c 	bl	8000a74 <__aeabi_dcmplt>
 800523c:	b148      	cbz	r0, 8005252 <_dtoa_r+0x162>
 800523e:	4650      	mov	r0, sl
 8005240:	f7fb f93c 	bl	80004bc <__aeabi_i2d>
 8005244:	4632      	mov	r2, r6
 8005246:	463b      	mov	r3, r7
 8005248:	f7fb fc0a 	bl	8000a60 <__aeabi_dcmpeq>
 800524c:	b908      	cbnz	r0, 8005252 <_dtoa_r+0x162>
 800524e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005252:	f1ba 0f16 	cmp.w	sl, #22
 8005256:	d859      	bhi.n	800530c <_dtoa_r+0x21c>
 8005258:	4970      	ldr	r1, [pc, #448]	; (800541c <_dtoa_r+0x32c>)
 800525a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800525e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005266:	f7fb fc23 	bl	8000ab0 <__aeabi_dcmpgt>
 800526a:	2800      	cmp	r0, #0
 800526c:	d050      	beq.n	8005310 <_dtoa_r+0x220>
 800526e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005272:	2300      	movs	r3, #0
 8005274:	930f      	str	r3, [sp, #60]	; 0x3c
 8005276:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005278:	1b5d      	subs	r5, r3, r5
 800527a:	f1b5 0801 	subs.w	r8, r5, #1
 800527e:	bf49      	itett	mi
 8005280:	f1c5 0301 	rsbmi	r3, r5, #1
 8005284:	2300      	movpl	r3, #0
 8005286:	9305      	strmi	r3, [sp, #20]
 8005288:	f04f 0800 	movmi.w	r8, #0
 800528c:	bf58      	it	pl
 800528e:	9305      	strpl	r3, [sp, #20]
 8005290:	f1ba 0f00 	cmp.w	sl, #0
 8005294:	db3e      	blt.n	8005314 <_dtoa_r+0x224>
 8005296:	2300      	movs	r3, #0
 8005298:	44d0      	add	r8, sl
 800529a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800529e:	9307      	str	r3, [sp, #28]
 80052a0:	9b06      	ldr	r3, [sp, #24]
 80052a2:	2b09      	cmp	r3, #9
 80052a4:	f200 8090 	bhi.w	80053c8 <_dtoa_r+0x2d8>
 80052a8:	2b05      	cmp	r3, #5
 80052aa:	bfc4      	itt	gt
 80052ac:	3b04      	subgt	r3, #4
 80052ae:	9306      	strgt	r3, [sp, #24]
 80052b0:	9b06      	ldr	r3, [sp, #24]
 80052b2:	f1a3 0302 	sub.w	r3, r3, #2
 80052b6:	bfcc      	ite	gt
 80052b8:	2500      	movgt	r5, #0
 80052ba:	2501      	movle	r5, #1
 80052bc:	2b03      	cmp	r3, #3
 80052be:	f200 808f 	bhi.w	80053e0 <_dtoa_r+0x2f0>
 80052c2:	e8df f003 	tbb	[pc, r3]
 80052c6:	7f7d      	.short	0x7f7d
 80052c8:	7131      	.short	0x7131
 80052ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80052ce:	441d      	add	r5, r3
 80052d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80052d4:	2820      	cmp	r0, #32
 80052d6:	dd13      	ble.n	8005300 <_dtoa_r+0x210>
 80052d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80052dc:	9b00      	ldr	r3, [sp, #0]
 80052de:	fa08 f800 	lsl.w	r8, r8, r0
 80052e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80052e6:	fa23 f000 	lsr.w	r0, r3, r0
 80052ea:	ea48 0000 	orr.w	r0, r8, r0
 80052ee:	f7fb f8d5 	bl	800049c <__aeabi_ui2d>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4682      	mov	sl, r0
 80052f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80052fa:	3d01      	subs	r5, #1
 80052fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80052fe:	e772      	b.n	80051e6 <_dtoa_r+0xf6>
 8005300:	9b00      	ldr	r3, [sp, #0]
 8005302:	f1c0 0020 	rsb	r0, r0, #32
 8005306:	fa03 f000 	lsl.w	r0, r3, r0
 800530a:	e7f0      	b.n	80052ee <_dtoa_r+0x1fe>
 800530c:	2301      	movs	r3, #1
 800530e:	e7b1      	b.n	8005274 <_dtoa_r+0x184>
 8005310:	900f      	str	r0, [sp, #60]	; 0x3c
 8005312:	e7b0      	b.n	8005276 <_dtoa_r+0x186>
 8005314:	9b05      	ldr	r3, [sp, #20]
 8005316:	eba3 030a 	sub.w	r3, r3, sl
 800531a:	9305      	str	r3, [sp, #20]
 800531c:	f1ca 0300 	rsb	r3, sl, #0
 8005320:	9307      	str	r3, [sp, #28]
 8005322:	2300      	movs	r3, #0
 8005324:	930e      	str	r3, [sp, #56]	; 0x38
 8005326:	e7bb      	b.n	80052a0 <_dtoa_r+0x1b0>
 8005328:	2301      	movs	r3, #1
 800532a:	930a      	str	r3, [sp, #40]	; 0x28
 800532c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800532e:	2b00      	cmp	r3, #0
 8005330:	dd59      	ble.n	80053e6 <_dtoa_r+0x2f6>
 8005332:	9302      	str	r3, [sp, #8]
 8005334:	4699      	mov	r9, r3
 8005336:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005338:	2200      	movs	r2, #0
 800533a:	6072      	str	r2, [r6, #4]
 800533c:	2204      	movs	r2, #4
 800533e:	f102 0014 	add.w	r0, r2, #20
 8005342:	4298      	cmp	r0, r3
 8005344:	6871      	ldr	r1, [r6, #4]
 8005346:	d953      	bls.n	80053f0 <_dtoa_r+0x300>
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fcaa 	bl	8005ca2 <_Balloc>
 800534e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005350:	6030      	str	r0, [r6, #0]
 8005352:	f1b9 0f0e 	cmp.w	r9, #14
 8005356:	f8d3 b000 	ldr.w	fp, [r3]
 800535a:	f200 80e6 	bhi.w	800552a <_dtoa_r+0x43a>
 800535e:	2d00      	cmp	r5, #0
 8005360:	f000 80e3 	beq.w	800552a <_dtoa_r+0x43a>
 8005364:	ed9d 7b00 	vldr	d7, [sp]
 8005368:	f1ba 0f00 	cmp.w	sl, #0
 800536c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005370:	dd74      	ble.n	800545c <_dtoa_r+0x36c>
 8005372:	4a2a      	ldr	r2, [pc, #168]	; (800541c <_dtoa_r+0x32c>)
 8005374:	f00a 030f 	and.w	r3, sl, #15
 8005378:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800537c:	ed93 7b00 	vldr	d7, [r3]
 8005380:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005384:	06f0      	lsls	r0, r6, #27
 8005386:	ed8d 7b08 	vstr	d7, [sp, #32]
 800538a:	d565      	bpl.n	8005458 <_dtoa_r+0x368>
 800538c:	4b24      	ldr	r3, [pc, #144]	; (8005420 <_dtoa_r+0x330>)
 800538e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005392:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005396:	f7fb fa25 	bl	80007e4 <__aeabi_ddiv>
 800539a:	e9cd 0100 	strd	r0, r1, [sp]
 800539e:	f006 060f 	and.w	r6, r6, #15
 80053a2:	2503      	movs	r5, #3
 80053a4:	4f1e      	ldr	r7, [pc, #120]	; (8005420 <_dtoa_r+0x330>)
 80053a6:	e04c      	b.n	8005442 <_dtoa_r+0x352>
 80053a8:	2301      	movs	r3, #1
 80053aa:	930a      	str	r3, [sp, #40]	; 0x28
 80053ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ae:	4453      	add	r3, sl
 80053b0:	f103 0901 	add.w	r9, r3, #1
 80053b4:	9302      	str	r3, [sp, #8]
 80053b6:	464b      	mov	r3, r9
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	bfb8      	it	lt
 80053bc:	2301      	movlt	r3, #1
 80053be:	e7ba      	b.n	8005336 <_dtoa_r+0x246>
 80053c0:	2300      	movs	r3, #0
 80053c2:	e7b2      	b.n	800532a <_dtoa_r+0x23a>
 80053c4:	2300      	movs	r3, #0
 80053c6:	e7f0      	b.n	80053aa <_dtoa_r+0x2ba>
 80053c8:	2501      	movs	r5, #1
 80053ca:	2300      	movs	r3, #0
 80053cc:	9306      	str	r3, [sp, #24]
 80053ce:	950a      	str	r5, [sp, #40]	; 0x28
 80053d0:	f04f 33ff 	mov.w	r3, #4294967295
 80053d4:	9302      	str	r3, [sp, #8]
 80053d6:	4699      	mov	r9, r3
 80053d8:	2200      	movs	r2, #0
 80053da:	2312      	movs	r3, #18
 80053dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80053de:	e7aa      	b.n	8005336 <_dtoa_r+0x246>
 80053e0:	2301      	movs	r3, #1
 80053e2:	930a      	str	r3, [sp, #40]	; 0x28
 80053e4:	e7f4      	b.n	80053d0 <_dtoa_r+0x2e0>
 80053e6:	2301      	movs	r3, #1
 80053e8:	9302      	str	r3, [sp, #8]
 80053ea:	4699      	mov	r9, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	e7f5      	b.n	80053dc <_dtoa_r+0x2ec>
 80053f0:	3101      	adds	r1, #1
 80053f2:	6071      	str	r1, [r6, #4]
 80053f4:	0052      	lsls	r2, r2, #1
 80053f6:	e7a2      	b.n	800533e <_dtoa_r+0x24e>
 80053f8:	636f4361 	.word	0x636f4361
 80053fc:	3fd287a7 	.word	0x3fd287a7
 8005400:	8b60c8b3 	.word	0x8b60c8b3
 8005404:	3fc68a28 	.word	0x3fc68a28
 8005408:	509f79fb 	.word	0x509f79fb
 800540c:	3fd34413 	.word	0x3fd34413
 8005410:	7ff00000 	.word	0x7ff00000
 8005414:	08006a39 	.word	0x08006a39
 8005418:	3ff80000 	.word	0x3ff80000
 800541c:	08006a70 	.word	0x08006a70
 8005420:	08006a48 	.word	0x08006a48
 8005424:	08006a43 	.word	0x08006a43
 8005428:	07f1      	lsls	r1, r6, #31
 800542a:	d508      	bpl.n	800543e <_dtoa_r+0x34e>
 800542c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005434:	f7fb f8ac 	bl	8000590 <__aeabi_dmul>
 8005438:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800543c:	3501      	adds	r5, #1
 800543e:	1076      	asrs	r6, r6, #1
 8005440:	3708      	adds	r7, #8
 8005442:	2e00      	cmp	r6, #0
 8005444:	d1f0      	bne.n	8005428 <_dtoa_r+0x338>
 8005446:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800544a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800544e:	f7fb f9c9 	bl	80007e4 <__aeabi_ddiv>
 8005452:	e9cd 0100 	strd	r0, r1, [sp]
 8005456:	e01a      	b.n	800548e <_dtoa_r+0x39e>
 8005458:	2502      	movs	r5, #2
 800545a:	e7a3      	b.n	80053a4 <_dtoa_r+0x2b4>
 800545c:	f000 80a0 	beq.w	80055a0 <_dtoa_r+0x4b0>
 8005460:	f1ca 0600 	rsb	r6, sl, #0
 8005464:	4b9f      	ldr	r3, [pc, #636]	; (80056e4 <_dtoa_r+0x5f4>)
 8005466:	4fa0      	ldr	r7, [pc, #640]	; (80056e8 <_dtoa_r+0x5f8>)
 8005468:	f006 020f 	and.w	r2, r6, #15
 800546c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005478:	f7fb f88a 	bl	8000590 <__aeabi_dmul>
 800547c:	e9cd 0100 	strd	r0, r1, [sp]
 8005480:	1136      	asrs	r6, r6, #4
 8005482:	2300      	movs	r3, #0
 8005484:	2502      	movs	r5, #2
 8005486:	2e00      	cmp	r6, #0
 8005488:	d17f      	bne.n	800558a <_dtoa_r+0x49a>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e1      	bne.n	8005452 <_dtoa_r+0x362>
 800548e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8087 	beq.w	80055a4 <_dtoa_r+0x4b4>
 8005496:	e9dd 6700 	ldrd	r6, r7, [sp]
 800549a:	2200      	movs	r2, #0
 800549c:	4b93      	ldr	r3, [pc, #588]	; (80056ec <_dtoa_r+0x5fc>)
 800549e:	4630      	mov	r0, r6
 80054a0:	4639      	mov	r1, r7
 80054a2:	f7fb fae7 	bl	8000a74 <__aeabi_dcmplt>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d07c      	beq.n	80055a4 <_dtoa_r+0x4b4>
 80054aa:	f1b9 0f00 	cmp.w	r9, #0
 80054ae:	d079      	beq.n	80055a4 <_dtoa_r+0x4b4>
 80054b0:	9b02      	ldr	r3, [sp, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dd35      	ble.n	8005522 <_dtoa_r+0x432>
 80054b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80054ba:	9308      	str	r3, [sp, #32]
 80054bc:	4639      	mov	r1, r7
 80054be:	2200      	movs	r2, #0
 80054c0:	4b8b      	ldr	r3, [pc, #556]	; (80056f0 <_dtoa_r+0x600>)
 80054c2:	4630      	mov	r0, r6
 80054c4:	f7fb f864 	bl	8000590 <__aeabi_dmul>
 80054c8:	e9cd 0100 	strd	r0, r1, [sp]
 80054cc:	9f02      	ldr	r7, [sp, #8]
 80054ce:	3501      	adds	r5, #1
 80054d0:	4628      	mov	r0, r5
 80054d2:	f7fa fff3 	bl	80004bc <__aeabi_i2d>
 80054d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054da:	f7fb f859 	bl	8000590 <__aeabi_dmul>
 80054de:	2200      	movs	r2, #0
 80054e0:	4b84      	ldr	r3, [pc, #528]	; (80056f4 <_dtoa_r+0x604>)
 80054e2:	f7fa fe9f 	bl	8000224 <__adddf3>
 80054e6:	4605      	mov	r5, r0
 80054e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80054ec:	2f00      	cmp	r7, #0
 80054ee:	d15d      	bne.n	80055ac <_dtoa_r+0x4bc>
 80054f0:	2200      	movs	r2, #0
 80054f2:	4b81      	ldr	r3, [pc, #516]	; (80056f8 <_dtoa_r+0x608>)
 80054f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054f8:	f7fa fe92 	bl	8000220 <__aeabi_dsub>
 80054fc:	462a      	mov	r2, r5
 80054fe:	4633      	mov	r3, r6
 8005500:	e9cd 0100 	strd	r0, r1, [sp]
 8005504:	f7fb fad4 	bl	8000ab0 <__aeabi_dcmpgt>
 8005508:	2800      	cmp	r0, #0
 800550a:	f040 8288 	bne.w	8005a1e <_dtoa_r+0x92e>
 800550e:	462a      	mov	r2, r5
 8005510:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005518:	f7fb faac 	bl	8000a74 <__aeabi_dcmplt>
 800551c:	2800      	cmp	r0, #0
 800551e:	f040 827c 	bne.w	8005a1a <_dtoa_r+0x92a>
 8005522:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005526:	e9cd 2300 	strd	r2, r3, [sp]
 800552a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800552c:	2b00      	cmp	r3, #0
 800552e:	f2c0 8150 	blt.w	80057d2 <_dtoa_r+0x6e2>
 8005532:	f1ba 0f0e 	cmp.w	sl, #14
 8005536:	f300 814c 	bgt.w	80057d2 <_dtoa_r+0x6e2>
 800553a:	4b6a      	ldr	r3, [pc, #424]	; (80056e4 <_dtoa_r+0x5f4>)
 800553c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005540:	ed93 7b00 	vldr	d7, [r3]
 8005544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005546:	2b00      	cmp	r3, #0
 8005548:	ed8d 7b02 	vstr	d7, [sp, #8]
 800554c:	f280 80d8 	bge.w	8005700 <_dtoa_r+0x610>
 8005550:	f1b9 0f00 	cmp.w	r9, #0
 8005554:	f300 80d4 	bgt.w	8005700 <_dtoa_r+0x610>
 8005558:	f040 825e 	bne.w	8005a18 <_dtoa_r+0x928>
 800555c:	2200      	movs	r2, #0
 800555e:	4b66      	ldr	r3, [pc, #408]	; (80056f8 <_dtoa_r+0x608>)
 8005560:	ec51 0b17 	vmov	r0, r1, d7
 8005564:	f7fb f814 	bl	8000590 <__aeabi_dmul>
 8005568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800556c:	f7fb fa96 	bl	8000a9c <__aeabi_dcmpge>
 8005570:	464f      	mov	r7, r9
 8005572:	464e      	mov	r6, r9
 8005574:	2800      	cmp	r0, #0
 8005576:	f040 8234 	bne.w	80059e2 <_dtoa_r+0x8f2>
 800557a:	2331      	movs	r3, #49	; 0x31
 800557c:	f10b 0501 	add.w	r5, fp, #1
 8005580:	f88b 3000 	strb.w	r3, [fp]
 8005584:	f10a 0a01 	add.w	sl, sl, #1
 8005588:	e22f      	b.n	80059ea <_dtoa_r+0x8fa>
 800558a:	07f2      	lsls	r2, r6, #31
 800558c:	d505      	bpl.n	800559a <_dtoa_r+0x4aa>
 800558e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005592:	f7fa fffd 	bl	8000590 <__aeabi_dmul>
 8005596:	3501      	adds	r5, #1
 8005598:	2301      	movs	r3, #1
 800559a:	1076      	asrs	r6, r6, #1
 800559c:	3708      	adds	r7, #8
 800559e:	e772      	b.n	8005486 <_dtoa_r+0x396>
 80055a0:	2502      	movs	r5, #2
 80055a2:	e774      	b.n	800548e <_dtoa_r+0x39e>
 80055a4:	f8cd a020 	str.w	sl, [sp, #32]
 80055a8:	464f      	mov	r7, r9
 80055aa:	e791      	b.n	80054d0 <_dtoa_r+0x3e0>
 80055ac:	4b4d      	ldr	r3, [pc, #308]	; (80056e4 <_dtoa_r+0x5f4>)
 80055ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80055b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d047      	beq.n	800564c <_dtoa_r+0x55c>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	2000      	movs	r0, #0
 80055c2:	494e      	ldr	r1, [pc, #312]	; (80056fc <_dtoa_r+0x60c>)
 80055c4:	f7fb f90e 	bl	80007e4 <__aeabi_ddiv>
 80055c8:	462a      	mov	r2, r5
 80055ca:	4633      	mov	r3, r6
 80055cc:	f7fa fe28 	bl	8000220 <__aeabi_dsub>
 80055d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80055d4:	465d      	mov	r5, fp
 80055d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055da:	f7fb fa89 	bl	8000af0 <__aeabi_d2iz>
 80055de:	4606      	mov	r6, r0
 80055e0:	f7fa ff6c 	bl	80004bc <__aeabi_i2d>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055ec:	f7fa fe18 	bl	8000220 <__aeabi_dsub>
 80055f0:	3630      	adds	r6, #48	; 0x30
 80055f2:	f805 6b01 	strb.w	r6, [r5], #1
 80055f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80055fa:	e9cd 0100 	strd	r0, r1, [sp]
 80055fe:	f7fb fa39 	bl	8000a74 <__aeabi_dcmplt>
 8005602:	2800      	cmp	r0, #0
 8005604:	d163      	bne.n	80056ce <_dtoa_r+0x5de>
 8005606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800560a:	2000      	movs	r0, #0
 800560c:	4937      	ldr	r1, [pc, #220]	; (80056ec <_dtoa_r+0x5fc>)
 800560e:	f7fa fe07 	bl	8000220 <__aeabi_dsub>
 8005612:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005616:	f7fb fa2d 	bl	8000a74 <__aeabi_dcmplt>
 800561a:	2800      	cmp	r0, #0
 800561c:	f040 80b7 	bne.w	800578e <_dtoa_r+0x69e>
 8005620:	eba5 030b 	sub.w	r3, r5, fp
 8005624:	429f      	cmp	r7, r3
 8005626:	f77f af7c 	ble.w	8005522 <_dtoa_r+0x432>
 800562a:	2200      	movs	r2, #0
 800562c:	4b30      	ldr	r3, [pc, #192]	; (80056f0 <_dtoa_r+0x600>)
 800562e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005632:	f7fa ffad 	bl	8000590 <__aeabi_dmul>
 8005636:	2200      	movs	r2, #0
 8005638:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800563c:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <_dtoa_r+0x600>)
 800563e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005642:	f7fa ffa5 	bl	8000590 <__aeabi_dmul>
 8005646:	e9cd 0100 	strd	r0, r1, [sp]
 800564a:	e7c4      	b.n	80055d6 <_dtoa_r+0x4e6>
 800564c:	462a      	mov	r2, r5
 800564e:	4633      	mov	r3, r6
 8005650:	f7fa ff9e 	bl	8000590 <__aeabi_dmul>
 8005654:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005658:	eb0b 0507 	add.w	r5, fp, r7
 800565c:	465e      	mov	r6, fp
 800565e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005662:	f7fb fa45 	bl	8000af0 <__aeabi_d2iz>
 8005666:	4607      	mov	r7, r0
 8005668:	f7fa ff28 	bl	80004bc <__aeabi_i2d>
 800566c:	3730      	adds	r7, #48	; 0x30
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005676:	f7fa fdd3 	bl	8000220 <__aeabi_dsub>
 800567a:	f806 7b01 	strb.w	r7, [r6], #1
 800567e:	42ae      	cmp	r6, r5
 8005680:	e9cd 0100 	strd	r0, r1, [sp]
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	d126      	bne.n	80056d8 <_dtoa_r+0x5e8>
 800568a:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <_dtoa_r+0x60c>)
 800568c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005690:	f7fa fdc8 	bl	8000224 <__adddf3>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800569c:	f7fb fa08 	bl	8000ab0 <__aeabi_dcmpgt>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d174      	bne.n	800578e <_dtoa_r+0x69e>
 80056a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056a8:	2000      	movs	r0, #0
 80056aa:	4914      	ldr	r1, [pc, #80]	; (80056fc <_dtoa_r+0x60c>)
 80056ac:	f7fa fdb8 	bl	8000220 <__aeabi_dsub>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056b8:	f7fb f9dc 	bl	8000a74 <__aeabi_dcmplt>
 80056bc:	2800      	cmp	r0, #0
 80056be:	f43f af30 	beq.w	8005522 <_dtoa_r+0x432>
 80056c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056c6:	2b30      	cmp	r3, #48	; 0x30
 80056c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80056cc:	d002      	beq.n	80056d4 <_dtoa_r+0x5e4>
 80056ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80056d2:	e04a      	b.n	800576a <_dtoa_r+0x67a>
 80056d4:	4615      	mov	r5, r2
 80056d6:	e7f4      	b.n	80056c2 <_dtoa_r+0x5d2>
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <_dtoa_r+0x600>)
 80056da:	f7fa ff59 	bl	8000590 <__aeabi_dmul>
 80056de:	e9cd 0100 	strd	r0, r1, [sp]
 80056e2:	e7bc      	b.n	800565e <_dtoa_r+0x56e>
 80056e4:	08006a70 	.word	0x08006a70
 80056e8:	08006a48 	.word	0x08006a48
 80056ec:	3ff00000 	.word	0x3ff00000
 80056f0:	40240000 	.word	0x40240000
 80056f4:	401c0000 	.word	0x401c0000
 80056f8:	40140000 	.word	0x40140000
 80056fc:	3fe00000 	.word	0x3fe00000
 8005700:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005704:	465d      	mov	r5, fp
 8005706:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800570a:	4630      	mov	r0, r6
 800570c:	4639      	mov	r1, r7
 800570e:	f7fb f869 	bl	80007e4 <__aeabi_ddiv>
 8005712:	f7fb f9ed 	bl	8000af0 <__aeabi_d2iz>
 8005716:	4680      	mov	r8, r0
 8005718:	f7fa fed0 	bl	80004bc <__aeabi_i2d>
 800571c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005720:	f7fa ff36 	bl	8000590 <__aeabi_dmul>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4630      	mov	r0, r6
 800572a:	4639      	mov	r1, r7
 800572c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005730:	f7fa fd76 	bl	8000220 <__aeabi_dsub>
 8005734:	f805 6b01 	strb.w	r6, [r5], #1
 8005738:	eba5 060b 	sub.w	r6, r5, fp
 800573c:	45b1      	cmp	r9, r6
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	d139      	bne.n	80057b8 <_dtoa_r+0x6c8>
 8005744:	f7fa fd6e 	bl	8000224 <__adddf3>
 8005748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800574c:	4606      	mov	r6, r0
 800574e:	460f      	mov	r7, r1
 8005750:	f7fb f9ae 	bl	8000ab0 <__aeabi_dcmpgt>
 8005754:	b9c8      	cbnz	r0, 800578a <_dtoa_r+0x69a>
 8005756:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800575a:	4630      	mov	r0, r6
 800575c:	4639      	mov	r1, r7
 800575e:	f7fb f97f 	bl	8000a60 <__aeabi_dcmpeq>
 8005762:	b110      	cbz	r0, 800576a <_dtoa_r+0x67a>
 8005764:	f018 0f01 	tst.w	r8, #1
 8005768:	d10f      	bne.n	800578a <_dtoa_r+0x69a>
 800576a:	9904      	ldr	r1, [sp, #16]
 800576c:	4620      	mov	r0, r4
 800576e:	f000 facc 	bl	8005d0a <_Bfree>
 8005772:	2300      	movs	r3, #0
 8005774:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005776:	702b      	strb	r3, [r5, #0]
 8005778:	f10a 0301 	add.w	r3, sl, #1
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8241 	beq.w	8005c08 <_dtoa_r+0xb18>
 8005786:	601d      	str	r5, [r3, #0]
 8005788:	e23e      	b.n	8005c08 <_dtoa_r+0xb18>
 800578a:	f8cd a020 	str.w	sl, [sp, #32]
 800578e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005792:	2a39      	cmp	r2, #57	; 0x39
 8005794:	f105 33ff 	add.w	r3, r5, #4294967295
 8005798:	d108      	bne.n	80057ac <_dtoa_r+0x6bc>
 800579a:	459b      	cmp	fp, r3
 800579c:	d10a      	bne.n	80057b4 <_dtoa_r+0x6c4>
 800579e:	9b08      	ldr	r3, [sp, #32]
 80057a0:	3301      	adds	r3, #1
 80057a2:	9308      	str	r3, [sp, #32]
 80057a4:	2330      	movs	r3, #48	; 0x30
 80057a6:	f88b 3000 	strb.w	r3, [fp]
 80057aa:	465b      	mov	r3, fp
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	3201      	adds	r2, #1
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	e78c      	b.n	80056ce <_dtoa_r+0x5de>
 80057b4:	461d      	mov	r5, r3
 80057b6:	e7ea      	b.n	800578e <_dtoa_r+0x69e>
 80057b8:	2200      	movs	r2, #0
 80057ba:	4b9b      	ldr	r3, [pc, #620]	; (8005a28 <_dtoa_r+0x938>)
 80057bc:	f7fa fee8 	bl	8000590 <__aeabi_dmul>
 80057c0:	2200      	movs	r2, #0
 80057c2:	2300      	movs	r3, #0
 80057c4:	4606      	mov	r6, r0
 80057c6:	460f      	mov	r7, r1
 80057c8:	f7fb f94a 	bl	8000a60 <__aeabi_dcmpeq>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d09a      	beq.n	8005706 <_dtoa_r+0x616>
 80057d0:	e7cb      	b.n	800576a <_dtoa_r+0x67a>
 80057d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057d4:	2a00      	cmp	r2, #0
 80057d6:	f000 808b 	beq.w	80058f0 <_dtoa_r+0x800>
 80057da:	9a06      	ldr	r2, [sp, #24]
 80057dc:	2a01      	cmp	r2, #1
 80057de:	dc6e      	bgt.n	80058be <_dtoa_r+0x7ce>
 80057e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	d067      	beq.n	80058b6 <_dtoa_r+0x7c6>
 80057e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057ea:	9f07      	ldr	r7, [sp, #28]
 80057ec:	9d05      	ldr	r5, [sp, #20]
 80057ee:	9a05      	ldr	r2, [sp, #20]
 80057f0:	2101      	movs	r1, #1
 80057f2:	441a      	add	r2, r3
 80057f4:	4620      	mov	r0, r4
 80057f6:	9205      	str	r2, [sp, #20]
 80057f8:	4498      	add	r8, r3
 80057fa:	f000 fb26 	bl	8005e4a <__i2b>
 80057fe:	4606      	mov	r6, r0
 8005800:	2d00      	cmp	r5, #0
 8005802:	dd0c      	ble.n	800581e <_dtoa_r+0x72e>
 8005804:	f1b8 0f00 	cmp.w	r8, #0
 8005808:	dd09      	ble.n	800581e <_dtoa_r+0x72e>
 800580a:	4545      	cmp	r5, r8
 800580c:	9a05      	ldr	r2, [sp, #20]
 800580e:	462b      	mov	r3, r5
 8005810:	bfa8      	it	ge
 8005812:	4643      	movge	r3, r8
 8005814:	1ad2      	subs	r2, r2, r3
 8005816:	9205      	str	r2, [sp, #20]
 8005818:	1aed      	subs	r5, r5, r3
 800581a:	eba8 0803 	sub.w	r8, r8, r3
 800581e:	9b07      	ldr	r3, [sp, #28]
 8005820:	b1eb      	cbz	r3, 800585e <_dtoa_r+0x76e>
 8005822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005824:	2b00      	cmp	r3, #0
 8005826:	d067      	beq.n	80058f8 <_dtoa_r+0x808>
 8005828:	b18f      	cbz	r7, 800584e <_dtoa_r+0x75e>
 800582a:	4631      	mov	r1, r6
 800582c:	463a      	mov	r2, r7
 800582e:	4620      	mov	r0, r4
 8005830:	f000 fbaa 	bl	8005f88 <__pow5mult>
 8005834:	9a04      	ldr	r2, [sp, #16]
 8005836:	4601      	mov	r1, r0
 8005838:	4606      	mov	r6, r0
 800583a:	4620      	mov	r0, r4
 800583c:	f000 fb0e 	bl	8005e5c <__multiply>
 8005840:	9904      	ldr	r1, [sp, #16]
 8005842:	9008      	str	r0, [sp, #32]
 8005844:	4620      	mov	r0, r4
 8005846:	f000 fa60 	bl	8005d0a <_Bfree>
 800584a:	9b08      	ldr	r3, [sp, #32]
 800584c:	9304      	str	r3, [sp, #16]
 800584e:	9b07      	ldr	r3, [sp, #28]
 8005850:	1bda      	subs	r2, r3, r7
 8005852:	d004      	beq.n	800585e <_dtoa_r+0x76e>
 8005854:	9904      	ldr	r1, [sp, #16]
 8005856:	4620      	mov	r0, r4
 8005858:	f000 fb96 	bl	8005f88 <__pow5mult>
 800585c:	9004      	str	r0, [sp, #16]
 800585e:	2101      	movs	r1, #1
 8005860:	4620      	mov	r0, r4
 8005862:	f000 faf2 	bl	8005e4a <__i2b>
 8005866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005868:	4607      	mov	r7, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 81d0 	beq.w	8005c10 <_dtoa_r+0xb20>
 8005870:	461a      	mov	r2, r3
 8005872:	4601      	mov	r1, r0
 8005874:	4620      	mov	r0, r4
 8005876:	f000 fb87 	bl	8005f88 <__pow5mult>
 800587a:	9b06      	ldr	r3, [sp, #24]
 800587c:	2b01      	cmp	r3, #1
 800587e:	4607      	mov	r7, r0
 8005880:	dc40      	bgt.n	8005904 <_dtoa_r+0x814>
 8005882:	9b00      	ldr	r3, [sp, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d139      	bne.n	80058fc <_dtoa_r+0x80c>
 8005888:	9b01      	ldr	r3, [sp, #4]
 800588a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800588e:	2b00      	cmp	r3, #0
 8005890:	d136      	bne.n	8005900 <_dtoa_r+0x810>
 8005892:	9b01      	ldr	r3, [sp, #4]
 8005894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005898:	0d1b      	lsrs	r3, r3, #20
 800589a:	051b      	lsls	r3, r3, #20
 800589c:	b12b      	cbz	r3, 80058aa <_dtoa_r+0x7ba>
 800589e:	9b05      	ldr	r3, [sp, #20]
 80058a0:	3301      	adds	r3, #1
 80058a2:	9305      	str	r3, [sp, #20]
 80058a4:	f108 0801 	add.w	r8, r8, #1
 80058a8:	2301      	movs	r3, #1
 80058aa:	9307      	str	r3, [sp, #28]
 80058ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d12a      	bne.n	8005908 <_dtoa_r+0x818>
 80058b2:	2001      	movs	r0, #1
 80058b4:	e030      	b.n	8005918 <_dtoa_r+0x828>
 80058b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80058bc:	e795      	b.n	80057ea <_dtoa_r+0x6fa>
 80058be:	9b07      	ldr	r3, [sp, #28]
 80058c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80058c4:	42bb      	cmp	r3, r7
 80058c6:	bfbf      	itttt	lt
 80058c8:	9b07      	ldrlt	r3, [sp, #28]
 80058ca:	9707      	strlt	r7, [sp, #28]
 80058cc:	1afa      	sublt	r2, r7, r3
 80058ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80058d0:	bfbb      	ittet	lt
 80058d2:	189b      	addlt	r3, r3, r2
 80058d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80058d6:	1bdf      	subge	r7, r3, r7
 80058d8:	2700      	movlt	r7, #0
 80058da:	f1b9 0f00 	cmp.w	r9, #0
 80058de:	bfb5      	itete	lt
 80058e0:	9b05      	ldrlt	r3, [sp, #20]
 80058e2:	9d05      	ldrge	r5, [sp, #20]
 80058e4:	eba3 0509 	sublt.w	r5, r3, r9
 80058e8:	464b      	movge	r3, r9
 80058ea:	bfb8      	it	lt
 80058ec:	2300      	movlt	r3, #0
 80058ee:	e77e      	b.n	80057ee <_dtoa_r+0x6fe>
 80058f0:	9f07      	ldr	r7, [sp, #28]
 80058f2:	9d05      	ldr	r5, [sp, #20]
 80058f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80058f6:	e783      	b.n	8005800 <_dtoa_r+0x710>
 80058f8:	9a07      	ldr	r2, [sp, #28]
 80058fa:	e7ab      	b.n	8005854 <_dtoa_r+0x764>
 80058fc:	2300      	movs	r3, #0
 80058fe:	e7d4      	b.n	80058aa <_dtoa_r+0x7ba>
 8005900:	9b00      	ldr	r3, [sp, #0]
 8005902:	e7d2      	b.n	80058aa <_dtoa_r+0x7ba>
 8005904:	2300      	movs	r3, #0
 8005906:	9307      	str	r3, [sp, #28]
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800590e:	6918      	ldr	r0, [r3, #16]
 8005910:	f000 fa4d 	bl	8005dae <__hi0bits>
 8005914:	f1c0 0020 	rsb	r0, r0, #32
 8005918:	4440      	add	r0, r8
 800591a:	f010 001f 	ands.w	r0, r0, #31
 800591e:	d047      	beq.n	80059b0 <_dtoa_r+0x8c0>
 8005920:	f1c0 0320 	rsb	r3, r0, #32
 8005924:	2b04      	cmp	r3, #4
 8005926:	dd3b      	ble.n	80059a0 <_dtoa_r+0x8b0>
 8005928:	9b05      	ldr	r3, [sp, #20]
 800592a:	f1c0 001c 	rsb	r0, r0, #28
 800592e:	4403      	add	r3, r0
 8005930:	9305      	str	r3, [sp, #20]
 8005932:	4405      	add	r5, r0
 8005934:	4480      	add	r8, r0
 8005936:	9b05      	ldr	r3, [sp, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	dd05      	ble.n	8005948 <_dtoa_r+0x858>
 800593c:	461a      	mov	r2, r3
 800593e:	9904      	ldr	r1, [sp, #16]
 8005940:	4620      	mov	r0, r4
 8005942:	f000 fb6f 	bl	8006024 <__lshift>
 8005946:	9004      	str	r0, [sp, #16]
 8005948:	f1b8 0f00 	cmp.w	r8, #0
 800594c:	dd05      	ble.n	800595a <_dtoa_r+0x86a>
 800594e:	4639      	mov	r1, r7
 8005950:	4642      	mov	r2, r8
 8005952:	4620      	mov	r0, r4
 8005954:	f000 fb66 	bl	8006024 <__lshift>
 8005958:	4607      	mov	r7, r0
 800595a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800595c:	b353      	cbz	r3, 80059b4 <_dtoa_r+0x8c4>
 800595e:	4639      	mov	r1, r7
 8005960:	9804      	ldr	r0, [sp, #16]
 8005962:	f000 fbb3 	bl	80060cc <__mcmp>
 8005966:	2800      	cmp	r0, #0
 8005968:	da24      	bge.n	80059b4 <_dtoa_r+0x8c4>
 800596a:	2300      	movs	r3, #0
 800596c:	220a      	movs	r2, #10
 800596e:	9904      	ldr	r1, [sp, #16]
 8005970:	4620      	mov	r0, r4
 8005972:	f000 f9e1 	bl	8005d38 <__multadd>
 8005976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005978:	9004      	str	r0, [sp, #16]
 800597a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 814d 	beq.w	8005c1e <_dtoa_r+0xb2e>
 8005984:	2300      	movs	r3, #0
 8005986:	4631      	mov	r1, r6
 8005988:	220a      	movs	r2, #10
 800598a:	4620      	mov	r0, r4
 800598c:	f000 f9d4 	bl	8005d38 <__multadd>
 8005990:	9b02      	ldr	r3, [sp, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	4606      	mov	r6, r0
 8005996:	dc4f      	bgt.n	8005a38 <_dtoa_r+0x948>
 8005998:	9b06      	ldr	r3, [sp, #24]
 800599a:	2b02      	cmp	r3, #2
 800599c:	dd4c      	ble.n	8005a38 <_dtoa_r+0x948>
 800599e:	e011      	b.n	80059c4 <_dtoa_r+0x8d4>
 80059a0:	d0c9      	beq.n	8005936 <_dtoa_r+0x846>
 80059a2:	9a05      	ldr	r2, [sp, #20]
 80059a4:	331c      	adds	r3, #28
 80059a6:	441a      	add	r2, r3
 80059a8:	9205      	str	r2, [sp, #20]
 80059aa:	441d      	add	r5, r3
 80059ac:	4498      	add	r8, r3
 80059ae:	e7c2      	b.n	8005936 <_dtoa_r+0x846>
 80059b0:	4603      	mov	r3, r0
 80059b2:	e7f6      	b.n	80059a2 <_dtoa_r+0x8b2>
 80059b4:	f1b9 0f00 	cmp.w	r9, #0
 80059b8:	dc38      	bgt.n	8005a2c <_dtoa_r+0x93c>
 80059ba:	9b06      	ldr	r3, [sp, #24]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	dd35      	ble.n	8005a2c <_dtoa_r+0x93c>
 80059c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80059c4:	9b02      	ldr	r3, [sp, #8]
 80059c6:	b963      	cbnz	r3, 80059e2 <_dtoa_r+0x8f2>
 80059c8:	4639      	mov	r1, r7
 80059ca:	2205      	movs	r2, #5
 80059cc:	4620      	mov	r0, r4
 80059ce:	f000 f9b3 	bl	8005d38 <__multadd>
 80059d2:	4601      	mov	r1, r0
 80059d4:	4607      	mov	r7, r0
 80059d6:	9804      	ldr	r0, [sp, #16]
 80059d8:	f000 fb78 	bl	80060cc <__mcmp>
 80059dc:	2800      	cmp	r0, #0
 80059de:	f73f adcc 	bgt.w	800557a <_dtoa_r+0x48a>
 80059e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e4:	465d      	mov	r5, fp
 80059e6:	ea6f 0a03 	mvn.w	sl, r3
 80059ea:	f04f 0900 	mov.w	r9, #0
 80059ee:	4639      	mov	r1, r7
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 f98a 	bl	8005d0a <_Bfree>
 80059f6:	2e00      	cmp	r6, #0
 80059f8:	f43f aeb7 	beq.w	800576a <_dtoa_r+0x67a>
 80059fc:	f1b9 0f00 	cmp.w	r9, #0
 8005a00:	d005      	beq.n	8005a0e <_dtoa_r+0x91e>
 8005a02:	45b1      	cmp	r9, r6
 8005a04:	d003      	beq.n	8005a0e <_dtoa_r+0x91e>
 8005a06:	4649      	mov	r1, r9
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f000 f97e 	bl	8005d0a <_Bfree>
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4620      	mov	r0, r4
 8005a12:	f000 f97a 	bl	8005d0a <_Bfree>
 8005a16:	e6a8      	b.n	800576a <_dtoa_r+0x67a>
 8005a18:	2700      	movs	r7, #0
 8005a1a:	463e      	mov	r6, r7
 8005a1c:	e7e1      	b.n	80059e2 <_dtoa_r+0x8f2>
 8005a1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005a22:	463e      	mov	r6, r7
 8005a24:	e5a9      	b.n	800557a <_dtoa_r+0x48a>
 8005a26:	bf00      	nop
 8005a28:	40240000 	.word	0x40240000
 8005a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 80fa 	beq.w	8005c2c <_dtoa_r+0xb3c>
 8005a38:	2d00      	cmp	r5, #0
 8005a3a:	dd05      	ble.n	8005a48 <_dtoa_r+0x958>
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	462a      	mov	r2, r5
 8005a40:	4620      	mov	r0, r4
 8005a42:	f000 faef 	bl	8006024 <__lshift>
 8005a46:	4606      	mov	r6, r0
 8005a48:	9b07      	ldr	r3, [sp, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d04c      	beq.n	8005ae8 <_dtoa_r+0x9f8>
 8005a4e:	6871      	ldr	r1, [r6, #4]
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 f926 	bl	8005ca2 <_Balloc>
 8005a56:	6932      	ldr	r2, [r6, #16]
 8005a58:	3202      	adds	r2, #2
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	0092      	lsls	r2, r2, #2
 8005a5e:	f106 010c 	add.w	r1, r6, #12
 8005a62:	300c      	adds	r0, #12
 8005a64:	f000 f912 	bl	8005c8c <memcpy>
 8005a68:	2201      	movs	r2, #1
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 fad9 	bl	8006024 <__lshift>
 8005a72:	9b00      	ldr	r3, [sp, #0]
 8005a74:	f8cd b014 	str.w	fp, [sp, #20]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	46b1      	mov	r9, r6
 8005a7e:	9307      	str	r3, [sp, #28]
 8005a80:	4606      	mov	r6, r0
 8005a82:	4639      	mov	r1, r7
 8005a84:	9804      	ldr	r0, [sp, #16]
 8005a86:	f7ff faa4 	bl	8004fd2 <quorem>
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a92:	9804      	ldr	r0, [sp, #16]
 8005a94:	f000 fb1a 	bl	80060cc <__mcmp>
 8005a98:	4632      	mov	r2, r6
 8005a9a:	9000      	str	r0, [sp, #0]
 8005a9c:	4639      	mov	r1, r7
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 fb2e 	bl	8006100 <__mdiff>
 8005aa4:	68c3      	ldr	r3, [r0, #12]
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	bb03      	cbnz	r3, 8005aec <_dtoa_r+0x9fc>
 8005aaa:	4601      	mov	r1, r0
 8005aac:	9008      	str	r0, [sp, #32]
 8005aae:	9804      	ldr	r0, [sp, #16]
 8005ab0:	f000 fb0c 	bl	80060cc <__mcmp>
 8005ab4:	9a08      	ldr	r2, [sp, #32]
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4620      	mov	r0, r4
 8005abc:	9308      	str	r3, [sp, #32]
 8005abe:	f000 f924 	bl	8005d0a <_Bfree>
 8005ac2:	9b08      	ldr	r3, [sp, #32]
 8005ac4:	b9a3      	cbnz	r3, 8005af0 <_dtoa_r+0xa00>
 8005ac6:	9a06      	ldr	r2, [sp, #24]
 8005ac8:	b992      	cbnz	r2, 8005af0 <_dtoa_r+0xa00>
 8005aca:	9a07      	ldr	r2, [sp, #28]
 8005acc:	b982      	cbnz	r2, 8005af0 <_dtoa_r+0xa00>
 8005ace:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ad2:	d029      	beq.n	8005b28 <_dtoa_r+0xa38>
 8005ad4:	9b00      	ldr	r3, [sp, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	dd01      	ble.n	8005ade <_dtoa_r+0x9ee>
 8005ada:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005ade:	9b05      	ldr	r3, [sp, #20]
 8005ae0:	1c5d      	adds	r5, r3, #1
 8005ae2:	f883 8000 	strb.w	r8, [r3]
 8005ae6:	e782      	b.n	80059ee <_dtoa_r+0x8fe>
 8005ae8:	4630      	mov	r0, r6
 8005aea:	e7c2      	b.n	8005a72 <_dtoa_r+0x982>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e7e3      	b.n	8005ab8 <_dtoa_r+0x9c8>
 8005af0:	9a00      	ldr	r2, [sp, #0]
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	db04      	blt.n	8005b00 <_dtoa_r+0xa10>
 8005af6:	d125      	bne.n	8005b44 <_dtoa_r+0xa54>
 8005af8:	9a06      	ldr	r2, [sp, #24]
 8005afa:	bb1a      	cbnz	r2, 8005b44 <_dtoa_r+0xa54>
 8005afc:	9a07      	ldr	r2, [sp, #28]
 8005afe:	bb0a      	cbnz	r2, 8005b44 <_dtoa_r+0xa54>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	ddec      	ble.n	8005ade <_dtoa_r+0x9ee>
 8005b04:	2201      	movs	r2, #1
 8005b06:	9904      	ldr	r1, [sp, #16]
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 fa8b 	bl	8006024 <__lshift>
 8005b0e:	4639      	mov	r1, r7
 8005b10:	9004      	str	r0, [sp, #16]
 8005b12:	f000 fadb 	bl	80060cc <__mcmp>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	dc03      	bgt.n	8005b22 <_dtoa_r+0xa32>
 8005b1a:	d1e0      	bne.n	8005ade <_dtoa_r+0x9ee>
 8005b1c:	f018 0f01 	tst.w	r8, #1
 8005b20:	d0dd      	beq.n	8005ade <_dtoa_r+0x9ee>
 8005b22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b26:	d1d8      	bne.n	8005ada <_dtoa_r+0x9ea>
 8005b28:	9b05      	ldr	r3, [sp, #20]
 8005b2a:	9a05      	ldr	r2, [sp, #20]
 8005b2c:	1c5d      	adds	r5, r3, #1
 8005b2e:	2339      	movs	r3, #57	; 0x39
 8005b30:	7013      	strb	r3, [r2, #0]
 8005b32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b36:	2b39      	cmp	r3, #57	; 0x39
 8005b38:	f105 32ff 	add.w	r2, r5, #4294967295
 8005b3c:	d04f      	beq.n	8005bde <_dtoa_r+0xaee>
 8005b3e:	3301      	adds	r3, #1
 8005b40:	7013      	strb	r3, [r2, #0]
 8005b42:	e754      	b.n	80059ee <_dtoa_r+0x8fe>
 8005b44:	9a05      	ldr	r2, [sp, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f102 0501 	add.w	r5, r2, #1
 8005b4c:	dd06      	ble.n	8005b5c <_dtoa_r+0xa6c>
 8005b4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b52:	d0e9      	beq.n	8005b28 <_dtoa_r+0xa38>
 8005b54:	f108 0801 	add.w	r8, r8, #1
 8005b58:	9b05      	ldr	r3, [sp, #20]
 8005b5a:	e7c2      	b.n	8005ae2 <_dtoa_r+0x9f2>
 8005b5c:	9a02      	ldr	r2, [sp, #8]
 8005b5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005b62:	eba5 030b 	sub.w	r3, r5, fp
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d021      	beq.n	8005bae <_dtoa_r+0xabe>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	220a      	movs	r2, #10
 8005b6e:	9904      	ldr	r1, [sp, #16]
 8005b70:	4620      	mov	r0, r4
 8005b72:	f000 f8e1 	bl	8005d38 <__multadd>
 8005b76:	45b1      	cmp	r9, r6
 8005b78:	9004      	str	r0, [sp, #16]
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	f04f 020a 	mov.w	r2, #10
 8005b82:	4649      	mov	r1, r9
 8005b84:	4620      	mov	r0, r4
 8005b86:	d105      	bne.n	8005b94 <_dtoa_r+0xaa4>
 8005b88:	f000 f8d6 	bl	8005d38 <__multadd>
 8005b8c:	4681      	mov	r9, r0
 8005b8e:	4606      	mov	r6, r0
 8005b90:	9505      	str	r5, [sp, #20]
 8005b92:	e776      	b.n	8005a82 <_dtoa_r+0x992>
 8005b94:	f000 f8d0 	bl	8005d38 <__multadd>
 8005b98:	4631      	mov	r1, r6
 8005b9a:	4681      	mov	r9, r0
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	220a      	movs	r2, #10
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f000 f8c9 	bl	8005d38 <__multadd>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	e7f2      	b.n	8005b90 <_dtoa_r+0xaa0>
 8005baa:	f04f 0900 	mov.w	r9, #0
 8005bae:	2201      	movs	r2, #1
 8005bb0:	9904      	ldr	r1, [sp, #16]
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f000 fa36 	bl	8006024 <__lshift>
 8005bb8:	4639      	mov	r1, r7
 8005bba:	9004      	str	r0, [sp, #16]
 8005bbc:	f000 fa86 	bl	80060cc <__mcmp>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	dcb6      	bgt.n	8005b32 <_dtoa_r+0xa42>
 8005bc4:	d102      	bne.n	8005bcc <_dtoa_r+0xadc>
 8005bc6:	f018 0f01 	tst.w	r8, #1
 8005bca:	d1b2      	bne.n	8005b32 <_dtoa_r+0xa42>
 8005bcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bd0:	2b30      	cmp	r3, #48	; 0x30
 8005bd2:	f105 32ff 	add.w	r2, r5, #4294967295
 8005bd6:	f47f af0a 	bne.w	80059ee <_dtoa_r+0x8fe>
 8005bda:	4615      	mov	r5, r2
 8005bdc:	e7f6      	b.n	8005bcc <_dtoa_r+0xadc>
 8005bde:	4593      	cmp	fp, r2
 8005be0:	d105      	bne.n	8005bee <_dtoa_r+0xafe>
 8005be2:	2331      	movs	r3, #49	; 0x31
 8005be4:	f10a 0a01 	add.w	sl, sl, #1
 8005be8:	f88b 3000 	strb.w	r3, [fp]
 8005bec:	e6ff      	b.n	80059ee <_dtoa_r+0x8fe>
 8005bee:	4615      	mov	r5, r2
 8005bf0:	e79f      	b.n	8005b32 <_dtoa_r+0xa42>
 8005bf2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005c58 <_dtoa_r+0xb68>
 8005bf6:	e007      	b.n	8005c08 <_dtoa_r+0xb18>
 8005bf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bfa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005c5c <_dtoa_r+0xb6c>
 8005bfe:	b11b      	cbz	r3, 8005c08 <_dtoa_r+0xb18>
 8005c00:	f10b 0308 	add.w	r3, fp, #8
 8005c04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	4658      	mov	r0, fp
 8005c0a:	b017      	add	sp, #92	; 0x5c
 8005c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c10:	9b06      	ldr	r3, [sp, #24]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	f77f ae35 	ble.w	8005882 <_dtoa_r+0x792>
 8005c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c1a:	9307      	str	r3, [sp, #28]
 8005c1c:	e649      	b.n	80058b2 <_dtoa_r+0x7c2>
 8005c1e:	9b02      	ldr	r3, [sp, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dc03      	bgt.n	8005c2c <_dtoa_r+0xb3c>
 8005c24:	9b06      	ldr	r3, [sp, #24]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	f73f aecc 	bgt.w	80059c4 <_dtoa_r+0x8d4>
 8005c2c:	465d      	mov	r5, fp
 8005c2e:	4639      	mov	r1, r7
 8005c30:	9804      	ldr	r0, [sp, #16]
 8005c32:	f7ff f9ce 	bl	8004fd2 <quorem>
 8005c36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005c3a:	f805 8b01 	strb.w	r8, [r5], #1
 8005c3e:	9a02      	ldr	r2, [sp, #8]
 8005c40:	eba5 030b 	sub.w	r3, r5, fp
 8005c44:	429a      	cmp	r2, r3
 8005c46:	ddb0      	ble.n	8005baa <_dtoa_r+0xaba>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	220a      	movs	r2, #10
 8005c4c:	9904      	ldr	r1, [sp, #16]
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f000 f872 	bl	8005d38 <__multadd>
 8005c54:	9004      	str	r0, [sp, #16]
 8005c56:	e7ea      	b.n	8005c2e <_dtoa_r+0xb3e>
 8005c58:	08006a38 	.word	0x08006a38
 8005c5c:	08006a3a 	.word	0x08006a3a

08005c60 <_localeconv_r>:
 8005c60:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <_localeconv_r+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6a18      	ldr	r0, [r3, #32]
 8005c66:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <_localeconv_r+0x18>)
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	bf08      	it	eq
 8005c6c:	4618      	moveq	r0, r3
 8005c6e:	30f0      	adds	r0, #240	; 0xf0
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	2000000c 	.word	0x2000000c
 8005c78:	20000070 	.word	0x20000070

08005c7c <malloc>:
 8005c7c:	4b02      	ldr	r3, [pc, #8]	; (8005c88 <malloc+0xc>)
 8005c7e:	4601      	mov	r1, r0
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	f000 baf7 	b.w	8006274 <_malloc_r>
 8005c86:	bf00      	nop
 8005c88:	2000000c 	.word	0x2000000c

08005c8c <memcpy>:
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	1e43      	subs	r3, r0, #1
 8005c90:	440a      	add	r2, r1
 8005c92:	4291      	cmp	r1, r2
 8005c94:	d100      	bne.n	8005c98 <memcpy+0xc>
 8005c96:	bd10      	pop	{r4, pc}
 8005c98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ca0:	e7f7      	b.n	8005c92 <memcpy+0x6>

08005ca2 <_Balloc>:
 8005ca2:	b570      	push	{r4, r5, r6, lr}
 8005ca4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	460e      	mov	r6, r1
 8005caa:	b93d      	cbnz	r5, 8005cbc <_Balloc+0x1a>
 8005cac:	2010      	movs	r0, #16
 8005cae:	f7ff ffe5 	bl	8005c7c <malloc>
 8005cb2:	6260      	str	r0, [r4, #36]	; 0x24
 8005cb4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cb8:	6005      	str	r5, [r0, #0]
 8005cba:	60c5      	str	r5, [r0, #12]
 8005cbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005cbe:	68eb      	ldr	r3, [r5, #12]
 8005cc0:	b183      	cbz	r3, 8005ce4 <_Balloc+0x42>
 8005cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005cca:	b9b8      	cbnz	r0, 8005cfc <_Balloc+0x5a>
 8005ccc:	2101      	movs	r1, #1
 8005cce:	fa01 f506 	lsl.w	r5, r1, r6
 8005cd2:	1d6a      	adds	r2, r5, #5
 8005cd4:	0092      	lsls	r2, r2, #2
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 fabe 	bl	8006258 <_calloc_r>
 8005cdc:	b160      	cbz	r0, 8005cf8 <_Balloc+0x56>
 8005cde:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005ce2:	e00e      	b.n	8005d02 <_Balloc+0x60>
 8005ce4:	2221      	movs	r2, #33	; 0x21
 8005ce6:	2104      	movs	r1, #4
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 fab5 	bl	8006258 <_calloc_r>
 8005cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cf0:	60e8      	str	r0, [r5, #12]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e4      	bne.n	8005cc2 <_Balloc+0x20>
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}
 8005cfc:	6802      	ldr	r2, [r0, #0]
 8005cfe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005d02:	2300      	movs	r3, #0
 8005d04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d08:	e7f7      	b.n	8005cfa <_Balloc+0x58>

08005d0a <_Bfree>:
 8005d0a:	b570      	push	{r4, r5, r6, lr}
 8005d0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d0e:	4606      	mov	r6, r0
 8005d10:	460d      	mov	r5, r1
 8005d12:	b93c      	cbnz	r4, 8005d24 <_Bfree+0x1a>
 8005d14:	2010      	movs	r0, #16
 8005d16:	f7ff ffb1 	bl	8005c7c <malloc>
 8005d1a:	6270      	str	r0, [r6, #36]	; 0x24
 8005d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d20:	6004      	str	r4, [r0, #0]
 8005d22:	60c4      	str	r4, [r0, #12]
 8005d24:	b13d      	cbz	r5, 8005d36 <_Bfree+0x2c>
 8005d26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005d28:	686a      	ldr	r2, [r5, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d30:	6029      	str	r1, [r5, #0]
 8005d32:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005d36:	bd70      	pop	{r4, r5, r6, pc}

08005d38 <__multadd>:
 8005d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3c:	690d      	ldr	r5, [r1, #16]
 8005d3e:	461f      	mov	r7, r3
 8005d40:	4606      	mov	r6, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	f101 0c14 	add.w	ip, r1, #20
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f8dc 0000 	ldr.w	r0, [ip]
 8005d4e:	b281      	uxth	r1, r0
 8005d50:	fb02 7101 	mla	r1, r2, r1, r7
 8005d54:	0c0f      	lsrs	r7, r1, #16
 8005d56:	0c00      	lsrs	r0, r0, #16
 8005d58:	fb02 7000 	mla	r0, r2, r0, r7
 8005d5c:	b289      	uxth	r1, r1
 8005d5e:	3301      	adds	r3, #1
 8005d60:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005d64:	429d      	cmp	r5, r3
 8005d66:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005d6a:	f84c 1b04 	str.w	r1, [ip], #4
 8005d6e:	dcec      	bgt.n	8005d4a <__multadd+0x12>
 8005d70:	b1d7      	cbz	r7, 8005da8 <__multadd+0x70>
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	42ab      	cmp	r3, r5
 8005d76:	dc12      	bgt.n	8005d9e <__multadd+0x66>
 8005d78:	6861      	ldr	r1, [r4, #4]
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	3101      	adds	r1, #1
 8005d7e:	f7ff ff90 	bl	8005ca2 <_Balloc>
 8005d82:	6922      	ldr	r2, [r4, #16]
 8005d84:	3202      	adds	r2, #2
 8005d86:	f104 010c 	add.w	r1, r4, #12
 8005d8a:	4680      	mov	r8, r0
 8005d8c:	0092      	lsls	r2, r2, #2
 8005d8e:	300c      	adds	r0, #12
 8005d90:	f7ff ff7c 	bl	8005c8c <memcpy>
 8005d94:	4621      	mov	r1, r4
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff ffb7 	bl	8005d0a <_Bfree>
 8005d9c:	4644      	mov	r4, r8
 8005d9e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005da2:	3501      	adds	r5, #1
 8005da4:	615f      	str	r7, [r3, #20]
 8005da6:	6125      	str	r5, [r4, #16]
 8005da8:	4620      	mov	r0, r4
 8005daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005dae <__hi0bits>:
 8005dae:	0c02      	lsrs	r2, r0, #16
 8005db0:	0412      	lsls	r2, r2, #16
 8005db2:	4603      	mov	r3, r0
 8005db4:	b9b2      	cbnz	r2, 8005de4 <__hi0bits+0x36>
 8005db6:	0403      	lsls	r3, r0, #16
 8005db8:	2010      	movs	r0, #16
 8005dba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005dbe:	bf04      	itt	eq
 8005dc0:	021b      	lsleq	r3, r3, #8
 8005dc2:	3008      	addeq	r0, #8
 8005dc4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005dc8:	bf04      	itt	eq
 8005dca:	011b      	lsleq	r3, r3, #4
 8005dcc:	3004      	addeq	r0, #4
 8005dce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005dd2:	bf04      	itt	eq
 8005dd4:	009b      	lsleq	r3, r3, #2
 8005dd6:	3002      	addeq	r0, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	db06      	blt.n	8005dea <__hi0bits+0x3c>
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	d503      	bpl.n	8005de8 <__hi0bits+0x3a>
 8005de0:	3001      	adds	r0, #1
 8005de2:	4770      	bx	lr
 8005de4:	2000      	movs	r0, #0
 8005de6:	e7e8      	b.n	8005dba <__hi0bits+0xc>
 8005de8:	2020      	movs	r0, #32
 8005dea:	4770      	bx	lr

08005dec <__lo0bits>:
 8005dec:	6803      	ldr	r3, [r0, #0]
 8005dee:	f013 0207 	ands.w	r2, r3, #7
 8005df2:	4601      	mov	r1, r0
 8005df4:	d00b      	beq.n	8005e0e <__lo0bits+0x22>
 8005df6:	07da      	lsls	r2, r3, #31
 8005df8:	d423      	bmi.n	8005e42 <__lo0bits+0x56>
 8005dfa:	0798      	lsls	r0, r3, #30
 8005dfc:	bf49      	itett	mi
 8005dfe:	085b      	lsrmi	r3, r3, #1
 8005e00:	089b      	lsrpl	r3, r3, #2
 8005e02:	2001      	movmi	r0, #1
 8005e04:	600b      	strmi	r3, [r1, #0]
 8005e06:	bf5c      	itt	pl
 8005e08:	600b      	strpl	r3, [r1, #0]
 8005e0a:	2002      	movpl	r0, #2
 8005e0c:	4770      	bx	lr
 8005e0e:	b298      	uxth	r0, r3
 8005e10:	b9a8      	cbnz	r0, 8005e3e <__lo0bits+0x52>
 8005e12:	0c1b      	lsrs	r3, r3, #16
 8005e14:	2010      	movs	r0, #16
 8005e16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e1a:	bf04      	itt	eq
 8005e1c:	0a1b      	lsreq	r3, r3, #8
 8005e1e:	3008      	addeq	r0, #8
 8005e20:	071a      	lsls	r2, r3, #28
 8005e22:	bf04      	itt	eq
 8005e24:	091b      	lsreq	r3, r3, #4
 8005e26:	3004      	addeq	r0, #4
 8005e28:	079a      	lsls	r2, r3, #30
 8005e2a:	bf04      	itt	eq
 8005e2c:	089b      	lsreq	r3, r3, #2
 8005e2e:	3002      	addeq	r0, #2
 8005e30:	07da      	lsls	r2, r3, #31
 8005e32:	d402      	bmi.n	8005e3a <__lo0bits+0x4e>
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	d006      	beq.n	8005e46 <__lo0bits+0x5a>
 8005e38:	3001      	adds	r0, #1
 8005e3a:	600b      	str	r3, [r1, #0]
 8005e3c:	4770      	bx	lr
 8005e3e:	4610      	mov	r0, r2
 8005e40:	e7e9      	b.n	8005e16 <__lo0bits+0x2a>
 8005e42:	2000      	movs	r0, #0
 8005e44:	4770      	bx	lr
 8005e46:	2020      	movs	r0, #32
 8005e48:	4770      	bx	lr

08005e4a <__i2b>:
 8005e4a:	b510      	push	{r4, lr}
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	2101      	movs	r1, #1
 8005e50:	f7ff ff27 	bl	8005ca2 <_Balloc>
 8005e54:	2201      	movs	r2, #1
 8005e56:	6144      	str	r4, [r0, #20]
 8005e58:	6102      	str	r2, [r0, #16]
 8005e5a:	bd10      	pop	{r4, pc}

08005e5c <__multiply>:
 8005e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e60:	4614      	mov	r4, r2
 8005e62:	690a      	ldr	r2, [r1, #16]
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	bfb8      	it	lt
 8005e6a:	460b      	movlt	r3, r1
 8005e6c:	4688      	mov	r8, r1
 8005e6e:	bfbc      	itt	lt
 8005e70:	46a0      	movlt	r8, r4
 8005e72:	461c      	movlt	r4, r3
 8005e74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005e78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005e84:	eb07 0609 	add.w	r6, r7, r9
 8005e88:	42b3      	cmp	r3, r6
 8005e8a:	bfb8      	it	lt
 8005e8c:	3101      	addlt	r1, #1
 8005e8e:	f7ff ff08 	bl	8005ca2 <_Balloc>
 8005e92:	f100 0514 	add.w	r5, r0, #20
 8005e96:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	4573      	cmp	r3, lr
 8005ea0:	d316      	bcc.n	8005ed0 <__multiply+0x74>
 8005ea2:	f104 0214 	add.w	r2, r4, #20
 8005ea6:	f108 0114 	add.w	r1, r8, #20
 8005eaa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005eae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	9b00      	ldr	r3, [sp, #0]
 8005eb6:	9201      	str	r2, [sp, #4]
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d80c      	bhi.n	8005ed6 <__multiply+0x7a>
 8005ebc:	2e00      	cmp	r6, #0
 8005ebe:	dd03      	ble.n	8005ec8 <__multiply+0x6c>
 8005ec0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d05d      	beq.n	8005f84 <__multiply+0x128>
 8005ec8:	6106      	str	r6, [r0, #16]
 8005eca:	b003      	add	sp, #12
 8005ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed0:	f843 2b04 	str.w	r2, [r3], #4
 8005ed4:	e7e3      	b.n	8005e9e <__multiply+0x42>
 8005ed6:	f8b2 b000 	ldrh.w	fp, [r2]
 8005eda:	f1bb 0f00 	cmp.w	fp, #0
 8005ede:	d023      	beq.n	8005f28 <__multiply+0xcc>
 8005ee0:	4689      	mov	r9, r1
 8005ee2:	46ac      	mov	ip, r5
 8005ee4:	f04f 0800 	mov.w	r8, #0
 8005ee8:	f859 4b04 	ldr.w	r4, [r9], #4
 8005eec:	f8dc a000 	ldr.w	sl, [ip]
 8005ef0:	b2a3      	uxth	r3, r4
 8005ef2:	fa1f fa8a 	uxth.w	sl, sl
 8005ef6:	fb0b a303 	mla	r3, fp, r3, sl
 8005efa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005efe:	f8dc 4000 	ldr.w	r4, [ip]
 8005f02:	4443      	add	r3, r8
 8005f04:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f08:	fb0b 840a 	mla	r4, fp, sl, r8
 8005f0c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005f10:	46e2      	mov	sl, ip
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005f18:	454f      	cmp	r7, r9
 8005f1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f1e:	f84a 3b04 	str.w	r3, [sl], #4
 8005f22:	d82b      	bhi.n	8005f7c <__multiply+0x120>
 8005f24:	f8cc 8004 	str.w	r8, [ip, #4]
 8005f28:	9b01      	ldr	r3, [sp, #4]
 8005f2a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005f2e:	3204      	adds	r2, #4
 8005f30:	f1ba 0f00 	cmp.w	sl, #0
 8005f34:	d020      	beq.n	8005f78 <__multiply+0x11c>
 8005f36:	682b      	ldr	r3, [r5, #0]
 8005f38:	4689      	mov	r9, r1
 8005f3a:	46a8      	mov	r8, r5
 8005f3c:	f04f 0b00 	mov.w	fp, #0
 8005f40:	f8b9 c000 	ldrh.w	ip, [r9]
 8005f44:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005f48:	fb0a 440c 	mla	r4, sl, ip, r4
 8005f4c:	445c      	add	r4, fp
 8005f4e:	46c4      	mov	ip, r8
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005f56:	f84c 3b04 	str.w	r3, [ip], #4
 8005f5a:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f5e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005f62:	0c1b      	lsrs	r3, r3, #16
 8005f64:	fb0a b303 	mla	r3, sl, r3, fp
 8005f68:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005f6c:	454f      	cmp	r7, r9
 8005f6e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005f72:	d805      	bhi.n	8005f80 <__multiply+0x124>
 8005f74:	f8c8 3004 	str.w	r3, [r8, #4]
 8005f78:	3504      	adds	r5, #4
 8005f7a:	e79b      	b.n	8005eb4 <__multiply+0x58>
 8005f7c:	46d4      	mov	ip, sl
 8005f7e:	e7b3      	b.n	8005ee8 <__multiply+0x8c>
 8005f80:	46e0      	mov	r8, ip
 8005f82:	e7dd      	b.n	8005f40 <__multiply+0xe4>
 8005f84:	3e01      	subs	r6, #1
 8005f86:	e799      	b.n	8005ebc <__multiply+0x60>

08005f88 <__pow5mult>:
 8005f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	4615      	mov	r5, r2
 8005f8e:	f012 0203 	ands.w	r2, r2, #3
 8005f92:	4606      	mov	r6, r0
 8005f94:	460f      	mov	r7, r1
 8005f96:	d007      	beq.n	8005fa8 <__pow5mult+0x20>
 8005f98:	3a01      	subs	r2, #1
 8005f9a:	4c21      	ldr	r4, [pc, #132]	; (8006020 <__pow5mult+0x98>)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fa2:	f7ff fec9 	bl	8005d38 <__multadd>
 8005fa6:	4607      	mov	r7, r0
 8005fa8:	10ad      	asrs	r5, r5, #2
 8005faa:	d035      	beq.n	8006018 <__pow5mult+0x90>
 8005fac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005fae:	b93c      	cbnz	r4, 8005fc0 <__pow5mult+0x38>
 8005fb0:	2010      	movs	r0, #16
 8005fb2:	f7ff fe63 	bl	8005c7c <malloc>
 8005fb6:	6270      	str	r0, [r6, #36]	; 0x24
 8005fb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fbc:	6004      	str	r4, [r0, #0]
 8005fbe:	60c4      	str	r4, [r0, #12]
 8005fc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fc8:	b94c      	cbnz	r4, 8005fde <__pow5mult+0x56>
 8005fca:	f240 2171 	movw	r1, #625	; 0x271
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f7ff ff3b 	bl	8005e4a <__i2b>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fda:	4604      	mov	r4, r0
 8005fdc:	6003      	str	r3, [r0, #0]
 8005fde:	f04f 0800 	mov.w	r8, #0
 8005fe2:	07eb      	lsls	r3, r5, #31
 8005fe4:	d50a      	bpl.n	8005ffc <__pow5mult+0x74>
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	4622      	mov	r2, r4
 8005fea:	4630      	mov	r0, r6
 8005fec:	f7ff ff36 	bl	8005e5c <__multiply>
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	4681      	mov	r9, r0
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f7ff fe88 	bl	8005d0a <_Bfree>
 8005ffa:	464f      	mov	r7, r9
 8005ffc:	106d      	asrs	r5, r5, #1
 8005ffe:	d00b      	beq.n	8006018 <__pow5mult+0x90>
 8006000:	6820      	ldr	r0, [r4, #0]
 8006002:	b938      	cbnz	r0, 8006014 <__pow5mult+0x8c>
 8006004:	4622      	mov	r2, r4
 8006006:	4621      	mov	r1, r4
 8006008:	4630      	mov	r0, r6
 800600a:	f7ff ff27 	bl	8005e5c <__multiply>
 800600e:	6020      	str	r0, [r4, #0]
 8006010:	f8c0 8000 	str.w	r8, [r0]
 8006014:	4604      	mov	r4, r0
 8006016:	e7e4      	b.n	8005fe2 <__pow5mult+0x5a>
 8006018:	4638      	mov	r0, r7
 800601a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800601e:	bf00      	nop
 8006020:	08006b38 	.word	0x08006b38

08006024 <__lshift>:
 8006024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006028:	460c      	mov	r4, r1
 800602a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800602e:	6923      	ldr	r3, [r4, #16]
 8006030:	6849      	ldr	r1, [r1, #4]
 8006032:	eb0a 0903 	add.w	r9, sl, r3
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	4607      	mov	r7, r0
 800603a:	4616      	mov	r6, r2
 800603c:	f109 0501 	add.w	r5, r9, #1
 8006040:	42ab      	cmp	r3, r5
 8006042:	db32      	blt.n	80060aa <__lshift+0x86>
 8006044:	4638      	mov	r0, r7
 8006046:	f7ff fe2c 	bl	8005ca2 <_Balloc>
 800604a:	2300      	movs	r3, #0
 800604c:	4680      	mov	r8, r0
 800604e:	f100 0114 	add.w	r1, r0, #20
 8006052:	461a      	mov	r2, r3
 8006054:	4553      	cmp	r3, sl
 8006056:	db2b      	blt.n	80060b0 <__lshift+0x8c>
 8006058:	6920      	ldr	r0, [r4, #16]
 800605a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800605e:	f104 0314 	add.w	r3, r4, #20
 8006062:	f016 021f 	ands.w	r2, r6, #31
 8006066:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800606a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800606e:	d025      	beq.n	80060bc <__lshift+0x98>
 8006070:	f1c2 0e20 	rsb	lr, r2, #32
 8006074:	2000      	movs	r0, #0
 8006076:	681e      	ldr	r6, [r3, #0]
 8006078:	468a      	mov	sl, r1
 800607a:	4096      	lsls	r6, r2
 800607c:	4330      	orrs	r0, r6
 800607e:	f84a 0b04 	str.w	r0, [sl], #4
 8006082:	f853 0b04 	ldr.w	r0, [r3], #4
 8006086:	459c      	cmp	ip, r3
 8006088:	fa20 f00e 	lsr.w	r0, r0, lr
 800608c:	d814      	bhi.n	80060b8 <__lshift+0x94>
 800608e:	6048      	str	r0, [r1, #4]
 8006090:	b108      	cbz	r0, 8006096 <__lshift+0x72>
 8006092:	f109 0502 	add.w	r5, r9, #2
 8006096:	3d01      	subs	r5, #1
 8006098:	4638      	mov	r0, r7
 800609a:	f8c8 5010 	str.w	r5, [r8, #16]
 800609e:	4621      	mov	r1, r4
 80060a0:	f7ff fe33 	bl	8005d0a <_Bfree>
 80060a4:	4640      	mov	r0, r8
 80060a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060aa:	3101      	adds	r1, #1
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	e7c7      	b.n	8006040 <__lshift+0x1c>
 80060b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80060b4:	3301      	adds	r3, #1
 80060b6:	e7cd      	b.n	8006054 <__lshift+0x30>
 80060b8:	4651      	mov	r1, sl
 80060ba:	e7dc      	b.n	8006076 <__lshift+0x52>
 80060bc:	3904      	subs	r1, #4
 80060be:	f853 2b04 	ldr.w	r2, [r3], #4
 80060c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80060c6:	459c      	cmp	ip, r3
 80060c8:	d8f9      	bhi.n	80060be <__lshift+0x9a>
 80060ca:	e7e4      	b.n	8006096 <__lshift+0x72>

080060cc <__mcmp>:
 80060cc:	6903      	ldr	r3, [r0, #16]
 80060ce:	690a      	ldr	r2, [r1, #16]
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	b530      	push	{r4, r5, lr}
 80060d4:	d10c      	bne.n	80060f0 <__mcmp+0x24>
 80060d6:	0092      	lsls	r2, r2, #2
 80060d8:	3014      	adds	r0, #20
 80060da:	3114      	adds	r1, #20
 80060dc:	1884      	adds	r4, r0, r2
 80060de:	4411      	add	r1, r2
 80060e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80060e8:	4295      	cmp	r5, r2
 80060ea:	d003      	beq.n	80060f4 <__mcmp+0x28>
 80060ec:	d305      	bcc.n	80060fa <__mcmp+0x2e>
 80060ee:	2301      	movs	r3, #1
 80060f0:	4618      	mov	r0, r3
 80060f2:	bd30      	pop	{r4, r5, pc}
 80060f4:	42a0      	cmp	r0, r4
 80060f6:	d3f3      	bcc.n	80060e0 <__mcmp+0x14>
 80060f8:	e7fa      	b.n	80060f0 <__mcmp+0x24>
 80060fa:	f04f 33ff 	mov.w	r3, #4294967295
 80060fe:	e7f7      	b.n	80060f0 <__mcmp+0x24>

08006100 <__mdiff>:
 8006100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	460d      	mov	r5, r1
 8006106:	4607      	mov	r7, r0
 8006108:	4611      	mov	r1, r2
 800610a:	4628      	mov	r0, r5
 800610c:	4614      	mov	r4, r2
 800610e:	f7ff ffdd 	bl	80060cc <__mcmp>
 8006112:	1e06      	subs	r6, r0, #0
 8006114:	d108      	bne.n	8006128 <__mdiff+0x28>
 8006116:	4631      	mov	r1, r6
 8006118:	4638      	mov	r0, r7
 800611a:	f7ff fdc2 	bl	8005ca2 <_Balloc>
 800611e:	2301      	movs	r3, #1
 8006120:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006128:	bfa4      	itt	ge
 800612a:	4623      	movge	r3, r4
 800612c:	462c      	movge	r4, r5
 800612e:	4638      	mov	r0, r7
 8006130:	6861      	ldr	r1, [r4, #4]
 8006132:	bfa6      	itte	ge
 8006134:	461d      	movge	r5, r3
 8006136:	2600      	movge	r6, #0
 8006138:	2601      	movlt	r6, #1
 800613a:	f7ff fdb2 	bl	8005ca2 <_Balloc>
 800613e:	692b      	ldr	r3, [r5, #16]
 8006140:	60c6      	str	r6, [r0, #12]
 8006142:	6926      	ldr	r6, [r4, #16]
 8006144:	f105 0914 	add.w	r9, r5, #20
 8006148:	f104 0214 	add.w	r2, r4, #20
 800614c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006150:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006154:	f100 0514 	add.w	r5, r0, #20
 8006158:	f04f 0e00 	mov.w	lr, #0
 800615c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006160:	f859 4b04 	ldr.w	r4, [r9], #4
 8006164:	fa1e f18a 	uxtah	r1, lr, sl
 8006168:	b2a3      	uxth	r3, r4
 800616a:	1ac9      	subs	r1, r1, r3
 800616c:	0c23      	lsrs	r3, r4, #16
 800616e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006172:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006176:	b289      	uxth	r1, r1
 8006178:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800617c:	45c8      	cmp	r8, r9
 800617e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006182:	4694      	mov	ip, r2
 8006184:	f845 3b04 	str.w	r3, [r5], #4
 8006188:	d8e8      	bhi.n	800615c <__mdiff+0x5c>
 800618a:	45bc      	cmp	ip, r7
 800618c:	d304      	bcc.n	8006198 <__mdiff+0x98>
 800618e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006192:	b183      	cbz	r3, 80061b6 <__mdiff+0xb6>
 8006194:	6106      	str	r6, [r0, #16]
 8006196:	e7c5      	b.n	8006124 <__mdiff+0x24>
 8006198:	f85c 1b04 	ldr.w	r1, [ip], #4
 800619c:	fa1e f381 	uxtah	r3, lr, r1
 80061a0:	141a      	asrs	r2, r3, #16
 80061a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80061b0:	f845 3b04 	str.w	r3, [r5], #4
 80061b4:	e7e9      	b.n	800618a <__mdiff+0x8a>
 80061b6:	3e01      	subs	r6, #1
 80061b8:	e7e9      	b.n	800618e <__mdiff+0x8e>

080061ba <__d2b>:
 80061ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061be:	460e      	mov	r6, r1
 80061c0:	2101      	movs	r1, #1
 80061c2:	ec59 8b10 	vmov	r8, r9, d0
 80061c6:	4615      	mov	r5, r2
 80061c8:	f7ff fd6b 	bl	8005ca2 <_Balloc>
 80061cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80061d0:	4607      	mov	r7, r0
 80061d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061d6:	bb34      	cbnz	r4, 8006226 <__d2b+0x6c>
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	f1b8 0300 	subs.w	r3, r8, #0
 80061de:	d027      	beq.n	8006230 <__d2b+0x76>
 80061e0:	a802      	add	r0, sp, #8
 80061e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80061e6:	f7ff fe01 	bl	8005dec <__lo0bits>
 80061ea:	9900      	ldr	r1, [sp, #0]
 80061ec:	b1f0      	cbz	r0, 800622c <__d2b+0x72>
 80061ee:	9a01      	ldr	r2, [sp, #4]
 80061f0:	f1c0 0320 	rsb	r3, r0, #32
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	430b      	orrs	r3, r1
 80061fa:	40c2      	lsrs	r2, r0
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	9201      	str	r2, [sp, #4]
 8006200:	9b01      	ldr	r3, [sp, #4]
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	2b00      	cmp	r3, #0
 8006206:	bf14      	ite	ne
 8006208:	2102      	movne	r1, #2
 800620a:	2101      	moveq	r1, #1
 800620c:	6139      	str	r1, [r7, #16]
 800620e:	b1c4      	cbz	r4, 8006242 <__d2b+0x88>
 8006210:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006214:	4404      	add	r4, r0
 8006216:	6034      	str	r4, [r6, #0]
 8006218:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800621c:	6028      	str	r0, [r5, #0]
 800621e:	4638      	mov	r0, r7
 8006220:	b003      	add	sp, #12
 8006222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800622a:	e7d5      	b.n	80061d8 <__d2b+0x1e>
 800622c:	6179      	str	r1, [r7, #20]
 800622e:	e7e7      	b.n	8006200 <__d2b+0x46>
 8006230:	a801      	add	r0, sp, #4
 8006232:	f7ff fddb 	bl	8005dec <__lo0bits>
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	2101      	movs	r1, #1
 800623c:	6139      	str	r1, [r7, #16]
 800623e:	3020      	adds	r0, #32
 8006240:	e7e5      	b.n	800620e <__d2b+0x54>
 8006242:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006246:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800624a:	6030      	str	r0, [r6, #0]
 800624c:	6918      	ldr	r0, [r3, #16]
 800624e:	f7ff fdae 	bl	8005dae <__hi0bits>
 8006252:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006256:	e7e1      	b.n	800621c <__d2b+0x62>

08006258 <_calloc_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	fb02 f401 	mul.w	r4, r2, r1
 800625e:	4621      	mov	r1, r4
 8006260:	f000 f808 	bl	8006274 <_malloc_r>
 8006264:	4605      	mov	r5, r0
 8006266:	b118      	cbz	r0, 8006270 <_calloc_r+0x18>
 8006268:	4622      	mov	r2, r4
 800626a:	2100      	movs	r1, #0
 800626c:	f7fe fb60 	bl	8004930 <memset>
 8006270:	4628      	mov	r0, r5
 8006272:	bd38      	pop	{r3, r4, r5, pc}

08006274 <_malloc_r>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	1ccd      	adds	r5, r1, #3
 8006278:	f025 0503 	bic.w	r5, r5, #3
 800627c:	3508      	adds	r5, #8
 800627e:	2d0c      	cmp	r5, #12
 8006280:	bf38      	it	cc
 8006282:	250c      	movcc	r5, #12
 8006284:	2d00      	cmp	r5, #0
 8006286:	4606      	mov	r6, r0
 8006288:	db01      	blt.n	800628e <_malloc_r+0x1a>
 800628a:	42a9      	cmp	r1, r5
 800628c:	d903      	bls.n	8006296 <_malloc_r+0x22>
 800628e:	230c      	movs	r3, #12
 8006290:	6033      	str	r3, [r6, #0]
 8006292:	2000      	movs	r0, #0
 8006294:	bd70      	pop	{r4, r5, r6, pc}
 8006296:	f000 f869 	bl	800636c <__malloc_lock>
 800629a:	4a21      	ldr	r2, [pc, #132]	; (8006320 <_malloc_r+0xac>)
 800629c:	6814      	ldr	r4, [r2, #0]
 800629e:	4621      	mov	r1, r4
 80062a0:	b991      	cbnz	r1, 80062c8 <_malloc_r+0x54>
 80062a2:	4c20      	ldr	r4, [pc, #128]	; (8006324 <_malloc_r+0xb0>)
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	b91b      	cbnz	r3, 80062b0 <_malloc_r+0x3c>
 80062a8:	4630      	mov	r0, r6
 80062aa:	f000 f83d 	bl	8006328 <_sbrk_r>
 80062ae:	6020      	str	r0, [r4, #0]
 80062b0:	4629      	mov	r1, r5
 80062b2:	4630      	mov	r0, r6
 80062b4:	f000 f838 	bl	8006328 <_sbrk_r>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d124      	bne.n	8006306 <_malloc_r+0x92>
 80062bc:	230c      	movs	r3, #12
 80062be:	6033      	str	r3, [r6, #0]
 80062c0:	4630      	mov	r0, r6
 80062c2:	f000 f854 	bl	800636e <__malloc_unlock>
 80062c6:	e7e4      	b.n	8006292 <_malloc_r+0x1e>
 80062c8:	680b      	ldr	r3, [r1, #0]
 80062ca:	1b5b      	subs	r3, r3, r5
 80062cc:	d418      	bmi.n	8006300 <_malloc_r+0x8c>
 80062ce:	2b0b      	cmp	r3, #11
 80062d0:	d90f      	bls.n	80062f2 <_malloc_r+0x7e>
 80062d2:	600b      	str	r3, [r1, #0]
 80062d4:	50cd      	str	r5, [r1, r3]
 80062d6:	18cc      	adds	r4, r1, r3
 80062d8:	4630      	mov	r0, r6
 80062da:	f000 f848 	bl	800636e <__malloc_unlock>
 80062de:	f104 000b 	add.w	r0, r4, #11
 80062e2:	1d23      	adds	r3, r4, #4
 80062e4:	f020 0007 	bic.w	r0, r0, #7
 80062e8:	1ac3      	subs	r3, r0, r3
 80062ea:	d0d3      	beq.n	8006294 <_malloc_r+0x20>
 80062ec:	425a      	negs	r2, r3
 80062ee:	50e2      	str	r2, [r4, r3]
 80062f0:	e7d0      	b.n	8006294 <_malloc_r+0x20>
 80062f2:	428c      	cmp	r4, r1
 80062f4:	684b      	ldr	r3, [r1, #4]
 80062f6:	bf16      	itet	ne
 80062f8:	6063      	strne	r3, [r4, #4]
 80062fa:	6013      	streq	r3, [r2, #0]
 80062fc:	460c      	movne	r4, r1
 80062fe:	e7eb      	b.n	80062d8 <_malloc_r+0x64>
 8006300:	460c      	mov	r4, r1
 8006302:	6849      	ldr	r1, [r1, #4]
 8006304:	e7cc      	b.n	80062a0 <_malloc_r+0x2c>
 8006306:	1cc4      	adds	r4, r0, #3
 8006308:	f024 0403 	bic.w	r4, r4, #3
 800630c:	42a0      	cmp	r0, r4
 800630e:	d005      	beq.n	800631c <_malloc_r+0xa8>
 8006310:	1a21      	subs	r1, r4, r0
 8006312:	4630      	mov	r0, r6
 8006314:	f000 f808 	bl	8006328 <_sbrk_r>
 8006318:	3001      	adds	r0, #1
 800631a:	d0cf      	beq.n	80062bc <_malloc_r+0x48>
 800631c:	6025      	str	r5, [r4, #0]
 800631e:	e7db      	b.n	80062d8 <_malloc_r+0x64>
 8006320:	20000210 	.word	0x20000210
 8006324:	20000214 	.word	0x20000214

08006328 <_sbrk_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4c06      	ldr	r4, [pc, #24]	; (8006344 <_sbrk_r+0x1c>)
 800632c:	2300      	movs	r3, #0
 800632e:	4605      	mov	r5, r0
 8006330:	4608      	mov	r0, r1
 8006332:	6023      	str	r3, [r4, #0]
 8006334:	f7fb fada 	bl	80018ec <_sbrk>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_sbrk_r+0x1a>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	b103      	cbz	r3, 8006342 <_sbrk_r+0x1a>
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	20005ed4 	.word	0x20005ed4

08006348 <__ascii_mbtowc>:
 8006348:	b082      	sub	sp, #8
 800634a:	b901      	cbnz	r1, 800634e <__ascii_mbtowc+0x6>
 800634c:	a901      	add	r1, sp, #4
 800634e:	b142      	cbz	r2, 8006362 <__ascii_mbtowc+0x1a>
 8006350:	b14b      	cbz	r3, 8006366 <__ascii_mbtowc+0x1e>
 8006352:	7813      	ldrb	r3, [r2, #0]
 8006354:	600b      	str	r3, [r1, #0]
 8006356:	7812      	ldrb	r2, [r2, #0]
 8006358:	1c10      	adds	r0, r2, #0
 800635a:	bf18      	it	ne
 800635c:	2001      	movne	r0, #1
 800635e:	b002      	add	sp, #8
 8006360:	4770      	bx	lr
 8006362:	4610      	mov	r0, r2
 8006364:	e7fb      	b.n	800635e <__ascii_mbtowc+0x16>
 8006366:	f06f 0001 	mvn.w	r0, #1
 800636a:	e7f8      	b.n	800635e <__ascii_mbtowc+0x16>

0800636c <__malloc_lock>:
 800636c:	4770      	bx	lr

0800636e <__malloc_unlock>:
 800636e:	4770      	bx	lr

08006370 <__ascii_wctomb>:
 8006370:	b149      	cbz	r1, 8006386 <__ascii_wctomb+0x16>
 8006372:	2aff      	cmp	r2, #255	; 0xff
 8006374:	bf85      	ittet	hi
 8006376:	238a      	movhi	r3, #138	; 0x8a
 8006378:	6003      	strhi	r3, [r0, #0]
 800637a:	700a      	strbls	r2, [r1, #0]
 800637c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006380:	bf98      	it	ls
 8006382:	2001      	movls	r0, #1
 8006384:	4770      	bx	lr
 8006386:	4608      	mov	r0, r1
 8006388:	4770      	bx	lr
	...

0800638c <asin>:
 800638c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638e:	ed2d 8b02 	vpush	{d8}
 8006392:	4e26      	ldr	r6, [pc, #152]	; (800642c <asin+0xa0>)
 8006394:	b08b      	sub	sp, #44	; 0x2c
 8006396:	ec55 4b10 	vmov	r4, r5, d0
 800639a:	f000 f851 	bl	8006440 <__ieee754_asin>
 800639e:	f996 3000 	ldrsb.w	r3, [r6]
 80063a2:	eeb0 8a40 	vmov.f32	s16, s0
 80063a6:	eef0 8a60 	vmov.f32	s17, s1
 80063aa:	3301      	adds	r3, #1
 80063ac:	d036      	beq.n	800641c <asin+0x90>
 80063ae:	4622      	mov	r2, r4
 80063b0:	462b      	mov	r3, r5
 80063b2:	4620      	mov	r0, r4
 80063b4:	4629      	mov	r1, r5
 80063b6:	f7fa fb85 	bl	8000ac4 <__aeabi_dcmpun>
 80063ba:	4607      	mov	r7, r0
 80063bc:	bb70      	cbnz	r0, 800641c <asin+0x90>
 80063be:	ec45 4b10 	vmov	d0, r4, r5
 80063c2:	f000 fafd 	bl	80069c0 <fabs>
 80063c6:	2200      	movs	r2, #0
 80063c8:	4b19      	ldr	r3, [pc, #100]	; (8006430 <asin+0xa4>)
 80063ca:	ec51 0b10 	vmov	r0, r1, d0
 80063ce:	f7fa fb6f 	bl	8000ab0 <__aeabi_dcmpgt>
 80063d2:	b318      	cbz	r0, 800641c <asin+0x90>
 80063d4:	2301      	movs	r3, #1
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	4816      	ldr	r0, [pc, #88]	; (8006434 <asin+0xa8>)
 80063da:	4b17      	ldr	r3, [pc, #92]	; (8006438 <asin+0xac>)
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	9708      	str	r7, [sp, #32]
 80063e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80063e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80063e8:	f000 faf6 	bl	80069d8 <nan>
 80063ec:	f996 3000 	ldrsb.w	r3, [r6]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	ed8d 0b06 	vstr	d0, [sp, #24]
 80063f6:	d104      	bne.n	8006402 <asin+0x76>
 80063f8:	f7fe fa70 	bl	80048dc <__errno>
 80063fc:	2321      	movs	r3, #33	; 0x21
 80063fe:	6003      	str	r3, [r0, #0]
 8006400:	e004      	b.n	800640c <asin+0x80>
 8006402:	4668      	mov	r0, sp
 8006404:	f000 fae5 	bl	80069d2 <matherr>
 8006408:	2800      	cmp	r0, #0
 800640a:	d0f5      	beq.n	80063f8 <asin+0x6c>
 800640c:	9b08      	ldr	r3, [sp, #32]
 800640e:	b11b      	cbz	r3, 8006418 <asin+0x8c>
 8006410:	f7fe fa64 	bl	80048dc <__errno>
 8006414:	9b08      	ldr	r3, [sp, #32]
 8006416:	6003      	str	r3, [r0, #0]
 8006418:	ed9d 8b06 	vldr	d8, [sp, #24]
 800641c:	eeb0 0a48 	vmov.f32	s0, s16
 8006420:	eef0 0a68 	vmov.f32	s1, s17
 8006424:	b00b      	add	sp, #44	; 0x2c
 8006426:	ecbd 8b02 	vpop	{d8}
 800642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642c:	200001dc 	.word	0x200001dc
 8006430:	3ff00000 	.word	0x3ff00000
 8006434:	08006b4d 	.word	0x08006b4d
 8006438:	08006c4f 	.word	0x08006c4f
 800643c:	00000000 	.word	0x00000000

08006440 <__ieee754_asin>:
 8006440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	ec55 4b10 	vmov	r4, r5, d0
 8006448:	4bcb      	ldr	r3, [pc, #812]	; (8006778 <__ieee754_asin+0x338>)
 800644a:	b087      	sub	sp, #28
 800644c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8006450:	429f      	cmp	r7, r3
 8006452:	9501      	str	r5, [sp, #4]
 8006454:	dd31      	ble.n	80064ba <__ieee754_asin+0x7a>
 8006456:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800645a:	ee10 3a10 	vmov	r3, s0
 800645e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8006462:	433b      	orrs	r3, r7
 8006464:	d117      	bne.n	8006496 <__ieee754_asin+0x56>
 8006466:	a3aa      	add	r3, pc, #680	; (adr r3, 8006710 <__ieee754_asin+0x2d0>)
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	ee10 0a10 	vmov	r0, s0
 8006470:	4629      	mov	r1, r5
 8006472:	f7fa f88d 	bl	8000590 <__aeabi_dmul>
 8006476:	a3a8      	add	r3, pc, #672	; (adr r3, 8006718 <__ieee754_asin+0x2d8>)
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	4606      	mov	r6, r0
 800647e:	460f      	mov	r7, r1
 8006480:	4620      	mov	r0, r4
 8006482:	4629      	mov	r1, r5
 8006484:	f7fa f884 	bl	8000590 <__aeabi_dmul>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4630      	mov	r0, r6
 800648e:	4639      	mov	r1, r7
 8006490:	f7f9 fec8 	bl	8000224 <__adddf3>
 8006494:	e00a      	b.n	80064ac <__ieee754_asin+0x6c>
 8006496:	ee10 2a10 	vmov	r2, s0
 800649a:	462b      	mov	r3, r5
 800649c:	4620      	mov	r0, r4
 800649e:	4629      	mov	r1, r5
 80064a0:	f7f9 febe 	bl	8000220 <__aeabi_dsub>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	f7fa f99c 	bl	80007e4 <__aeabi_ddiv>
 80064ac:	4604      	mov	r4, r0
 80064ae:	460d      	mov	r5, r1
 80064b0:	ec45 4b10 	vmov	d0, r4, r5
 80064b4:	b007      	add	sp, #28
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ba:	4bb0      	ldr	r3, [pc, #704]	; (800677c <__ieee754_asin+0x33c>)
 80064bc:	429f      	cmp	r7, r3
 80064be:	dc11      	bgt.n	80064e4 <__ieee754_asin+0xa4>
 80064c0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80064c4:	f280 80ae 	bge.w	8006624 <__ieee754_asin+0x1e4>
 80064c8:	a395      	add	r3, pc, #596	; (adr r3, 8006720 <__ieee754_asin+0x2e0>)
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	ee10 0a10 	vmov	r0, s0
 80064d2:	4629      	mov	r1, r5
 80064d4:	f7f9 fea6 	bl	8000224 <__adddf3>
 80064d8:	2200      	movs	r2, #0
 80064da:	4ba9      	ldr	r3, [pc, #676]	; (8006780 <__ieee754_asin+0x340>)
 80064dc:	f7fa fae8 	bl	8000ab0 <__aeabi_dcmpgt>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d1e5      	bne.n	80064b0 <__ieee754_asin+0x70>
 80064e4:	ec45 4b10 	vmov	d0, r4, r5
 80064e8:	f000 fa6a 	bl	80069c0 <fabs>
 80064ec:	2000      	movs	r0, #0
 80064ee:	ec53 2b10 	vmov	r2, r3, d0
 80064f2:	49a3      	ldr	r1, [pc, #652]	; (8006780 <__ieee754_asin+0x340>)
 80064f4:	f7f9 fe94 	bl	8000220 <__aeabi_dsub>
 80064f8:	2200      	movs	r2, #0
 80064fa:	4ba2      	ldr	r3, [pc, #648]	; (8006784 <__ieee754_asin+0x344>)
 80064fc:	f7fa f848 	bl	8000590 <__aeabi_dmul>
 8006500:	a389      	add	r3, pc, #548	; (adr r3, 8006728 <__ieee754_asin+0x2e8>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	4604      	mov	r4, r0
 8006508:	460d      	mov	r5, r1
 800650a:	f7fa f841 	bl	8000590 <__aeabi_dmul>
 800650e:	a388      	add	r3, pc, #544	; (adr r3, 8006730 <__ieee754_asin+0x2f0>)
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	f7f9 fe86 	bl	8000224 <__adddf3>
 8006518:	4622      	mov	r2, r4
 800651a:	462b      	mov	r3, r5
 800651c:	f7fa f838 	bl	8000590 <__aeabi_dmul>
 8006520:	a385      	add	r3, pc, #532	; (adr r3, 8006738 <__ieee754_asin+0x2f8>)
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f7f9 fe7b 	bl	8000220 <__aeabi_dsub>
 800652a:	4622      	mov	r2, r4
 800652c:	462b      	mov	r3, r5
 800652e:	f7fa f82f 	bl	8000590 <__aeabi_dmul>
 8006532:	a383      	add	r3, pc, #524	; (adr r3, 8006740 <__ieee754_asin+0x300>)
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f7f9 fe74 	bl	8000224 <__adddf3>
 800653c:	4622      	mov	r2, r4
 800653e:	462b      	mov	r3, r5
 8006540:	f7fa f826 	bl	8000590 <__aeabi_dmul>
 8006544:	a380      	add	r3, pc, #512	; (adr r3, 8006748 <__ieee754_asin+0x308>)
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f7f9 fe69 	bl	8000220 <__aeabi_dsub>
 800654e:	4622      	mov	r2, r4
 8006550:	462b      	mov	r3, r5
 8006552:	f7fa f81d 	bl	8000590 <__aeabi_dmul>
 8006556:	a37e      	add	r3, pc, #504	; (adr r3, 8006750 <__ieee754_asin+0x310>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7f9 fe62 	bl	8000224 <__adddf3>
 8006560:	4622      	mov	r2, r4
 8006562:	462b      	mov	r3, r5
 8006564:	f7fa f814 	bl	8000590 <__aeabi_dmul>
 8006568:	a37b      	add	r3, pc, #492	; (adr r3, 8006758 <__ieee754_asin+0x318>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	4680      	mov	r8, r0
 8006570:	4689      	mov	r9, r1
 8006572:	4620      	mov	r0, r4
 8006574:	4629      	mov	r1, r5
 8006576:	f7fa f80b 	bl	8000590 <__aeabi_dmul>
 800657a:	a379      	add	r3, pc, #484	; (adr r3, 8006760 <__ieee754_asin+0x320>)
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f7f9 fe4e 	bl	8000220 <__aeabi_dsub>
 8006584:	4622      	mov	r2, r4
 8006586:	462b      	mov	r3, r5
 8006588:	f7fa f802 	bl	8000590 <__aeabi_dmul>
 800658c:	a376      	add	r3, pc, #472	; (adr r3, 8006768 <__ieee754_asin+0x328>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 fe47 	bl	8000224 <__adddf3>
 8006596:	4622      	mov	r2, r4
 8006598:	462b      	mov	r3, r5
 800659a:	f7f9 fff9 	bl	8000590 <__aeabi_dmul>
 800659e:	a374      	add	r3, pc, #464	; (adr r3, 8006770 <__ieee754_asin+0x330>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7f9 fe3c 	bl	8000220 <__aeabi_dsub>
 80065a8:	4622      	mov	r2, r4
 80065aa:	462b      	mov	r3, r5
 80065ac:	f7f9 fff0 	bl	8000590 <__aeabi_dmul>
 80065b0:	4b73      	ldr	r3, [pc, #460]	; (8006780 <__ieee754_asin+0x340>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	f7f9 fe36 	bl	8000224 <__adddf3>
 80065b8:	ec45 4b10 	vmov	d0, r4, r5
 80065bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065c0:	f000 f94e 	bl	8006860 <__ieee754_sqrt>
 80065c4:	4b70      	ldr	r3, [pc, #448]	; (8006788 <__ieee754_asin+0x348>)
 80065c6:	429f      	cmp	r7, r3
 80065c8:	ec5b ab10 	vmov	sl, fp, d0
 80065cc:	f340 80de 	ble.w	800678c <__ieee754_asin+0x34c>
 80065d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa f904 	bl	80007e4 <__aeabi_ddiv>
 80065dc:	4652      	mov	r2, sl
 80065de:	465b      	mov	r3, fp
 80065e0:	f7f9 ffd6 	bl	8000590 <__aeabi_dmul>
 80065e4:	4652      	mov	r2, sl
 80065e6:	465b      	mov	r3, fp
 80065e8:	f7f9 fe1c 	bl	8000224 <__adddf3>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	f7f9 fe18 	bl	8000224 <__adddf3>
 80065f4:	a348      	add	r3, pc, #288	; (adr r3, 8006718 <__ieee754_asin+0x2d8>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f7f9 fe11 	bl	8000220 <__aeabi_dsub>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	a143      	add	r1, pc, #268	; (adr r1, 8006710 <__ieee754_asin+0x2d0>)
 8006604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006608:	f7f9 fe0a 	bl	8000220 <__aeabi_dsub>
 800660c:	9b01      	ldr	r3, [sp, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	bfdc      	itt	le
 8006612:	4602      	movle	r2, r0
 8006614:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006618:	4604      	mov	r4, r0
 800661a:	460d      	mov	r5, r1
 800661c:	bfdc      	itt	le
 800661e:	4614      	movle	r4, r2
 8006620:	461d      	movle	r5, r3
 8006622:	e745      	b.n	80064b0 <__ieee754_asin+0x70>
 8006624:	ee10 2a10 	vmov	r2, s0
 8006628:	ee10 0a10 	vmov	r0, s0
 800662c:	462b      	mov	r3, r5
 800662e:	4629      	mov	r1, r5
 8006630:	f7f9 ffae 	bl	8000590 <__aeabi_dmul>
 8006634:	a33c      	add	r3, pc, #240	; (adr r3, 8006728 <__ieee754_asin+0x2e8>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	4606      	mov	r6, r0
 800663c:	460f      	mov	r7, r1
 800663e:	f7f9 ffa7 	bl	8000590 <__aeabi_dmul>
 8006642:	a33b      	add	r3, pc, #236	; (adr r3, 8006730 <__ieee754_asin+0x2f0>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f7f9 fdec 	bl	8000224 <__adddf3>
 800664c:	4632      	mov	r2, r6
 800664e:	463b      	mov	r3, r7
 8006650:	f7f9 ff9e 	bl	8000590 <__aeabi_dmul>
 8006654:	a338      	add	r3, pc, #224	; (adr r3, 8006738 <__ieee754_asin+0x2f8>)
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	f7f9 fde1 	bl	8000220 <__aeabi_dsub>
 800665e:	4632      	mov	r2, r6
 8006660:	463b      	mov	r3, r7
 8006662:	f7f9 ff95 	bl	8000590 <__aeabi_dmul>
 8006666:	a336      	add	r3, pc, #216	; (adr r3, 8006740 <__ieee754_asin+0x300>)
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	f7f9 fdda 	bl	8000224 <__adddf3>
 8006670:	4632      	mov	r2, r6
 8006672:	463b      	mov	r3, r7
 8006674:	f7f9 ff8c 	bl	8000590 <__aeabi_dmul>
 8006678:	a333      	add	r3, pc, #204	; (adr r3, 8006748 <__ieee754_asin+0x308>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7f9 fdcf 	bl	8000220 <__aeabi_dsub>
 8006682:	4632      	mov	r2, r6
 8006684:	463b      	mov	r3, r7
 8006686:	f7f9 ff83 	bl	8000590 <__aeabi_dmul>
 800668a:	a331      	add	r3, pc, #196	; (adr r3, 8006750 <__ieee754_asin+0x310>)
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f7f9 fdc8 	bl	8000224 <__adddf3>
 8006694:	4632      	mov	r2, r6
 8006696:	463b      	mov	r3, r7
 8006698:	f7f9 ff7a 	bl	8000590 <__aeabi_dmul>
 800669c:	a32e      	add	r3, pc, #184	; (adr r3, 8006758 <__ieee754_asin+0x318>)
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	4680      	mov	r8, r0
 80066a4:	4689      	mov	r9, r1
 80066a6:	4630      	mov	r0, r6
 80066a8:	4639      	mov	r1, r7
 80066aa:	f7f9 ff71 	bl	8000590 <__aeabi_dmul>
 80066ae:	a32c      	add	r3, pc, #176	; (adr r3, 8006760 <__ieee754_asin+0x320>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f7f9 fdb4 	bl	8000220 <__aeabi_dsub>
 80066b8:	4632      	mov	r2, r6
 80066ba:	463b      	mov	r3, r7
 80066bc:	f7f9 ff68 	bl	8000590 <__aeabi_dmul>
 80066c0:	a329      	add	r3, pc, #164	; (adr r3, 8006768 <__ieee754_asin+0x328>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 fdad 	bl	8000224 <__adddf3>
 80066ca:	4632      	mov	r2, r6
 80066cc:	463b      	mov	r3, r7
 80066ce:	f7f9 ff5f 	bl	8000590 <__aeabi_dmul>
 80066d2:	a327      	add	r3, pc, #156	; (adr r3, 8006770 <__ieee754_asin+0x330>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f7f9 fda2 	bl	8000220 <__aeabi_dsub>
 80066dc:	4632      	mov	r2, r6
 80066de:	463b      	mov	r3, r7
 80066e0:	f7f9 ff56 	bl	8000590 <__aeabi_dmul>
 80066e4:	2200      	movs	r2, #0
 80066e6:	4b26      	ldr	r3, [pc, #152]	; (8006780 <__ieee754_asin+0x340>)
 80066e8:	f7f9 fd9c 	bl	8000224 <__adddf3>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7fa f876 	bl	80007e4 <__aeabi_ddiv>
 80066f8:	4622      	mov	r2, r4
 80066fa:	462b      	mov	r3, r5
 80066fc:	f7f9 ff48 	bl	8000590 <__aeabi_dmul>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4620      	mov	r0, r4
 8006706:	4629      	mov	r1, r5
 8006708:	e6c2      	b.n	8006490 <__ieee754_asin+0x50>
 800670a:	bf00      	nop
 800670c:	f3af 8000 	nop.w
 8006710:	54442d18 	.word	0x54442d18
 8006714:	3ff921fb 	.word	0x3ff921fb
 8006718:	33145c07 	.word	0x33145c07
 800671c:	3c91a626 	.word	0x3c91a626
 8006720:	8800759c 	.word	0x8800759c
 8006724:	7e37e43c 	.word	0x7e37e43c
 8006728:	0dfdf709 	.word	0x0dfdf709
 800672c:	3f023de1 	.word	0x3f023de1
 8006730:	7501b288 	.word	0x7501b288
 8006734:	3f49efe0 	.word	0x3f49efe0
 8006738:	b5688f3b 	.word	0xb5688f3b
 800673c:	3fa48228 	.word	0x3fa48228
 8006740:	0e884455 	.word	0x0e884455
 8006744:	3fc9c155 	.word	0x3fc9c155
 8006748:	03eb6f7d 	.word	0x03eb6f7d
 800674c:	3fd4d612 	.word	0x3fd4d612
 8006750:	55555555 	.word	0x55555555
 8006754:	3fc55555 	.word	0x3fc55555
 8006758:	b12e9282 	.word	0xb12e9282
 800675c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006760:	1b8d0159 	.word	0x1b8d0159
 8006764:	3fe6066c 	.word	0x3fe6066c
 8006768:	9c598ac8 	.word	0x9c598ac8
 800676c:	40002ae5 	.word	0x40002ae5
 8006770:	1c8a2d4b 	.word	0x1c8a2d4b
 8006774:	40033a27 	.word	0x40033a27
 8006778:	3fefffff 	.word	0x3fefffff
 800677c:	3fdfffff 	.word	0x3fdfffff
 8006780:	3ff00000 	.word	0x3ff00000
 8006784:	3fe00000 	.word	0x3fe00000
 8006788:	3fef3332 	.word	0x3fef3332
 800678c:	ee10 2a10 	vmov	r2, s0
 8006790:	ee10 0a10 	vmov	r0, s0
 8006794:	465b      	mov	r3, fp
 8006796:	4659      	mov	r1, fp
 8006798:	f7f9 fd44 	bl	8000224 <__adddf3>
 800679c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067a4:	4640      	mov	r0, r8
 80067a6:	4649      	mov	r1, r9
 80067a8:	f7fa f81c 	bl	80007e4 <__aeabi_ddiv>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b4:	f7f9 feec 	bl	8000590 <__aeabi_dmul>
 80067b8:	2600      	movs	r6, #0
 80067ba:	4680      	mov	r8, r0
 80067bc:	4689      	mov	r9, r1
 80067be:	4632      	mov	r2, r6
 80067c0:	465b      	mov	r3, fp
 80067c2:	4630      	mov	r0, r6
 80067c4:	4659      	mov	r1, fp
 80067c6:	f7f9 fee3 	bl	8000590 <__aeabi_dmul>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7f9 fd25 	bl	8000220 <__aeabi_dsub>
 80067d6:	4632      	mov	r2, r6
 80067d8:	4604      	mov	r4, r0
 80067da:	460d      	mov	r5, r1
 80067dc:	465b      	mov	r3, fp
 80067de:	4650      	mov	r0, sl
 80067e0:	4659      	mov	r1, fp
 80067e2:	f7f9 fd1f 	bl	8000224 <__adddf3>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7f9 fff9 	bl	80007e4 <__aeabi_ddiv>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	f7f9 fd15 	bl	8000224 <__adddf3>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	a114      	add	r1, pc, #80	; (adr r1, 8006850 <__ieee754_asin+0x410>)
 8006800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006804:	f7f9 fd0c 	bl	8000220 <__aeabi_dsub>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4640      	mov	r0, r8
 800680e:	4649      	mov	r1, r9
 8006810:	f7f9 fd06 	bl	8000220 <__aeabi_dsub>
 8006814:	465f      	mov	r7, fp
 8006816:	4604      	mov	r4, r0
 8006818:	460d      	mov	r5, r1
 800681a:	4632      	mov	r2, r6
 800681c:	465b      	mov	r3, fp
 800681e:	4630      	mov	r0, r6
 8006820:	4639      	mov	r1, r7
 8006822:	f7f9 fcff 	bl	8000224 <__adddf3>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	a10b      	add	r1, pc, #44	; (adr r1, 8006858 <__ieee754_asin+0x418>)
 800682c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006830:	f7f9 fcf6 	bl	8000220 <__aeabi_dsub>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4620      	mov	r0, r4
 800683a:	4629      	mov	r1, r5
 800683c:	f7f9 fcf0 	bl	8000220 <__aeabi_dsub>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	a104      	add	r1, pc, #16	; (adr r1, 8006858 <__ieee754_asin+0x418>)
 8006846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800684a:	e6dd      	b.n	8006608 <__ieee754_asin+0x1c8>
 800684c:	f3af 8000 	nop.w
 8006850:	33145c07 	.word	0x33145c07
 8006854:	3c91a626 	.word	0x3c91a626
 8006858:	54442d18 	.word	0x54442d18
 800685c:	3fe921fb 	.word	0x3fe921fb

08006860 <__ieee754_sqrt>:
 8006860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006864:	4955      	ldr	r1, [pc, #340]	; (80069bc <__ieee754_sqrt+0x15c>)
 8006866:	ec55 4b10 	vmov	r4, r5, d0
 800686a:	43a9      	bics	r1, r5
 800686c:	462b      	mov	r3, r5
 800686e:	462a      	mov	r2, r5
 8006870:	d112      	bne.n	8006898 <__ieee754_sqrt+0x38>
 8006872:	ee10 2a10 	vmov	r2, s0
 8006876:	ee10 0a10 	vmov	r0, s0
 800687a:	4629      	mov	r1, r5
 800687c:	f7f9 fe88 	bl	8000590 <__aeabi_dmul>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4620      	mov	r0, r4
 8006886:	4629      	mov	r1, r5
 8006888:	f7f9 fccc 	bl	8000224 <__adddf3>
 800688c:	4604      	mov	r4, r0
 800688e:	460d      	mov	r5, r1
 8006890:	ec45 4b10 	vmov	d0, r4, r5
 8006894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006898:	2d00      	cmp	r5, #0
 800689a:	ee10 0a10 	vmov	r0, s0
 800689e:	4621      	mov	r1, r4
 80068a0:	dc0f      	bgt.n	80068c2 <__ieee754_sqrt+0x62>
 80068a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80068a6:	4330      	orrs	r0, r6
 80068a8:	d0f2      	beq.n	8006890 <__ieee754_sqrt+0x30>
 80068aa:	b155      	cbz	r5, 80068c2 <__ieee754_sqrt+0x62>
 80068ac:	ee10 2a10 	vmov	r2, s0
 80068b0:	4620      	mov	r0, r4
 80068b2:	4629      	mov	r1, r5
 80068b4:	f7f9 fcb4 	bl	8000220 <__aeabi_dsub>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	f7f9 ff92 	bl	80007e4 <__aeabi_ddiv>
 80068c0:	e7e4      	b.n	800688c <__ieee754_sqrt+0x2c>
 80068c2:	151b      	asrs	r3, r3, #20
 80068c4:	d073      	beq.n	80069ae <__ieee754_sqrt+0x14e>
 80068c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80068ca:	07dd      	lsls	r5, r3, #31
 80068cc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80068d0:	bf48      	it	mi
 80068d2:	0fc8      	lsrmi	r0, r1, #31
 80068d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80068d8:	bf44      	itt	mi
 80068da:	0049      	lslmi	r1, r1, #1
 80068dc:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80068e0:	2500      	movs	r5, #0
 80068e2:	1058      	asrs	r0, r3, #1
 80068e4:	0fcb      	lsrs	r3, r1, #31
 80068e6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80068ea:	0049      	lsls	r1, r1, #1
 80068ec:	2316      	movs	r3, #22
 80068ee:	462c      	mov	r4, r5
 80068f0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80068f4:	19a7      	adds	r7, r4, r6
 80068f6:	4297      	cmp	r7, r2
 80068f8:	bfde      	ittt	le
 80068fa:	19bc      	addle	r4, r7, r6
 80068fc:	1bd2      	suble	r2, r2, r7
 80068fe:	19ad      	addle	r5, r5, r6
 8006900:	0fcf      	lsrs	r7, r1, #31
 8006902:	3b01      	subs	r3, #1
 8006904:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006908:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800690c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006910:	d1f0      	bne.n	80068f4 <__ieee754_sqrt+0x94>
 8006912:	f04f 0c20 	mov.w	ip, #32
 8006916:	469e      	mov	lr, r3
 8006918:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800691c:	42a2      	cmp	r2, r4
 800691e:	eb06 070e 	add.w	r7, r6, lr
 8006922:	dc02      	bgt.n	800692a <__ieee754_sqrt+0xca>
 8006924:	d112      	bne.n	800694c <__ieee754_sqrt+0xec>
 8006926:	428f      	cmp	r7, r1
 8006928:	d810      	bhi.n	800694c <__ieee754_sqrt+0xec>
 800692a:	2f00      	cmp	r7, #0
 800692c:	eb07 0e06 	add.w	lr, r7, r6
 8006930:	da42      	bge.n	80069b8 <__ieee754_sqrt+0x158>
 8006932:	f1be 0f00 	cmp.w	lr, #0
 8006936:	db3f      	blt.n	80069b8 <__ieee754_sqrt+0x158>
 8006938:	f104 0801 	add.w	r8, r4, #1
 800693c:	1b12      	subs	r2, r2, r4
 800693e:	428f      	cmp	r7, r1
 8006940:	bf88      	it	hi
 8006942:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006946:	1bc9      	subs	r1, r1, r7
 8006948:	4433      	add	r3, r6
 800694a:	4644      	mov	r4, r8
 800694c:	0052      	lsls	r2, r2, #1
 800694e:	f1bc 0c01 	subs.w	ip, ip, #1
 8006952:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006956:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800695a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800695e:	d1dd      	bne.n	800691c <__ieee754_sqrt+0xbc>
 8006960:	430a      	orrs	r2, r1
 8006962:	d006      	beq.n	8006972 <__ieee754_sqrt+0x112>
 8006964:	1c5c      	adds	r4, r3, #1
 8006966:	bf13      	iteet	ne
 8006968:	3301      	addne	r3, #1
 800696a:	3501      	addeq	r5, #1
 800696c:	4663      	moveq	r3, ip
 800696e:	f023 0301 	bicne.w	r3, r3, #1
 8006972:	106a      	asrs	r2, r5, #1
 8006974:	085b      	lsrs	r3, r3, #1
 8006976:	07e9      	lsls	r1, r5, #31
 8006978:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800697c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006980:	bf48      	it	mi
 8006982:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006986:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800698a:	461c      	mov	r4, r3
 800698c:	e780      	b.n	8006890 <__ieee754_sqrt+0x30>
 800698e:	0aca      	lsrs	r2, r1, #11
 8006990:	3815      	subs	r0, #21
 8006992:	0549      	lsls	r1, r1, #21
 8006994:	2a00      	cmp	r2, #0
 8006996:	d0fa      	beq.n	800698e <__ieee754_sqrt+0x12e>
 8006998:	02d6      	lsls	r6, r2, #11
 800699a:	d50a      	bpl.n	80069b2 <__ieee754_sqrt+0x152>
 800699c:	f1c3 0420 	rsb	r4, r3, #32
 80069a0:	fa21 f404 	lsr.w	r4, r1, r4
 80069a4:	1e5d      	subs	r5, r3, #1
 80069a6:	4099      	lsls	r1, r3
 80069a8:	4322      	orrs	r2, r4
 80069aa:	1b43      	subs	r3, r0, r5
 80069ac:	e78b      	b.n	80068c6 <__ieee754_sqrt+0x66>
 80069ae:	4618      	mov	r0, r3
 80069b0:	e7f0      	b.n	8006994 <__ieee754_sqrt+0x134>
 80069b2:	0052      	lsls	r2, r2, #1
 80069b4:	3301      	adds	r3, #1
 80069b6:	e7ef      	b.n	8006998 <__ieee754_sqrt+0x138>
 80069b8:	46a0      	mov	r8, r4
 80069ba:	e7bf      	b.n	800693c <__ieee754_sqrt+0xdc>
 80069bc:	7ff00000 	.word	0x7ff00000

080069c0 <fabs>:
 80069c0:	ec51 0b10 	vmov	r0, r1, d0
 80069c4:	ee10 2a10 	vmov	r2, s0
 80069c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80069cc:	ec43 2b10 	vmov	d0, r2, r3
 80069d0:	4770      	bx	lr

080069d2 <matherr>:
 80069d2:	2000      	movs	r0, #0
 80069d4:	4770      	bx	lr
	...

080069d8 <nan>:
 80069d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80069e0 <nan+0x8>
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	00000000 	.word	0x00000000
 80069e4:	7ff80000 	.word	0x7ff80000

080069e8 <_init>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	bf00      	nop
 80069ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ee:	bc08      	pop	{r3}
 80069f0:	469e      	mov	lr, r3
 80069f2:	4770      	bx	lr

080069f4 <_fini>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	bf00      	nop
 80069f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fa:	bc08      	pop	{r3}
 80069fc:	469e      	mov	lr, r3
 80069fe:	4770      	bx	lr
