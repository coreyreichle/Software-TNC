
Noise_signal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026a4  080026a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026ac  080026ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026b0  080026b0  000126b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  080026c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080026c0  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b244  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cc4  00000000  00000000  0002b280  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  0002cf48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac8  00000000  00000000  0002db08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021334  00000000  00000000  0002e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009647  00000000  00000000  0004f904  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cace9  00000000  00000000  00058f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123c34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003060  00000000  00000000  00123cb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002674 	.word	0x08002674

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002674 	.word	0x08002674

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 facc 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f81a 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f908 	bl	8000724 <MX_GPIO_Init>
  MX_DMA_Init();
 8000514:	f000 f8e6 	bl	80006e4 <MX_DMA_Init>
  MX_DAC_Init();
 8000518:	f000 f886 	bl	8000628 <MX_DAC_Init>
  MX_TIM6_Init();
 800051c:	f000 f8ae 	bl	800067c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //Enable Timer 6
  HAL_TIM_Base_Start(&htim6);
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x38>)
 8000522:	f001 ff3a 	bl	800239a <HAL_TIM_Base_Start>

  //Genaerate White Noise Signal
  HAL_DACEx_NoiseWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_63);
 8000526:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800052a:	2100      	movs	r1, #0
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <main+0x3c>)
 800052e:	f000 fd11 	bl	8000f54 <HAL_DACEx_NoiseWaveGenerate>
  //Start DAC Operation
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000532:	2100      	movs	r1, #0
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <main+0x3c>)
 8000536:	f000 fc5a 	bl	8000dee <HAL_DAC_Start>
  /* USER CODE END 2 *

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	e7fe      	b.n	800053a <main+0x36>
 800053c:	2000009c 	.word	0x2000009c
 8000540:	20000088 	.word	0x20000088

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	2234      	movs	r2, #52	; 0x34
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 f886 	bl	8002664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <SystemClock_Config+0xdc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a2b      	ldr	r2, [pc, #172]	; (8000620 <SystemClock_Config+0xdc>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b29      	ldr	r3, [pc, #164]	; (8000620 <SystemClock_Config+0xdc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <SystemClock_Config+0xe0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a25      	ldr	r2, [pc, #148]	; (8000624 <SystemClock_Config+0xe0>)
 800058e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <SystemClock_Config+0xe0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005b8:	23b4      	movs	r3, #180	; 0xb4
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fc5f 	bl	8001e90 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d8:	f000 f924 	bl	8000824 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005dc:	f001 f982 	bl	80018e4 <HAL_PWREx_EnableOverDrive>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005e6:	f000 f91d 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	2105      	movs	r1, #5
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f9bb 	bl	8001984 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000614:	f000 f906 	bl	8000824 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_DAC_Init+0x4c>)
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <MX_DAC_Init+0x50>)
 800063a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_DAC_Init+0x4c>)
 800063e:	f000 fbb4 	bl	8000daa <HAL_DAC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000648:	f000 f8ec 	bl	8000824 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_DAC_Init+0x4c>)
 800065c:	f000 fc2d 	bl	8000eba <HAL_DAC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000666:	f000 f8dd 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000088 	.word	0x20000088
 8000678:	40007400 	.word	0x40007400

0800067c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_TIM6_Init+0x60>)
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <MX_TIM6_Init+0x64>)
 800068e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 45-1;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_TIM6_Init+0x60>)
 8000692:	222c      	movs	r2, #44	; 0x2c
 8000694:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_TIM6_Init+0x60>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_TIM6_Init+0x60>)
 800069e:	2209      	movs	r2, #9
 80006a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_TIM6_Init+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <MX_TIM6_Init+0x60>)
 80006aa:	f001 fe4b 	bl	8002344 <HAL_TIM_Base_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80006b4:	f000 f8b6 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_TIM6_Init+0x60>)
 80006c6:	f001 ff2d 	bl	8002524 <HAL_TIMEx_MasterConfigSynchronization>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80006d0:	f000 f8a8 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000009c 	.word	0x2000009c
 80006e0:	40001000 	.word	0x40001000

080006e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_DMA_Init+0x3c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <MX_DMA_Init+0x3c>)
 80006f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_DMA_Init+0x3c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2010      	movs	r0, #16
 800070c:	f000 fb17 	bl	8000d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000710:	2010      	movs	r0, #16
 8000712:	f000 fb30 	bl	8000d76 <HAL_NVIC_EnableIRQ>

}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a34      	ldr	r2, [pc, #208]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b32      	ldr	r3, [pc, #200]	; (8000814 <MX_GPIO_Init+0xf0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <MX_GPIO_Init+0xf0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a26      	ldr	r2, [pc, #152]	; (8000814 <MX_GPIO_Init+0xf0>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <MX_GPIO_Init+0xf0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_GPIO_Init+0xf0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	481a      	ldr	r0, [pc, #104]	; (8000818 <MX_GPIO_Init+0xf4>)
 80007b0:	f001 f87e 	bl	80018b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_GPIO_Init+0xf8>)
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4815      	ldr	r0, [pc, #84]	; (8000820 <MX_GPIO_Init+0xfc>)
 80007ca:	f000 fedf 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ce:	230c      	movs	r3, #12
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007de:	2307      	movs	r3, #7
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0xf4>)
 80007ea:	f000 fecf 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ee:	2320      	movs	r3, #32
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0xf4>)
 8000806:	f000 fec1 	bl	800158c <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000
 800081c:	10210000 	.word	0x10210000
 8000820:	40020800 	.word	0x40020800

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000872:	2007      	movs	r0, #7
 8000874:	f000 fa58 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a2e      	ldr	r2, [pc, #184]	; (800095c <HAL_DAC_MspInit+0xd8>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d156      	bne.n	8000954 <HAL_DAC_MspInit+0xd0>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <HAL_DAC_MspInit+0xdc>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <HAL_DAC_MspInit+0xdc>)
 80008b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <HAL_DAC_MspInit+0xdc>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <HAL_DAC_MspInit+0xdc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a25      	ldr	r2, [pc, #148]	; (8000960 <HAL_DAC_MspInit+0xdc>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <HAL_DAC_MspInit+0xdc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008de:	2310      	movs	r3, #16
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e2:	2303      	movs	r3, #3
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	481c      	ldr	r0, [pc, #112]	; (8000964 <HAL_DAC_MspInit+0xe0>)
 80008f2:	f000 fe4b 	bl	800158c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 80008f8:	4a1c      	ldr	r2, [pc, #112]	; (800096c <HAL_DAC_MspInit+0xe8>)
 80008fa:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 80008fe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000902:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 8000906:	2240      	movs	r2, #64	; 0x40
 8000908:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 8000912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000916:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 8000926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800092a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 800093a:	f000 fb3f 	bl	8000fbc <HAL_DMA_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_DAC_MspInit+0xc4>
    {
      Error_Handler();
 8000944:	f7ff ff6e 	bl	8000824 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <HAL_DAC_MspInit+0xe4>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	; 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40007400 	.word	0x40007400
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000
 8000968:	20000028 	.word	0x20000028
 800096c:	40026088 	.word	0x40026088

08000970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <HAL_TIM_Base_MspInit+0x3c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d10d      	bne.n	800099e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_TIM_Base_MspInit+0x40>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <HAL_TIM_Base_MspInit+0x40>)
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <HAL_TIM_Base_MspInit+0x40>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 0310 	and.w	r3, r3, #16
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40001000 	.word	0x40001000
 80009b0:	40023800 	.word	0x40023800

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f89e 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <DMA1_Stream5_IRQHandler+0x10>)
 8000a16:	f000 fb7f 	bl	8001118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000028 	.word	0x20000028

08000a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <SystemInit+0x28>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <SystemInit+0x28>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SystemInit+0x28>)
 8000a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a56:	e003      	b.n	8000a60 <LoopCopyDataInit>

08000a58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a5e:	3104      	adds	r1, #4

08000a60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a68:	d3f6      	bcc.n	8000a58 <CopyDataInit>
  ldr  r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a6c:	e002      	b.n	8000a74 <LoopFillZerobss>

08000a6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a70:	f842 3b04 	str.w	r3, [r2], #4

08000a74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a78:	d3f9      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a7a:	f7ff ffd3 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f001 fdcd 	bl	800261c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fd3f 	bl	8000504 <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a8c:	080026b4 	.word	0x080026b4
  ldr  r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a94:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000a98:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000a9c:	200000e0 	.word	0x200000e0

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f92b 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff feac 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f943 	bl	8000d92 <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 f90b 	bl	8000d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	200000dc 	.word	0x200000dc

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200000dc 	.word	0x200000dc

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff29 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff3e 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff8e 	bl	8000c7c <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5d 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff31 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e014      	b.n	8000de6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	791b      	ldrb	r3, [r3, #4]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d105      	bne.n	8000dd2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fd59 	bl	8000884 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	795b      	ldrb	r3, [r3, #5]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d101      	bne.n	8000e0c <HAL_DAC_Start+0x1e>
 8000e08:	2302      	movs	r3, #2
 8000e0a:	e050      	b.n	8000eae <HAL_DAC_Start+0xc0>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2202      	movs	r2, #2
 8000e16:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6819      	ldr	r1, [r3, #0]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	409a      	lsls	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d11a      	bne.n	8000e68 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e48:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d127      	bne.n	8000ea0 <HAL_DAC_Start+0xb2>
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2b38      	cmp	r3, #56	; 0x38
 8000e54:	d124      	bne.n	8000ea0 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 0201 	orr.w	r2, r2, #1
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	e01b      	b.n	8000ea0 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e72:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8000e7e:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000e86:	d10b      	bne.n	8000ea0 <HAL_DAC_Start+0xb2>
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8000e8e:	d107      	bne.n	8000ea0 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0202 	orr.w	r2, r2, #2
 8000e9e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b087      	sub	sp, #28
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	795b      	ldrb	r3, [r3, #5]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d101      	bne.n	8000eda <HAL_DAC_ConfigChannel+0x20>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e036      	b.n	8000f48 <HAL_DAC_ConfigChannel+0x8e>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2201      	movs	r2, #1
 8000ede:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000eee:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4013      	ands	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	22c0      	movs	r2, #192	; 0xc0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43da      	mvns	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	400a      	ands	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation 
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude)
{  
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_DACEx_NoiseWaveGenerate+0x18>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e020      	b.n	8000fae <HAL_DACEx_NoiseWaveGenerate+0x5a>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2202      	movs	r2, #2
 8000f76:	711a      	strb	r2, [r3, #4]
  
  /* Enable the selected wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_0 | Amplitude) << Channel);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	ea02 0103 	and.w	r1, r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	409a      	lsls	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff fdd2 	bl	8000b70 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e099      	b.n	800110c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0201 	bic.w	r2, r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff8:	e00f      	b.n	800101a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ffa:	f7ff fdb9 	bl	8000b70 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b05      	cmp	r3, #5
 8001006:	d908      	bls.n	800101a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2220      	movs	r2, #32
 800100c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2203      	movs	r2, #3
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e078      	b.n	800110c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1e8      	bne.n	8000ffa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <HAL_DMA_Init+0x158>)
 8001034:	4013      	ands	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001046:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800105e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4313      	orrs	r3, r2
 800106a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001070:	2b04      	cmp	r3, #4
 8001072:	d107      	bne.n	8001084 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4313      	orrs	r3, r2
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4313      	orrs	r3, r2
 8001082:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f023 0307 	bic.w	r3, r3, #7
 800109a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d117      	bne.n	80010de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00e      	beq.n	80010de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f9e9 	bl	8001498 <DMA_CheckFifoParam>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2240      	movs	r2, #64	; 0x40
 80010d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010da:	2301      	movs	r3, #1
 80010dc:	e016      	b.n	800110c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f9a0 	bl	800142c <DMA_CalcBaseAndBitshift>
 80010ec:	4603      	mov	r3, r0
 80010ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f4:	223f      	movs	r2, #63	; 0x3f
 80010f6:	409a      	lsls	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	f010803f 	.word	0xf010803f

08001118 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001124:	4b92      	ldr	r3, [pc, #584]	; (8001370 <HAL_DMA_IRQHandler+0x258>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a92      	ldr	r2, [pc, #584]	; (8001374 <HAL_DMA_IRQHandler+0x25c>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	0a9b      	lsrs	r3, r3, #10
 8001130:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001142:	2208      	movs	r2, #8
 8001144:	409a      	lsls	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01a      	beq.n	8001184 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0204 	bic.w	r2, r2, #4
 800116a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001170:	2208      	movs	r2, #8
 8001172:	409a      	lsls	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117c:	f043 0201 	orr.w	r2, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001188:	2201      	movs	r2, #1
 800118a:	409a      	lsls	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d012      	beq.n	80011ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a6:	2201      	movs	r2, #1
 80011a8:	409a      	lsls	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b2:	f043 0202 	orr.w	r2, r3, #2
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011be:	2204      	movs	r2, #4
 80011c0:	409a      	lsls	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d012      	beq.n	80011f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00b      	beq.n	80011f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011dc:	2204      	movs	r2, #4
 80011de:	409a      	lsls	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e8:	f043 0204 	orr.w	r2, r3, #4
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f4:	2210      	movs	r2, #16
 80011f6:	409a      	lsls	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d043      	beq.n	8001288 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d03c      	beq.n	8001288 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001212:	2210      	movs	r2, #16
 8001214:	409a      	lsls	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d018      	beq.n	800125a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d108      	bne.n	8001248 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2b00      	cmp	r3, #0
 800123c:	d024      	beq.n	8001288 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
 8001246:	e01f      	b.n	8001288 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124c:	2b00      	cmp	r3, #0
 800124e:	d01b      	beq.n	8001288 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	4798      	blx	r3
 8001258:	e016      	b.n	8001288 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d107      	bne.n	8001278 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0208 	bic.w	r2, r2, #8
 8001276:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128c:	2220      	movs	r2, #32
 800128e:	409a      	lsls	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 808e 	beq.w	80013b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 8086 	beq.w	80013b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ae:	2220      	movs	r2, #32
 80012b0:	409a      	lsls	r2, r3
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d136      	bne.n	8001330 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0216 	bic.w	r2, r2, #22
 80012d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <HAL_DMA_IRQHandler+0x1da>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0208 	bic.w	r2, r2, #8
 8001300:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001306:	223f      	movs	r2, #63	; 0x3f
 8001308:	409a      	lsls	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001322:	2b00      	cmp	r3, #0
 8001324:	d07d      	beq.n	8001422 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	4798      	blx	r3
        }
        return;
 800132e:	e078      	b.n	8001422 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d01c      	beq.n	8001378 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d108      	bne.n	800135e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	2b00      	cmp	r3, #0
 8001352:	d030      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	4798      	blx	r3
 800135c:	e02b      	b.n	80013b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001362:	2b00      	cmp	r3, #0
 8001364:	d027      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
 800136e:	e022      	b.n	80013b6 <HAL_DMA_IRQHandler+0x29e>
 8001370:	20000000 	.word	0x20000000
 8001374:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10f      	bne.n	80013a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0210 	bic.w	r2, r2, #16
 8001394:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d032      	beq.n	8001424 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d022      	beq.n	8001410 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2205      	movs	r2, #5
 80013ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d307      	bcc.n	80013fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f2      	bne.n	80013e2 <HAL_DMA_IRQHandler+0x2ca>
 80013fc:	e000      	b.n	8001400 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80013fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	4798      	blx	r3
 8001420:	e000      	b.n	8001424 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001422:	bf00      	nop
    }
  }
}
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop

0800142c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3b10      	subs	r3, #16
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <DMA_CalcBaseAndBitshift+0x64>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <DMA_CalcBaseAndBitshift+0x68>)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d909      	bls.n	800146e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001462:	f023 0303 	bic.w	r3, r3, #3
 8001466:	1d1a      	adds	r2, r3, #4
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	659a      	str	r2, [r3, #88]	; 0x58
 800146c:	e007      	b.n	800147e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	aaaaaaab 	.word	0xaaaaaaab
 8001494:	0800269c 	.word	0x0800269c

08001498 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d11f      	bne.n	80014f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d855      	bhi.n	8001564 <DMA_CheckFifoParam+0xcc>
 80014b8:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <DMA_CheckFifoParam+0x28>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080014d1 	.word	0x080014d1
 80014c4:	080014e3 	.word	0x080014e3
 80014c8:	080014d1 	.word	0x080014d1
 80014cc:	08001565 	.word	0x08001565
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d045      	beq.n	8001568 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014e0:	e042      	b.n	8001568 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014ea:	d13f      	bne.n	800156c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014f0:	e03c      	b.n	800156c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014fa:	d121      	bne.n	8001540 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d836      	bhi.n	8001570 <DMA_CheckFifoParam+0xd8>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <DMA_CheckFifoParam+0x70>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001519 	.word	0x08001519
 800150c:	0800151f 	.word	0x0800151f
 8001510:	08001519 	.word	0x08001519
 8001514:	08001531 	.word	0x08001531
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
      break;
 800151c:	e02f      	b.n	800157e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d024      	beq.n	8001574 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800152e:	e021      	b.n	8001574 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001534:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001538:	d11e      	bne.n	8001578 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800153e:	e01b      	b.n	8001578 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d902      	bls.n	800154c <DMA_CheckFifoParam+0xb4>
 8001546:	2b03      	cmp	r3, #3
 8001548:	d003      	beq.n	8001552 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800154a:	e018      	b.n	800157e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
      break;
 8001550:	e015      	b.n	800157e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00e      	beq.n	800157c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
      break;
 8001562:	e00b      	b.n	800157c <DMA_CheckFifoParam+0xe4>
      break;
 8001564:	bf00      	nop
 8001566:	e00a      	b.n	800157e <DMA_CheckFifoParam+0xe6>
      break;
 8001568:	bf00      	nop
 800156a:	e008      	b.n	800157e <DMA_CheckFifoParam+0xe6>
      break;
 800156c:	bf00      	nop
 800156e:	e006      	b.n	800157e <DMA_CheckFifoParam+0xe6>
      break;
 8001570:	bf00      	nop
 8001572:	e004      	b.n	800157e <DMA_CheckFifoParam+0xe6>
      break;
 8001574:	bf00      	nop
 8001576:	e002      	b.n	800157e <DMA_CheckFifoParam+0xe6>
      break;   
 8001578:	bf00      	nop
 800157a:	e000      	b.n	800157e <DMA_CheckFifoParam+0xe6>
      break;
 800157c:	bf00      	nop
    }
  } 
  
  return status; 
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e165      	b.n	8001874 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8154 	bne.w	800186e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d00b      	beq.n	80015e6 <HAL_GPIO_Init+0x5a>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d007      	beq.n	80015e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015da:	2b11      	cmp	r3, #17
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b12      	cmp	r3, #18
 80015e4:	d130      	bne.n	8001648 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 0201 	and.w	r2, r3, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0xfc>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b12      	cmp	r3, #18
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80ae 	beq.w	800186e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b5c      	ldr	r3, [pc, #368]	; (8001888 <HAL_GPIO_Init+0x2fc>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a5b      	ldr	r2, [pc, #364]	; (8001888 <HAL_GPIO_Init+0x2fc>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_GPIO_Init+0x2fc>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172e:	4a57      	ldr	r2, [pc, #348]	; (800188c <HAL_GPIO_Init+0x300>)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4e      	ldr	r2, [pc, #312]	; (8001890 <HAL_GPIO_Init+0x304>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d025      	beq.n	80017a6 <HAL_GPIO_Init+0x21a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4d      	ldr	r2, [pc, #308]	; (8001894 <HAL_GPIO_Init+0x308>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d01f      	beq.n	80017a2 <HAL_GPIO_Init+0x216>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4c      	ldr	r2, [pc, #304]	; (8001898 <HAL_GPIO_Init+0x30c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d019      	beq.n	800179e <HAL_GPIO_Init+0x212>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4b      	ldr	r2, [pc, #300]	; (800189c <HAL_GPIO_Init+0x310>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0x20e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4a      	ldr	r2, [pc, #296]	; (80018a0 <HAL_GPIO_Init+0x314>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00d      	beq.n	8001796 <HAL_GPIO_Init+0x20a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a49      	ldr	r2, [pc, #292]	; (80018a4 <HAL_GPIO_Init+0x318>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d007      	beq.n	8001792 <HAL_GPIO_Init+0x206>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a48      	ldr	r2, [pc, #288]	; (80018a8 <HAL_GPIO_Init+0x31c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_GPIO_Init+0x202>
 800178a:	2306      	movs	r3, #6
 800178c:	e00c      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 800178e:	2307      	movs	r3, #7
 8001790:	e00a      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 8001792:	2305      	movs	r3, #5
 8001794:	e008      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 8001796:	2304      	movs	r3, #4
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 800179a:	2303      	movs	r3, #3
 800179c:	e004      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 800179e:	2302      	movs	r3, #2
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 80017a6:	2300      	movs	r3, #0
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	f002 0203 	and.w	r2, r2, #3
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4093      	lsls	r3, r2
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b8:	4934      	ldr	r1, [pc, #208]	; (800188c <HAL_GPIO_Init+0x300>)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_GPIO_Init+0x320>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ea:	4a30      	ldr	r2, [pc, #192]	; (80018ac <HAL_GPIO_Init+0x320>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017f0:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <HAL_GPIO_Init+0x320>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001814:	4a25      	ldr	r2, [pc, #148]	; (80018ac <HAL_GPIO_Init+0x320>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_GPIO_Init+0x320>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800183e:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_GPIO_Init+0x320>)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_GPIO_Init+0x320>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001868:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_GPIO_Init+0x320>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3301      	adds	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	2b0f      	cmp	r3, #15
 8001878:	f67f ae96 	bls.w	80015a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800187c:	bf00      	nop
 800187e:	3724      	adds	r7, #36	; 0x24
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40023800 	.word	0x40023800
 800188c:	40013800 	.word	0x40013800
 8001890:	40020000 	.word	0x40020000
 8001894:	40020400 	.word	0x40020400
 8001898:	40020800 	.word	0x40020800
 800189c:	40020c00 	.word	0x40020c00
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40021400 	.word	0x40021400
 80018a8:	40021800 	.word	0x40021800
 80018ac:	40013c00 	.word	0x40013c00

080018b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
 80018bc:	4613      	mov	r3, r2
 80018be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c0:	787b      	ldrb	r3, [r7, #1]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018cc:	e003      	b.n	80018d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	041a      	lsls	r2, r3, #16
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	619a      	str	r2, [r3, #24]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_PWREx_EnableOverDrive+0x90>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a1f      	ldr	r2, [pc, #124]	; (8001974 <HAL_PWREx_EnableOverDrive+0x90>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_PWREx_EnableOverDrive+0x90>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_PWREx_EnableOverDrive+0x94>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001910:	f7ff f92e 	bl	8000b70 <HAL_GetTick>
 8001914:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001916:	e009      	b.n	800192c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001918:	f7ff f92a 	bl	8000b70 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001926:	d901      	bls.n	800192c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e01f      	b.n	800196c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_PWREx_EnableOverDrive+0x98>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d1ee      	bne.n	8001918 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_PWREx_EnableOverDrive+0x9c>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001940:	f7ff f916 	bl	8000b70 <HAL_GetTick>
 8001944:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001946:	e009      	b.n	800195c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001948:	f7ff f912 	bl	8000b70 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001956:	d901      	bls.n	800195c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e007      	b.n	800196c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_PWREx_EnableOverDrive+0x98>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001968:	d1ee      	bne.n	8001948 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	420e0040 	.word	0x420e0040
 800197c:	40007000 	.word	0x40007000
 8001980:	420e0044 	.word	0x420e0044

08001984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0cc      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d90c      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0b8      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d020      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4a58      	ldr	r2, [pc, #352]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f0:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4a52      	ldr	r2, [pc, #328]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fc:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	494d      	ldr	r1, [pc, #308]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d044      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d119      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e07f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d003      	beq.n	8001a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a52:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e067      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f023 0203 	bic.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4934      	ldr	r1, [pc, #208]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a74:	f7ff f87c 	bl	8000b70 <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7c:	f7ff f878 	bl	8000b70 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e04f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 020c 	and.w	r2, r3, #12
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1eb      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d20c      	bcs.n	8001acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e032      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4916      	ldr	r1, [pc, #88]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	490e      	ldr	r1, [pc, #56]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b0a:	f000 f821 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001b0e:	4601      	mov	r1, r0
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x1c8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe ffdc 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023c00 	.word	0x40023c00
 8001b40:	40023800 	.word	0x40023800
 8001b44:	0800268c 	.word	0x0800268c
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b6a:	4bc6      	ldr	r3, [pc, #792]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	f200 817e 	bhi.w	8001e74 <HAL_RCC_GetSysClockFreq+0x324>
 8001b78:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <HAL_RCC_GetSysClockFreq+0x30>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08001bb5 	.word	0x08001bb5
 8001b84:	08001e75 	.word	0x08001e75
 8001b88:	08001e75 	.word	0x08001e75
 8001b8c:	08001e75 	.word	0x08001e75
 8001b90:	08001bbb 	.word	0x08001bbb
 8001b94:	08001e75 	.word	0x08001e75
 8001b98:	08001e75 	.word	0x08001e75
 8001b9c:	08001e75 	.word	0x08001e75
 8001ba0:	08001bc1 	.word	0x08001bc1
 8001ba4:	08001e75 	.word	0x08001e75
 8001ba8:	08001e75 	.word	0x08001e75
 8001bac:	08001e75 	.word	0x08001e75
 8001bb0:	08001d1d 	.word	0x08001d1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4bb4      	ldr	r3, [pc, #720]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x338>)
 8001bb6:	613b      	str	r3, [r7, #16]
       break;
 8001bb8:	e15f      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bba:	4bb4      	ldr	r3, [pc, #720]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x33c>)
 8001bbc:	613b      	str	r3, [r7, #16]
      break;
 8001bbe:	e15c      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc0:	4bb0      	ldr	r3, [pc, #704]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bca:	4bae      	ldr	r3, [pc, #696]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d04a      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd6:	4bab      	ldr	r3, [pc, #684]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	099b      	lsrs	r3, r3, #6
 8001bdc:	f04f 0400 	mov.w	r4, #0
 8001be0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	ea03 0501 	and.w	r5, r3, r1
 8001bec:	ea04 0602 	and.w	r6, r4, r2
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	4632      	mov	r2, r6
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	f04f 0400 	mov.w	r4, #0
 8001bfc:	0154      	lsls	r4, r2, #5
 8001bfe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c02:	014b      	lsls	r3, r1, #5
 8001c04:	4619      	mov	r1, r3
 8001c06:	4622      	mov	r2, r4
 8001c08:	1b49      	subs	r1, r1, r5
 8001c0a:	eb62 0206 	sbc.w	r2, r2, r6
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	f04f 0400 	mov.w	r4, #0
 8001c16:	0194      	lsls	r4, r2, #6
 8001c18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c1c:	018b      	lsls	r3, r1, #6
 8001c1e:	1a5b      	subs	r3, r3, r1
 8001c20:	eb64 0402 	sbc.w	r4, r4, r2
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	00e2      	lsls	r2, r4, #3
 8001c2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c32:	00d9      	lsls	r1, r3, #3
 8001c34:	460b      	mov	r3, r1
 8001c36:	4614      	mov	r4, r2
 8001c38:	195b      	adds	r3, r3, r5
 8001c3a:	eb44 0406 	adc.w	r4, r4, r6
 8001c3e:	f04f 0100 	mov.w	r1, #0
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	0262      	lsls	r2, r4, #9
 8001c48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c4c:	0259      	lsls	r1, r3, #9
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4614      	mov	r4, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	4621      	mov	r1, r4
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f04f 0400 	mov.w	r4, #0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	f7fe fad0 	bl	8000204 <__aeabi_uldivmod>
 8001c64:	4603      	mov	r3, r0
 8001c66:	460c      	mov	r4, r1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e049      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6c:	4b85      	ldr	r3, [pc, #532]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	099b      	lsrs	r3, r3, #6
 8001c72:	f04f 0400 	mov.w	r4, #0
 8001c76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	ea03 0501 	and.w	r5, r3, r1
 8001c82:	ea04 0602 	and.w	r6, r4, r2
 8001c86:	4629      	mov	r1, r5
 8001c88:	4632      	mov	r2, r6
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	f04f 0400 	mov.w	r4, #0
 8001c92:	0154      	lsls	r4, r2, #5
 8001c94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c98:	014b      	lsls	r3, r1, #5
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4622      	mov	r2, r4
 8001c9e:	1b49      	subs	r1, r1, r5
 8001ca0:	eb62 0206 	sbc.w	r2, r2, r6
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	f04f 0400 	mov.w	r4, #0
 8001cac:	0194      	lsls	r4, r2, #6
 8001cae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cb2:	018b      	lsls	r3, r1, #6
 8001cb4:	1a5b      	subs	r3, r3, r1
 8001cb6:	eb64 0402 	sbc.w	r4, r4, r2
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	00e2      	lsls	r2, r4, #3
 8001cc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cc8:	00d9      	lsls	r1, r3, #3
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4614      	mov	r4, r2
 8001cce:	195b      	adds	r3, r3, r5
 8001cd0:	eb44 0406 	adc.w	r4, r4, r6
 8001cd4:	f04f 0100 	mov.w	r1, #0
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	02a2      	lsls	r2, r4, #10
 8001cde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ce2:	0299      	lsls	r1, r3, #10
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4614      	mov	r4, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	4621      	mov	r1, r4
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f04f 0400 	mov.w	r4, #0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	f7fe fa85 	bl	8000204 <__aeabi_uldivmod>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	460c      	mov	r4, r1
 8001cfe:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d00:	4b60      	ldr	r3, [pc, #384]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	613b      	str	r3, [r7, #16]
      break;
 8001d1a:	e0ae      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1c:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d24:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d26:	4b57      	ldr	r3, [pc, #348]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d04a      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d32:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	f04f 0400 	mov.w	r4, #0
 8001d3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	ea03 0501 	and.w	r5, r3, r1
 8001d48:	ea04 0602 	and.w	r6, r4, r2
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	4632      	mov	r2, r6
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	f04f 0400 	mov.w	r4, #0
 8001d58:	0154      	lsls	r4, r2, #5
 8001d5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d5e:	014b      	lsls	r3, r1, #5
 8001d60:	4619      	mov	r1, r3
 8001d62:	4622      	mov	r2, r4
 8001d64:	1b49      	subs	r1, r1, r5
 8001d66:	eb62 0206 	sbc.w	r2, r2, r6
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	f04f 0400 	mov.w	r4, #0
 8001d72:	0194      	lsls	r4, r2, #6
 8001d74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d78:	018b      	lsls	r3, r1, #6
 8001d7a:	1a5b      	subs	r3, r3, r1
 8001d7c:	eb64 0402 	sbc.w	r4, r4, r2
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	00e2      	lsls	r2, r4, #3
 8001d8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d8e:	00d9      	lsls	r1, r3, #3
 8001d90:	460b      	mov	r3, r1
 8001d92:	4614      	mov	r4, r2
 8001d94:	195b      	adds	r3, r3, r5
 8001d96:	eb44 0406 	adc.w	r4, r4, r6
 8001d9a:	f04f 0100 	mov.w	r1, #0
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	0262      	lsls	r2, r4, #9
 8001da4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001da8:	0259      	lsls	r1, r3, #9
 8001daa:	460b      	mov	r3, r1
 8001dac:	4614      	mov	r4, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	4621      	mov	r1, r4
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f04f 0400 	mov.w	r4, #0
 8001db8:	461a      	mov	r2, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	f7fe fa22 	bl	8000204 <__aeabi_uldivmod>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e049      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	099b      	lsrs	r3, r3, #6
 8001dce:	f04f 0400 	mov.w	r4, #0
 8001dd2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	ea03 0501 	and.w	r5, r3, r1
 8001dde:	ea04 0602 	and.w	r6, r4, r2
 8001de2:	4629      	mov	r1, r5
 8001de4:	4632      	mov	r2, r6
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	f04f 0400 	mov.w	r4, #0
 8001dee:	0154      	lsls	r4, r2, #5
 8001df0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001df4:	014b      	lsls	r3, r1, #5
 8001df6:	4619      	mov	r1, r3
 8001df8:	4622      	mov	r2, r4
 8001dfa:	1b49      	subs	r1, r1, r5
 8001dfc:	eb62 0206 	sbc.w	r2, r2, r6
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	f04f 0400 	mov.w	r4, #0
 8001e08:	0194      	lsls	r4, r2, #6
 8001e0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e0e:	018b      	lsls	r3, r1, #6
 8001e10:	1a5b      	subs	r3, r3, r1
 8001e12:	eb64 0402 	sbc.w	r4, r4, r2
 8001e16:	f04f 0100 	mov.w	r1, #0
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	00e2      	lsls	r2, r4, #3
 8001e20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e24:	00d9      	lsls	r1, r3, #3
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	195b      	adds	r3, r3, r5
 8001e2c:	eb44 0406 	adc.w	r4, r4, r6
 8001e30:	f04f 0100 	mov.w	r1, #0
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	02a2      	lsls	r2, r4, #10
 8001e3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e3e:	0299      	lsls	r1, r3, #10
 8001e40:	460b      	mov	r3, r1
 8001e42:	4614      	mov	r4, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	4621      	mov	r1, r4
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f04f 0400 	mov.w	r4, #0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4623      	mov	r3, r4
 8001e52:	f7fe f9d7 	bl	8000204 <__aeabi_uldivmod>
 8001e56:	4603      	mov	r3, r0
 8001e58:	460c      	mov	r4, r1
 8001e5a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0f1b      	lsrs	r3, r3, #28
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	613b      	str	r3, [r7, #16]
      break;
 8001e72:	e002      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x338>)
 8001e76:	613b      	str	r3, [r7, #16]
      break;
 8001e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7a:	693b      	ldr	r3, [r7, #16]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	00f42400 	.word	0x00f42400
 8001e8c:	007a1200 	.word	0x007a1200

08001e90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8083 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001eaa:	4b95      	ldr	r3, [pc, #596]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d019      	beq.n	8001eea <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001eb6:	4b92      	ldr	r3, [pc, #584]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d106      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ec2:	4b8f      	ldr	r3, [pc, #572]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ece:	d00c      	beq.n	8001eea <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed0:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	d112      	bne.n	8001f02 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001edc:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee8:	d10b      	bne.n	8001f02 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eea:	4b85      	ldr	r3, [pc, #532]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d05b      	beq.n	8001fae <HAL_RCC_OscConfig+0x11e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d157      	bne.n	8001fae <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e216      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x8a>
 8001f0c:	4b7c      	ldr	r3, [pc, #496]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a7b      	ldr	r2, [pc, #492]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	e01d      	b.n	8001f56 <HAL_RCC_OscConfig+0xc6>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_OscConfig+0xae>
 8001f24:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a75      	ldr	r2, [pc, #468]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b73      	ldr	r3, [pc, #460]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a72      	ldr	r2, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0xc6>
 8001f3e:	4b70      	ldr	r3, [pc, #448]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a6f      	ldr	r2, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b6d      	ldr	r3, [pc, #436]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6c      	ldr	r2, [pc, #432]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d013      	beq.n	8001f86 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7fe fe07 	bl	8000b70 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f66:	f7fe fe03 	bl	8000b70 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1db      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f78:	4b61      	ldr	r3, [pc, #388]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0xd6>
 8001f84:	e014      	b.n	8001fb0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe fdf3 	bl	8000b70 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fdef 	bl	8000b70 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1c7      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa0:	4b57      	ldr	r3, [pc, #348]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0xfe>
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d06f      	beq.n	800209c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fbc:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d017      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fc8:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fd4:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00b      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe0:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	d11c      	bne.n	8002026 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fec:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d116      	bne.n	8002026 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff8:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_OscConfig+0x180>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d001      	beq.n	8002010 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e18f      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4938      	ldr	r1, [pc, #224]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002024:	e03a      	b.n	800209c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d020      	beq.n	8002070 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202e:	4b35      	ldr	r3, [pc, #212]	; (8002104 <HAL_RCC_OscConfig+0x274>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe fd9c 	bl	8000b70 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203c:	f7fe fd98 	bl	8000b70 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e170      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4925      	ldr	r1, [pc, #148]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
 800206e:	e015      	b.n	800209c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_RCC_OscConfig+0x274>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7fe fd7b 	bl	8000b70 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207e:	f7fe fd77 	bl	8000b70 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e14f      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d037      	beq.n	8002118 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d016      	beq.n	80020de <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_RCC_OscConfig+0x278>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7fe fd5b 	bl	8000b70 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020be:	f7fe fd57 	bl	8000b70 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e12f      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 80020d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x22e>
 80020dc:	e01c      	b.n	8002118 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_RCC_OscConfig+0x278>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7fe fd44 	bl	8000b70 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ea:	e00f      	b.n	800210c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ec:	f7fe fd40 	bl	8000b70 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d908      	bls.n	800210c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e118      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	42470000 	.word	0x42470000
 8002108:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b8a      	ldr	r3, [pc, #552]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 800210e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e9      	bne.n	80020ec <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8097 	beq.w	8002254 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b83      	ldr	r3, [pc, #524]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a7e      	ldr	r2, [pc, #504]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b7c      	ldr	r3, [pc, #496]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b79      	ldr	r3, [pc, #484]	; (800233c <HAL_RCC_OscConfig+0x4ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b76      	ldr	r3, [pc, #472]	; (800233c <HAL_RCC_OscConfig+0x4ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a75      	ldr	r2, [pc, #468]	; (800233c <HAL_RCC_OscConfig+0x4ac>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7fe fcff 	bl	8000b70 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7fe fcfb 	bl	8000b70 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0d3      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b6c      	ldr	r3, [pc, #432]	; (800233c <HAL_RCC_OscConfig+0x4ac>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x31a>
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a65      	ldr	r2, [pc, #404]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	e01c      	b.n	80021e4 <HAL_RCC_OscConfig+0x354>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x33c>
 80021b2:	4b61      	ldr	r3, [pc, #388]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a60      	ldr	r2, [pc, #384]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
 80021be:	4b5e      	ldr	r3, [pc, #376]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a5d      	ldr	r2, [pc, #372]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0x354>
 80021cc:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	4a59      	ldr	r2, [pc, #356]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6713      	str	r3, [r2, #112]	; 0x70
 80021d8:	4b57      	ldr	r3, [pc, #348]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a56      	ldr	r2, [pc, #344]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 80021de:	f023 0304 	bic.w	r3, r3, #4
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7fe fcc0 	bl	8000b70 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	e00a      	b.n	800220a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe fcbc 	bl	8000b70 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e092      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0ee      	beq.n	80021f4 <HAL_RCC_OscConfig+0x364>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7fe fcaa 	bl	8000b70 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe fca6 	bl	8000b70 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e07c      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002236:	4b40      	ldr	r3, [pc, #256]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1ee      	bne.n	8002220 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002248:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	4a3a      	ldr	r2, [pc, #232]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 800224e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002252:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d068      	beq.n	800232e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800225c:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d060      	beq.n	800232a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d145      	bne.n	80022fc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b33      	ldr	r3, [pc, #204]	; (8002340 <HAL_RCC_OscConfig+0x4b0>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7fe fc7b 	bl	8000b70 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227e:	f7fe fc77 	bl	8000b70 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e04f      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002290:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	019b      	lsls	r3, r3, #6
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	3b01      	subs	r3, #1
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	061b      	lsls	r3, r3, #24
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	071b      	lsls	r3, r3, #28
 80022c8:	491b      	ldr	r1, [pc, #108]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_RCC_OscConfig+0x4b0>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fc4c 	bl	8000b70 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe fc48 	bl	8000b70 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e020      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x44c>
 80022fa:	e018      	b.n	800232e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_RCC_OscConfig+0x4b0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7fe fc35 	bl	8000b70 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230a:	f7fe fc31 	bl	8000b70 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e009      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_OscConfig+0x4a8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f0      	bne.n	800230a <HAL_RCC_OscConfig+0x47a>
 8002328:	e001      	b.n	800232e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	40007000 	.word	0x40007000
 8002340:	42470060 	.word	0x42470060

08002344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e01d      	b.n	8002392 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fb00 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	4619      	mov	r1, r3
 8002382:	4610      	mov	r0, r2
 8002384:	f000 f82e 	bl	80023e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2202      	movs	r2, #2
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b06      	cmp	r3, #6
 80023ba:	d007      	beq.n	80023cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a40      	ldr	r2, [pc, #256]	; (80024f8 <TIM_Base_SetConfig+0x114>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <TIM_Base_SetConfig+0x40>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002402:	d00f      	beq.n	8002424 <TIM_Base_SetConfig+0x40>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3d      	ldr	r2, [pc, #244]	; (80024fc <TIM_Base_SetConfig+0x118>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00b      	beq.n	8002424 <TIM_Base_SetConfig+0x40>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3c      	ldr	r2, [pc, #240]	; (8002500 <TIM_Base_SetConfig+0x11c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <TIM_Base_SetConfig+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <TIM_Base_SetConfig+0x120>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d003      	beq.n	8002424 <TIM_Base_SetConfig+0x40>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3a      	ldr	r2, [pc, #232]	; (8002508 <TIM_Base_SetConfig+0x124>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d108      	bne.n	8002436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a2f      	ldr	r2, [pc, #188]	; (80024f8 <TIM_Base_SetConfig+0x114>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02b      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002444:	d027      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a2c      	ldr	r2, [pc, #176]	; (80024fc <TIM_Base_SetConfig+0x118>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d023      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a2b      	ldr	r2, [pc, #172]	; (8002500 <TIM_Base_SetConfig+0x11c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01f      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a2a      	ldr	r2, [pc, #168]	; (8002504 <TIM_Base_SetConfig+0x120>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01b      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a29      	ldr	r2, [pc, #164]	; (8002508 <TIM_Base_SetConfig+0x124>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d017      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a28      	ldr	r2, [pc, #160]	; (800250c <TIM_Base_SetConfig+0x128>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a27      	ldr	r2, [pc, #156]	; (8002510 <TIM_Base_SetConfig+0x12c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00f      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a26      	ldr	r2, [pc, #152]	; (8002514 <TIM_Base_SetConfig+0x130>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00b      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a25      	ldr	r2, [pc, #148]	; (8002518 <TIM_Base_SetConfig+0x134>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a24      	ldr	r2, [pc, #144]	; (800251c <TIM_Base_SetConfig+0x138>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d003      	beq.n	8002496 <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a23      	ldr	r2, [pc, #140]	; (8002520 <TIM_Base_SetConfig+0x13c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d108      	bne.n	80024a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <TIM_Base_SetConfig+0x114>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d003      	beq.n	80024dc <TIM_Base_SetConfig+0xf8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <TIM_Base_SetConfig+0x124>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d103      	bne.n	80024e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	615a      	str	r2, [r3, #20]
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40000400 	.word	0x40000400
 8002500:	40000800 	.word	0x40000800
 8002504:	40000c00 	.word	0x40000c00
 8002508:	40010400 	.word	0x40010400
 800250c:	40014000 	.word	0x40014000
 8002510:	40014400 	.word	0x40014400
 8002514:	40014800 	.word	0x40014800
 8002518:	40001800 	.word	0x40001800
 800251c:	40001c00 	.word	0x40001c00
 8002520:	40002000 	.word	0x40002000

08002524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002538:	2302      	movs	r3, #2
 800253a:	e05a      	b.n	80025f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a21      	ldr	r2, [pc, #132]	; (8002600 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d022      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002588:	d01d      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d018      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1a      	ldr	r2, [pc, #104]	; (800260c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00e      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d009      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a17      	ldr	r2, [pc, #92]	; (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a15      	ldr	r2, [pc, #84]	; (8002618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10c      	bne.n	80025e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40010000 	.word	0x40010000
 8002604:	40000400 	.word	0x40000400
 8002608:	40000800 	.word	0x40000800
 800260c:	40000c00 	.word	0x40000c00
 8002610:	40010400 	.word	0x40010400
 8002614:	40014000 	.word	0x40014000
 8002618:	40001800 	.word	0x40001800

0800261c <__libc_init_array>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	4e0d      	ldr	r6, [pc, #52]	; (8002654 <__libc_init_array+0x38>)
 8002620:	4c0d      	ldr	r4, [pc, #52]	; (8002658 <__libc_init_array+0x3c>)
 8002622:	1ba4      	subs	r4, r4, r6
 8002624:	10a4      	asrs	r4, r4, #2
 8002626:	2500      	movs	r5, #0
 8002628:	42a5      	cmp	r5, r4
 800262a:	d109      	bne.n	8002640 <__libc_init_array+0x24>
 800262c:	4e0b      	ldr	r6, [pc, #44]	; (800265c <__libc_init_array+0x40>)
 800262e:	4c0c      	ldr	r4, [pc, #48]	; (8002660 <__libc_init_array+0x44>)
 8002630:	f000 f820 	bl	8002674 <_init>
 8002634:	1ba4      	subs	r4, r4, r6
 8002636:	10a4      	asrs	r4, r4, #2
 8002638:	2500      	movs	r5, #0
 800263a:	42a5      	cmp	r5, r4
 800263c:	d105      	bne.n	800264a <__libc_init_array+0x2e>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002644:	4798      	blx	r3
 8002646:	3501      	adds	r5, #1
 8002648:	e7ee      	b.n	8002628 <__libc_init_array+0xc>
 800264a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800264e:	4798      	blx	r3
 8002650:	3501      	adds	r5, #1
 8002652:	e7f2      	b.n	800263a <__libc_init_array+0x1e>
 8002654:	080026ac 	.word	0x080026ac
 8002658:	080026ac 	.word	0x080026ac
 800265c:	080026ac 	.word	0x080026ac
 8002660:	080026b0 	.word	0x080026b0

08002664 <memset>:
 8002664:	4402      	add	r2, r0
 8002666:	4603      	mov	r3, r0
 8002668:	4293      	cmp	r3, r2
 800266a:	d100      	bne.n	800266e <memset+0xa>
 800266c:	4770      	bx	lr
 800266e:	f803 1b01 	strb.w	r1, [r3], #1
 8002672:	e7f9      	b.n	8002668 <memset+0x4>

08002674 <_init>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

08002680 <_fini>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr
